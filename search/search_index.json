{
    "docs": [
        {
            "location": "/",
            "text": "\u00b6\n\n\n\n\njsPsych is a JavaScript library for running behavioral experiments in a web browser. The library provides a flexible framework for building a wide range of laboratory-like experiments that can be run online.\n\n\nTo use jsPsych, you provide a description of the experiment in the form of \na timeline\n. jsPsych handles things like determining which trial to run next, storing data, and randomization. jsPsych uses \nplugins\n to define what to do at each point on the timeline. Plugins are ready-made templates for simple experimental tasks like displaying instructions or displaying a stimulus and collecting a keyboard response. Plugins are very flexible to support a wide variety of experiments. It is easy to create your own plugin if you have experience with JavaScript programming.\n\n\nThe page on timelines\n is a good place to start learning about jsPsych. From there, you might want to complete the \nHello World! tutorial\n and the \nreaction time experiment tutorial\n.",
            "title": "Introduction"
        },
        {
            "location": "/tutorials/hello-world/",
            "text": "jsPsych \"Hello world\" experiment\n\u00b6\n\n\nIn the long tradition of \n\"Hello world!\"\n examples, this tutorial creates an experiment that outputs the phrase \"Hello world!\" to the browser. Though useless as an actual experiment, the process is helpful for learning the basics of using the jsPsych library. This tutorial will assume that you know very little about how to set up a web page.\n\n\nStep 1: Download the jsPsych library\n\u00b6\n\n\nStart by downloading the jsPsych library. The most recent version can always be found on the \nGitHub releases page\n.\n\n\nNote: the image below shows version 4.2, but the process is the same for the most recent version.\n\n\n\n\nStep 2: Create a folder to store your experiment files\n\u00b6\n\n\nCreate a folder on your computer to put the experiment files in. Once you've created the folder, open the downloaded archive from step 1, and move the extracted folder (called \njspsych-6.0.1.1\n if using v6.0.1 of jsPsych) into the experiment folder. Here's what it looks like on a Windows machine:\n\n\n\n\nStep 3: Create a new HTML file\n\u00b6\n\n\nTo edit jsPsych code you'll need a programming-friendly text editor. Some free options are:\n\n\n\n\nAtom\n (Windows, OSX, Linux)\n\n\nNotepad++\n (Windows)\n\n\nTextMate\n (OSX)\n\n\n\n\nOnce you've got a text editor that you like, create a new file in the experiment folder called \nexperiment.html\n\n\n\n\nStep 4: Add the bare-minimum HTML code\n\u00b6\n\n\nThere's some basic code that (nearly) all HTML documents have in common. Here's a typical bare-bones HTML document.\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n    \n<\nhead\n>\n\n        \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n</\nhead\n>\n\n    \n<\nbody\n></\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nAdd the above code to the experiment.html file and save it. If you then open the file in a web browser, you should see a blank page and the title of the page will be 'My experiment'.\n\n\nStep 5: Import the jsPsych library\n\u00b6\n\n\nTo use jsPsych, add a \n<script>\n tag to import the library.\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n    \n<\nhead\n>\n\n        \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n        \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n    \n</\nhead\n>\n\n    \n<\nbody\n></\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nYou may also want to import the jsPsych stylesheet, which applies a basic set of visual styles to the experiment to make it visually pleasing. This requires adding a \n<link>\n tag to the \n<head>\n section of the document.\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n    \n<\nhead\n>\n\n        \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n        \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n        \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n    \n</\nhead\n>\n\n    \n<\nbody\n></\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nStep 6: Use the jspsych-html-keyboard-response plugin to print a message\n\u00b6\n\n\nFor the demo, we want to show some text on the screen. This is exactly what the \njspsych-html-keyboard-response plugin\n is designed to do. To use the plugin, we need to load it with a \n<script>\n tag.\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n    \n<\nhead\n>\n\n        \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n        \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n        \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n        \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n    \n</\nhead\n>\n\n    \n<\nbody\n></\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nOnce the plugin is loaded, we can create an experiment using the plugin. To declare a trial that uses the html-keyboard-response plugin, we create a JavaScript object with the property \ntype\n equal to \n'html-keyboard-response'\n. Then we can specify the other parameters of the plugin in the same object.\n\n\nTo add JavaScript code directly to the webpage we need to add a set of \n<script>\n tags after the \n<body>\n tags.\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n    \n<\nhead\n>\n\n        \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n        \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n        \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n        \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n    \n</\nhead\n>\n\n    \n<\nbody\n></\nbody\n>\n\n    \n<\nscript\n>\n\n\n    \nvar\n \nhello_trial\n \n=\n \n{\n\n        \ntype\n:\n \n'html-keyboard-response'\n,\n\n        \nstimulus\n:\n \n'Hello world!'\n\n    \n}\n\n\n    \n</\nscript\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nNow that we have the trial defined we just need to tell jsPsych to run an experiment consisting of this trial. This requires using the \njsPsych.init\n function and specifying the \ntimeline\n parameter.\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n    \n<\nhead\n>\n\n        \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n        \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n        \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n        \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n    \n</\nhead\n>\n\n    \n<\nbody\n></\nbody\n>\n\n    \n<\nscript\n>\n\n\n    \nvar\n \nhello_trial\n \n=\n \n{\n\n        \ntype\n:\n \n'html-keyboard-response'\n,\n\n        \nstimulus\n:\n \n'Hello world!'\n\n    \n}\n\n\n    \njsPsych\n.\ninit\n({\n\n        \ntimeline\n:\n \n[\nhello_trial\n]\n\n    \n})\n\n\n    \n</\nscript\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nOnce you've saved the file, open it in a browser. You should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).",
            "title": "The Basics: Hello World"
        },
        {
            "location": "/tutorials/hello-world/#jspsych-hello-world-experiment",
            "text": "In the long tradition of  \"Hello world!\"  examples, this tutorial creates an experiment that outputs the phrase \"Hello world!\" to the browser. Though useless as an actual experiment, the process is helpful for learning the basics of using the jsPsych library. This tutorial will assume that you know very little about how to set up a web page.",
            "title": "jsPsych \"Hello world\" experiment"
        },
        {
            "location": "/tutorials/hello-world/#step-1-download-the-jspsych-library",
            "text": "Start by downloading the jsPsych library. The most recent version can always be found on the  GitHub releases page .  Note: the image below shows version 4.2, but the process is the same for the most recent version.",
            "title": "Step 1: Download the jsPsych library"
        },
        {
            "location": "/tutorials/hello-world/#step-2-create-a-folder-to-store-your-experiment-files",
            "text": "Create a folder on your computer to put the experiment files in. Once you've created the folder, open the downloaded archive from step 1, and move the extracted folder (called  jspsych-6.0.1.1  if using v6.0.1 of jsPsych) into the experiment folder. Here's what it looks like on a Windows machine:",
            "title": "Step 2: Create a folder to store your experiment files"
        },
        {
            "location": "/tutorials/hello-world/#step-3-create-a-new-html-file",
            "text": "To edit jsPsych code you'll need a programming-friendly text editor. Some free options are:   Atom  (Windows, OSX, Linux)  Notepad++  (Windows)  TextMate  (OSX)   Once you've got a text editor that you like, create a new file in the experiment folder called  experiment.html",
            "title": "Step 3: Create a new HTML file"
        },
        {
            "location": "/tutorials/hello-world/#step-4-add-the-bare-minimum-html-code",
            "text": "There's some basic code that (nearly) all HTML documents have in common. Here's a typical bare-bones HTML document.  <!DOCTYPE html>  < html > \n     < head > \n         < title > My experiment </ title > \n     </ head > \n     < body ></ body >  </ html >   Add the above code to the experiment.html file and save it. If you then open the file in a web browser, you should see a blank page and the title of the page will be 'My experiment'.",
            "title": "Step 4: Add the bare-minimum HTML code"
        },
        {
            "location": "/tutorials/hello-world/#step-5-import-the-jspsych-library",
            "text": "To use jsPsych, add a  <script>  tag to import the library.  <!DOCTYPE html>  < html > \n     < head > \n         < title > My experiment </ title > \n         < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n     </ head > \n     < body ></ body >  </ html >   You may also want to import the jsPsych stylesheet, which applies a basic set of visual styles to the experiment to make it visually pleasing. This requires adding a  <link>  tag to the  <head>  section of the document.  <!DOCTYPE html>  < html > \n     < head > \n         < title > My experiment </ title > \n         < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n         < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n     </ head > \n     < body ></ body >  </ html >",
            "title": "Step 5: Import the jsPsych library"
        },
        {
            "location": "/tutorials/hello-world/#step-6-use-the-jspsych-html-keyboard-response-plugin-to-print-a-message",
            "text": "For the demo, we want to show some text on the screen. This is exactly what the  jspsych-html-keyboard-response plugin  is designed to do. To use the plugin, we need to load it with a  <script>  tag.  <!DOCTYPE html>  < html > \n     < head > \n         < title > My experiment </ title > \n         < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n         < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n         < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n     </ head > \n     < body ></ body >  </ html >   Once the plugin is loaded, we can create an experiment using the plugin. To declare a trial that uses the html-keyboard-response plugin, we create a JavaScript object with the property  type  equal to  'html-keyboard-response' . Then we can specify the other parameters of the plugin in the same object.  To add JavaScript code directly to the webpage we need to add a set of  <script>  tags after the  <body>  tags.  <!DOCTYPE html>  < html > \n     < head > \n         < title > My experiment </ title > \n         < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n         < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n         < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n     </ head > \n     < body ></ body > \n     < script > \n\n     var   hello_trial   =   { \n         type :   'html-keyboard-response' , \n         stimulus :   'Hello world!' \n     } \n\n     </ script >  </ html >   Now that we have the trial defined we just need to tell jsPsych to run an experiment consisting of this trial. This requires using the  jsPsych.init  function and specifying the  timeline  parameter.  <!DOCTYPE html>  < html > \n     < head > \n         < title > My experiment </ title > \n         < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n         < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n         < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n     </ head > \n     < body ></ body > \n     < script > \n\n     var   hello_trial   =   { \n         type :   'html-keyboard-response' , \n         stimulus :   'Hello world!' \n     } \n\n     jsPsych . init ({ \n         timeline :   [ hello_trial ] \n     }) \n\n     </ script >  </ html >   Once you've saved the file, open it in a browser. You should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).",
            "title": "Step 6: Use the jspsych-html-keyboard-response plugin to print a message"
        },
        {
            "location": "/tutorials/rt-task/",
            "text": "Summary of Tutorial Content\n\u00b6\n\n\nThis tutorial will work through the creation of a simple response time task. The task is to press one key for a blue colored circle and another key for an orange colored circle. Despite this simple task, the tutorial covers many of the key features of jsPsych, including:\n\n\n\n\nUsing a plugin to create a standard trial.\n\n\nCombining plugins together to create new kinds of trials.\n\n\nUsing timeline variables to maximize code reuse.\n\n\nRandomizing presentation order.\n\n\nManipulating, filtering, and aggregating data.\n\n\nUsing dynamic content to change the experiment parameters based on the subject's responses.\n\n\n\n\nPart 1: Creating a blank experiment\n\u00b6\n\n\nStart by downloading jsPsych and setting up a folder to contain your experiment files. If you are unsure how to do this, follow steps 1-5 in the \nHello World tutorial\n. At the end of step 5 in the Hello World tutorial, you should have an experiment page that looks like this:\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n></\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nThis will be our starting point for building the rest of the experiment.\n\n\nPart 2: Display welcome message\n\u00b6\n\n\nAll jsPsych experiments are defined by a timeline. The timeline is an array that contains the set of trials we want to run in the experiment. We can start by defining the timeline array.\n\n\nvar\n \ntimeline\n \n=\n \n[];\n\n\n\n\n\n\nLet's greet the subject with a simple welcome message using the \njspsych-html-keyboard-response\n plugin.\n\n\nFirst, we create a trial that uses the jspsych-html-keyboard-response plugin and contains a simple string to show the subject.\n\n\nvar\n \nwelcome\n \n=\n \n{\n\n  \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n  \nstimulus\n:\n \n\"Welcome to the experiment. Press any key to begin.\"\n\n\n};\n\n\n\n\n\n\nNext, we push the welcome trial to the timeline, which adds it to the end of the array.\n\n\ntimeline\n.\npush\n(\nwelcome\n);\n\n\n\n\n\n\nFinally, we tell jsPsych to run the experiment by calling the \njsPsych.init() function\n and passing in the array that defines the experiment timeline.\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \ntimeline\n\n\n});\n\n\n\n\n\n\nThe complete code so far\n\u00b6\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n></\nbody\n>\n\n  \n<\nscript\n>\n\n\n    \n/* create timeline */\n\n    \nvar\n \ntimeline\n \n=\n \n[];\n\n\n    \n/* define welcome message trial */\n\n    \nvar\n \nwelcome\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"Welcome to the experiment. Press any key to begin.\"\n\n    \n};\n\n    \ntimeline\n.\npush\n(\nwelcome\n);\n\n\n    \n/* start the experiment */\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \ntimeline\n\n    \n});\n\n  \n</\nscript\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nPart 3: Show instructions\n\u00b6\n\n\nWe can use the same basic structure from part 2 to create a new trial that shows instructions to the subject. The only difference in this trial is that we will use HTML formatting to control how the instructions display.\n\n\nThe trial definition looks like this:\n\n\nvar\n \ninstructions_block\n \n=\n \n{\n\n  \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n  \nstimulus\n:\n \n\"<p>In this experiment, a circle will appear in the center \"\n \n+\n\n      \n\"of the screen.</p><p>If the circle is <strong>blue</strong>, \"\n \n+\n\n      \n\"press the letter F on the keyboard as fast as you can.</p>\"\n \n+\n\n      \n\"<p>If the circle is <strong>orange</strong>, press the letter J \"\n \n+\n\n      \n\"as fast as you can.</p>\"\n \n+\n\n      \n\"<div style='float: left;'><img src='img/blue.png'></img>\"\n \n+\n\n      \n\"<p class='small'><strong>Press the F key</strong></p></div>\"\n \n+\n\n      \n\"<div class='float: right;'><img src='img/orange.png'></img>\"\n \n+\n\n      \n\"<p class='small'><strong>Press the J key</strong></p></div>\"\n \n+\n\n      \n\"<p>Press any key to begin.</p>\"\n\n\n};\n\n\n\n\n\n\nNotice that the HTML includes \n<img>\n tags to display the images that the subject will be responding to. You'll need to download these image files. Right-click on each image below and select \nSave image as...\n. Put the images in a folder called \nimg\n in the experiment folder you created in part 1.\n\n\n\n\n\n\nDon't forget to add the trial to the timeline:\n\n\ntimeline\n.\npush\n(\ninstructions\n);\n\n\n\n\n\n\nThe complete code so far\n\u00b6\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n></\nbody\n>\n\n  \n<\nscript\n>\n\n\n    \n/* create timeline */\n\n    \nvar\n \ntimeline\n \n=\n \n[];\n\n\n    \n/* define welcome message trial */\n\n    \nvar\n \nwelcome\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"Welcome to the experiment. Press any key to begin.\"\n\n    \n};\n\n    \ntimeline\n.\npush\n(\nwelcome\n);\n\n\n    \n/* define instructions trial */\n\n    \nvar\n \ninstructions\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"<p>In this experiment, a circle will appear in the center \"\n \n+\n\n          \n\"of the screen.</p><p>If the circle is <strong>blue</strong>, \"\n \n+\n\n          \n\"press the letter F on the keyboard as fast as you can.</p>\"\n \n+\n\n          \n\"<p>If the circle is <strong>orange</strong>, press the letter J \"\n \n+\n\n          \n\"as fast as you can.</p>\"\n \n+\n\n          \n\"<div style='float: left;'><img src='img/blue.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the F key</strong></p></div>\"\n \n+\n\n          \n\"<div class='float: right;'><img src='img/orange.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the J key</strong></p></div>\"\n \n+\n\n          \n\"<p>Press any key to begin.</p>\"\n,\n\n      \npost_trial_gap\n:\n \n2000\n\n    \n};\n\n    \ntimeline\n.\npush\n(\ninstructions\n);\n\n\n    \n/* start the experiment */\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \ntimeline\n\n    \n});\n\n  \n</\nscript\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\nPart 4: Displaying stimuli and getting responses\n\u00b6\n\n\nCreating trials to show the stimuli is conceptually the same as creating a trial to show instructions, except that now we are displaying an image instead of text or html. This means we need to use a different plugin: jspsych-image-keyboard-response. We need to start by loading this plugin by adding a \n<script>\n tag to the document.\n\n\n<\nhead\n>\n\n  \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n  \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n  \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n  \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\"\n></\nscript\n>\n\n  \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n\n</\nhead\n>\n\n\n\n\n\n\nFor now, we will just show each image once. The path to the image file should be set as the \nstimulus\n parameter. We will also set the option for which keys the subject is allowed to use to respond (\nchoices\n) so that only the 'f' and 'j' keys are valid responses.\n\n\nvar\n \nblue_trial\n \n=\n \n{\n\n  \ntype\n:\n \n'image-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'img/blue.png'\n,\n\n  \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n]\n\n\n};\n\n\n\nvar\n \norange_trial\n \n=\n \n{\n\n  \ntype\n:\n \n'image-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'img/orange.png'\n,\n\n  \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n]\n\n\n}\n\n\n\n\n\n\nAs usual, we need to add the trials to the timeline.\n\n\ntimeline\n.\npush\n(\nblue_trial\n,\n \norange_trial\n);\n\n\n\n\n\n\nThe complete code so far\n\u00b6\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n></\nbody\n>\n\n  \n<\nscript\n>\n\n\n    \n/* create timeline */\n\n    \nvar\n \ntimeline\n \n=\n \n[];\n\n\n    \n/* define welcome message trial */\n\n    \nvar\n \nwelcome\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"Welcome to the experiment. Press any key to begin.\"\n\n    \n};\n\n    \ntimeline\n.\npush\n(\nwelcome\n);\n\n\n    \n/* define instructions trial */\n\n    \nvar\n \ninstructions\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"<p>In this experiment, a circle will appear in the center \"\n \n+\n\n          \n\"of the screen.</p><p>If the circle is <strong>blue</strong>, \"\n \n+\n\n          \n\"press the letter F on the keyboard as fast as you can.</p>\"\n \n+\n\n          \n\"<p>If the circle is <strong>orange</strong>, press the letter J \"\n \n+\n\n          \n\"as fast as you can.</p>\"\n \n+\n\n          \n\"<div style='float: left;'><img src='img/blue.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the F key</strong></p></div>\"\n \n+\n\n          \n\"<div class='float: right;'><img src='img/orange.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the J key</strong></p></div>\"\n \n+\n\n          \n\"<p>Press any key to begin.</p>\"\n,\n\n      \npost_trial_gap\n:\n \n2000\n\n    \n};\n\n    \ntimeline\n.\npush\n(\ninstructions\n);\n\n\n    \n/* test trials */\n\n    \nvar\n \nblue_trial\n \n=\n \n{\n\n      \ntype\n:\n \n'image-keyboard-response'\n,\n\n      \nstimulus\n:\n \n'img/blue.png'\n,\n\n      \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n]\n\n    \n};\n\n\n    \nvar\n \norange_trial\n \n=\n \n{\n\n      \ntype\n:\n \n'image-keyboard-response'\n,\n\n      \nstimulus\n:\n \n'img/orange.png'\n,\n\n      \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n]\n\n    \n}\n\n\n    \ntimeline\n.\npush\n(\nblue_trial\n,\n \norange_trial\n);\n\n\n    \n/* start the experiment */\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \ntimeline\n\n    \n});\n\n  \n</\nscript\n>\n\n  \n</\nhtml\n>\n\n\n\n\n\n\nPart 5: Timeline variables\n\u00b6\n\n\nIn the full experiment, we will want more than two trials. One way we could do this is to create many more objects that define trials and push them all onto the timeline, but there is a more efficient way: using timeline variables.\n\n\nThe parameters for showing the blue and orange circle are very similar. The only difference is which image is displayed. Timeline variables allow us to define the procedure for showing the stimulus once, and then repeatedly use it with different variables. We'll see how, even in this relatively simple case, this can save us a lot of lines of code.\n\n\nTo start, let's make an array that contains all the different trials we want to run in the test phase. There are only two for the experiment: blue trials and orange trials.\n\n\nvar\n \ntest_stimuli\n \n=\n \n[\n\n  \n{\n \nstimulus\n:\n \n\"img/blue.png\"\n},\n\n  \n{\n \nstimulus\n:\n \n\"img/orange.png\"\n}\n\n\n];\n\n\n\n\n\n\nInstead of just showing the blue and orange circles, let's also set up the experiment to show a fixation cross (+) in between trials. We can define a trial to show the fixation cross for a fixed amount of time by using the \ntrial_duration\n parameter of the html-keyboard-response plugin and setting the \nchoices\n parameter to the special value \njsPsych.NO_KEYS\n, which means that no responses will be accepted as a valid response and the trial will last however long the \ntrial_duration\n parameter specifies.\n\n\nvar\n \nfixation\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'<div style=\"font-size:60px;\">+</div>'\n,\n\n  \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n  \ntrial_duration\n:\n \n1000\n,\n\n\n}\n\n\n\n\n\n\nTo show the circles, we'll set up another trial with the html-keyboard-response plugin, but we'll use the function \njsPsych.timelineVariable()\n to indicate that we want jsPsych to substitute the value of the parameter in from the timeline variables.\n\n\nvar\n \ntest\n \n=\n \n{\n\n  \ntype\n:\n \n\"image-keyboard-response\"\n,\n\n  \nstimulus\n:\n \njsPsych\n.\ntimelineVariable\n(\n'stimulus'\n),\n\n  \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n]\n\n\n}\n\n\n\n\n\n\nTo link the variables that we declared in the \ntest_stimuli\n array with the call to \njsPsych.timelineVariable()\n we need to create a new timeline and set the \ntimeline_variables\n property:\n\n\nvar\n \ntest_procedure\n \n=\n \n{\n\n  \ntimeline\n:\n \n[\nfixation\n,\n \ntest\n],\n\n  \ntimeline_variables\n:\n \ntest_stimuli\n\n\n}\n\n\n\n\n\n\nWe have to add the \ntest_procedure\n to the main \ntimeline\n array, but the fixation and test trial do not need to be added to \ntimeline\n because they already exist on the \ntest_procedure\n timeline.\n\n\ntimeline\n.\npush\n(\ntest_procedure\n);\n\n\n\n\n\n\nWhat happens when the experiment reaches the test procedure? jsPsych will run the \ntest_procedure\n timeline one time for each entry in the \ntest_stimuli\n array (twice, in this case). The first time through, jsPsych will substitute the timeline variables from the first array entry (blue image), and the second time through the second array entry will be used (orange image). Notice that the fixation trial occurs before both the orange and the blue circles, because the entire timeline of the \ntest_procedure\n is repeated for each entry in the \ntimeline_variables\n array.\n\n\nThe complete code so far\n\u00b6\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n></\nbody\n>\n\n  \n<\nscript\n>\n\n\n    \n/* create timeline */\n\n    \nvar\n \ntimeline\n \n=\n \n[];\n\n\n    \n/* define welcome message trial */\n\n    \nvar\n \nwelcome\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"Welcome to the experiment. Press any key to begin.\"\n\n    \n};\n\n    \ntimeline\n.\npush\n(\nwelcome\n);\n\n\n    \n/* define instructions trial */\n\n    \nvar\n \ninstructions\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"<p>In this experiment, a circle will appear in the center \"\n \n+\n\n          \n\"of the screen.</p><p>If the circle is <strong>blue</strong>, \"\n \n+\n\n          \n\"press the letter F on the keyboard as fast as you can.</p>\"\n \n+\n\n          \n\"<p>If the circle is <strong>orange</strong>, press the letter J \"\n \n+\n\n          \n\"as fast as you can.</p>\"\n \n+\n\n          \n\"<div style='float: left;'><img src='img/blue.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the F key</strong></p></div>\"\n \n+\n\n          \n\"<div class='float: right;'><img src='img/orange.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the J key</strong></p></div>\"\n \n+\n\n          \n\"<p>Press any key to begin.</p>\"\n,\n\n      \npost_trial_gap\n:\n \n2000\n\n    \n};\n\n    \ntimeline\n.\npush\n(\ninstructions\n);\n\n\n    \n/* test trials */\n\n    \nvar\n \ntest_stimuli\n \n=\n \n[\n\n      \n{\n \nstimulus\n:\n \n\"img/blue.png\"\n},\n\n      \n{\n \nstimulus\n:\n \n\"img/orange.png\"\n}\n\n    \n];\n\n\n    \nvar\n \nfixation\n \n=\n \n{\n\n      \ntype\n:\n \n'html-keyboard-response'\n,\n\n      \nstimulus\n:\n \n'<div style=\"font-size:60px;\">+</div>'\n,\n\n      \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n      \ntrial_duration\n:\n \n1000\n,\n\n    \n}\n\n\n    \nvar\n \ntest\n \n=\n \n{\n\n      \ntype\n:\n \n\"image-keyboard-response\"\n,\n\n      \nstimulus\n:\n \njsPsych\n.\ntimelineVariable\n(\n'stimulus'\n),\n\n      \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n]\n\n    \n}\n\n\n    \nvar\n \ntest_procedure\n \n=\n \n{\n\n      \ntimeline\n:\n \n[\nfixation\n,\n \ntest\n],\n\n      \ntimeline_variables\n:\n \ntest_stimuli\n\n    \n}\n\n\n    \ntimeline\n.\npush\n(\ntest_procedure\n);\n\n\n    \n/* start the experiment */\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \ntimeline\n\n    \n});\n\n  \n</\nscript\n>\n\n  \n</\nhtml\n>\n\n\n\n\n\n\nPart 6: Parameters for timelines with timeline variables\n\u00b6\n\n\nRight now our experiment is a measly two trials long. Even worse is that the order of the stimuli is the same every time! When we use timeline variables, we get access to some very easy-to-use methods to randomize the order and repeat the trials. To randomize the order, simply set \nrandomize_order: true\n on the object with the \ntimeline_variables\n:\n\n\nvar\n \ntest_procedure\n \n=\n \n{\n\n  \ntimeline\n:\n \n[\nfixation\n,\n \ntest\n],\n\n  \ntimeline_variables\n:\n \ntest_stimuli\n,\n\n  \nrandomize_order\n:\n \ntrue\n\n\n}\n\n\n\n\n\n\nWe can also easily make the test phase longer by setting the \nrepetitions\n parameter. This parameter controls how many times the experiment will loop through all of the entries in the timeline_variables array. For example, if we set \nrepetitions: 5\n, then the experiment will loop through the two entries in the timeline_variables 5 times, for a total of 10 test trials.\n\n\nvar\n \ntest_procedure\n \n=\n \n{\n\n  \ntimeline\n:\n \n[\nfixation\n,\n \ntest\n],\n\n  \ntimeline_variables\n:\n \ntest_stimuli\n,\n\n  \nrandomize_order\n:\n \ntrue\n,\n\n  \nrepetitions\n:\n \n5\n\n\n}\n\n\n\n\n\n\nThe complete code so far\n\u00b6\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n></\nbody\n>\n\n  \n<\nscript\n>\n\n\n    \n/* create timeline */\n\n    \nvar\n \ntimeline\n \n=\n \n[];\n\n\n    \n/* define welcome message trial */\n\n    \nvar\n \nwelcome\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"Welcome to the experiment. Press any key to begin.\"\n\n    \n};\n\n    \ntimeline\n.\npush\n(\nwelcome\n);\n\n\n    \n/* define instructions trial */\n\n    \nvar\n \ninstructions\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"<p>In this experiment, a circle will appear in the center \"\n \n+\n\n          \n\"of the screen.</p><p>If the circle is <strong>blue</strong>, \"\n \n+\n\n          \n\"press the letter F on the keyboard as fast as you can.</p>\"\n \n+\n\n          \n\"<p>If the circle is <strong>orange</strong>, press the letter J \"\n \n+\n\n          \n\"as fast as you can.</p>\"\n \n+\n\n          \n\"<div style='float: left;'><img src='img/blue.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the F key</strong></p></div>\"\n \n+\n\n          \n\"<div class='float: right;'><img src='img/orange.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the J key</strong></p></div>\"\n \n+\n\n          \n\"<p>Press any key to begin.</p>\"\n,\n\n      \npost_trial_gap\n:\n \n2000\n\n    \n};\n\n    \ntimeline\n.\npush\n(\ninstructions\n);\n\n\n    \n/* test trials */\n\n    \nvar\n \ntest_stimuli\n \n=\n \n[\n\n      \n{\n \nstimulus\n:\n \n\"img/blue.png\"\n},\n\n      \n{\n \nstimulus\n:\n \n\"img/orange.png\"\n}\n\n    \n];\n\n\n    \nvar\n \nfixation\n \n=\n \n{\n\n      \ntype\n:\n \n'html-keyboard-response'\n,\n\n      \nstimulus\n:\n \n'<div style=\"font-size:60px;\">+</div>'\n,\n\n      \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n      \ntrial_duration\n:\n \n1000\n,\n\n    \n}\n\n\n    \nvar\n \ntest\n \n=\n \n{\n\n      \ntype\n:\n \n\"image-keyboard-response\"\n,\n\n      \nstimulus\n:\n \njsPsych\n.\ntimelineVariable\n(\n'stimulus'\n),\n\n      \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n]\n\n    \n}\n\n\n    \nvar\n \ntest_procedure\n \n=\n \n{\n\n      \ntimeline\n:\n \n[\nfixation\n,\n \ntest\n],\n\n      \ntimeline_variables\n:\n \ntest_stimuli\n,\n\n      \nrandomize_order\n:\n \ntrue\n,\n\n      \nrepetitions\n:\n \n5\n\n    \n}\n\n\n    \ntimeline\n.\npush\n(\ntest_procedure\n);\n\n\n    \n/* start the experiment */\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \ntimeline\n\n    \n});\n\n  \n</\nscript\n>\n\n  \n</\nhtml\n>\n\n\n\n\n\n\nPart 7: Using functions to generate parameters\n\u00b6\n\n\nOne aspect of the experiment that could be improved is the duration of the fixation cross. As the experiment stands right now, the timing of the circles appearing is very predictable. We can change that by using a different value for the \ntrial_duration\n parameter in the \nfixation\n trial for each trial. But how can we do that and keep the simple code structure we have now where we only have to define the fixation trial once? One option would be to add another timeline variable, like \n\"fixation_duration\"\n and use that to control the timing. But another option is to specify the \ntrial_duration\n parameter as a function. If a parameter is a function, jsPsych will execute the function every time the trial runs. That means that if the function returns different results probabilistically, we can get a different parameter value every time the trial runs.\n\n\nTo do that here, we'll use one of the built-in randomization methods in \njsPsych's randomization module\n. \njsPsych.randomization.sampleWithoutReplacement()\n takes an array of items to sample from and generates a new array of length \nN\n by sampling without replacement.\n\n\nvar\n \nfixation\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'<div style=\"font-size:60px;\">+</div>'\n,\n\n  \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n  \ntrial_duration\n:\n \nfunction\n(){\n\n    \nreturn\n \njsPsych\n.\nrandomization\n.\nsampleWithoutReplacement\n([\n250\n,\n \n500\n,\n \n750\n,\n \n1000\n,\n \n1250\n,\n \n1500\n,\n \n1750\n,\n \n2000\n],\n \n1\n)[\n0\n];\n\n  \n}\n\n\n}\n\n\n\n\n\n\nIn the code above, we replaced the \ntrial_duration: 1000\n parameter in \nfixation\n with a function. Inside the function, we take a sample from the array \n[250, 500, 750, 1000, 1250, 1500, 1750, 2000]\n of size 1 (second parameter to \njsPsych.randomization.sampleWithoutReplacement\n). The return value from calling \njsPsych.randomization.sampleWithoutReplacement\n is an array of length 1, so we add the \n[0]\n selection at the end to get the value out of the array.\n\n\nThe complete code so far\n\u00b6\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n></\nbody\n>\n\n  \n<\nscript\n>\n\n\n    \n/* create timeline */\n\n    \nvar\n \ntimeline\n \n=\n \n[];\n\n\n    \n/* define welcome message trial */\n\n    \nvar\n \nwelcome\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"Welcome to the experiment. Press any key to begin.\"\n\n    \n};\n\n    \ntimeline\n.\npush\n(\nwelcome\n);\n\n\n    \n/* define instructions trial */\n\n    \nvar\n \ninstructions\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"<p>In this experiment, a circle will appear in the center \"\n \n+\n\n          \n\"of the screen.</p><p>If the circle is <strong>blue</strong>, \"\n \n+\n\n          \n\"press the letter F on the keyboard as fast as you can.</p>\"\n \n+\n\n          \n\"<p>If the circle is <strong>orange</strong>, press the letter J \"\n \n+\n\n          \n\"as fast as you can.</p>\"\n \n+\n\n          \n\"<div style='float: left;'><img src='img/blue.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the F key</strong></p></div>\"\n \n+\n\n          \n\"<div class='float: right;'><img src='img/orange.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the J key</strong></p></div>\"\n \n+\n\n          \n\"<p>Press any key to begin.</p>\"\n,\n\n      \npost_trial_gap\n:\n \n2000\n\n    \n};\n\n    \ntimeline\n.\npush\n(\ninstructions\n);\n\n\n    \n/* test trials */\n\n    \nvar\n \ntest_stimuli\n \n=\n \n[\n\n      \n{\n \nstimulus\n:\n \n\"img/blue.png\"\n},\n\n      \n{\n \nstimulus\n:\n \n\"img/orange.png\"\n}\n\n    \n];\n\n\n    \nvar\n \nfixation\n \n=\n \n{\n\n      \ntype\n:\n \n'html-keyboard-response'\n,\n\n      \nstimulus\n:\n \n'<div style=\"font-size:60px;\">+</div>'\n,\n\n      \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n      \ntrial_duration\n:\n \nfunction\n(){\n\n        \nreturn\n \njsPsych\n.\nrandomization\n.\nsampleWithoutReplacement\n([\n250\n,\n \n500\n,\n \n750\n,\n \n1000\n,\n \n1250\n,\n \n1500\n,\n \n1750\n,\n \n2000\n],\n \n1\n)[\n0\n];\n\n      \n}\n\n    \n}\n\n\n    \nvar\n \ntest\n \n=\n \n{\n\n      \ntype\n:\n \n\"image-keyboard-response\"\n,\n\n      \nstimulus\n:\n \njsPsych\n.\ntimelineVariable\n(\n'stimulus'\n),\n\n      \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n]\n\n    \n}\n\n\n    \nvar\n \ntest_procedure\n \n=\n \n{\n\n      \ntimeline\n:\n \n[\nfixation\n,\n \ntest\n],\n\n      \ntimeline_variables\n:\n \ntest_stimuli\n,\n\n      \nrandomize_order\n:\n \ntrue\n,\n\n      \nrepetitions\n:\n \n5\n\n    \n}\n\n\n    \ntimeline\n.\npush\n(\ntest_procedure\n);\n\n\n    \n/* start the experiment */\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \ntimeline\n\n    \n});\n\n  \n</\nscript\n>\n\n  \n</\nhtml\n>\n\n\n\n\n\n\nPart 8: Displaying the data\n\u00b6\n\n\nWe have created a complete, if simple, experiment at this point, so let's take a look at the data being generated. jsPsych has a built-in \nfunction called \njsPsych.data.displayData()\n that is useful for debugging your experiment. It will remove all of the information on the screen and replace it with the raw data collected so far. This isn't terribly useful when you are actually running an experiment, but it's nice for checking the data during development.\n\n\nWe need the \ndisplayData\n function to execute when the experiment ends. One way to do this is to use the \non_finish\n callback function\n. This function will automatically execute once all the trials in the experiment are finished. We can specify a function to call in the \ninit\n method.\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \ntimeline\n,\n\n  \non_finish\n:\n \nfunction\n()\n \n{\n\n    \njsPsych\n.\ndata\n.\ndisplayData\n();\n\n  \n}\n\n\n});\n\n\n\n\n\n\nThe complete code so far\n\u00b6\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n></\nbody\n>\n\n  \n<\nscript\n>\n\n\n    \n/* create timeline */\n\n    \nvar\n \ntimeline\n \n=\n \n[];\n\n\n    \n/* define welcome message trial */\n\n    \nvar\n \nwelcome\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"Welcome to the experiment. Press any key to begin.\"\n\n    \n};\n\n    \ntimeline\n.\npush\n(\nwelcome\n);\n\n\n    \n/* define instructions trial */\n\n    \nvar\n \ninstructions\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"<p>In this experiment, a circle will appear in the center \"\n \n+\n\n          \n\"of the screen.</p><p>If the circle is <strong>blue</strong>, \"\n \n+\n\n          \n\"press the letter F on the keyboard as fast as you can.</p>\"\n \n+\n\n          \n\"<p>If the circle is <strong>orange</strong>, press the letter J \"\n \n+\n\n          \n\"as fast as you can.</p>\"\n \n+\n\n          \n\"<div style='float: left;'><img src='img/blue.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the F key</strong></p></div>\"\n \n+\n\n          \n\"<div class='float: right;'><img src='img/orange.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the J key</strong></p></div>\"\n \n+\n\n          \n\"<p>Press any key to begin.</p>\"\n,\n\n      \npost_trial_gap\n:\n \n2000\n\n    \n};\n\n    \ntimeline\n.\npush\n(\ninstructions\n);\n\n\n    \n/* test trials */\n\n    \nvar\n \ntest_stimuli\n \n=\n \n[\n\n      \n{\n \nstimulus\n:\n \n\"img/blue.png\"\n},\n\n      \n{\n \nstimulus\n:\n \n\"img/orange.png\"\n}\n\n    \n];\n\n\n    \nvar\n \nfixation\n \n=\n \n{\n\n      \ntype\n:\n \n'html-keyboard-response'\n,\n\n      \nstimulus\n:\n \n'<div style=\"font-size:60px;\">+</div>'\n,\n\n      \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n      \ntrial_duration\n:\n \nfunction\n(){\n\n        \nreturn\n \njsPsych\n.\nrandomization\n.\nsampleWithoutReplacement\n([\n250\n,\n \n500\n,\n \n750\n,\n \n1000\n,\n \n1250\n,\n \n1500\n,\n \n1750\n,\n \n2000\n],\n \n1\n)[\n0\n];\n\n      \n}\n\n    \n}\n\n\n    \nvar\n \ntest\n \n=\n \n{\n\n      \ntype\n:\n \n\"image-keyboard-response\"\n,\n\n      \nstimulus\n:\n \njsPsych\n.\ntimelineVariable\n(\n'stimulus'\n),\n\n      \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n]\n\n    \n}\n\n\n    \nvar\n \ntest_procedure\n \n=\n \n{\n\n      \ntimeline\n:\n \n[\nfixation\n,\n \ntest\n],\n\n      \ntimeline_variables\n:\n \ntest_stimuli\n,\n\n      \nrandomize_order\n:\n \ntrue\n,\n\n      \nrepetitions\n:\n \n5\n\n    \n}\n\n\n    \ntimeline\n.\npush\n(\ntest_procedure\n);\n\n\n    \n/* start the experiment */\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \ntimeline\n,\n\n      \non_finish\n:\n \nfunction\n()\n \n{\n\n        \njsPsych\n.\ndata\n.\ndisplayData\n();\n\n      \n}\n\n    \n});\n\n  \n</\nscript\n>\n\n  \n</\nhtml\n>\n\n\n\n\n\n\nPart 9: Tagging trials with additional data\n\u00b6\n\n\nAll trials in jsPsych can be tagged with additional arbitrary data. This data will get stored alongside the data that the plugin normally generates, which allows experimenters to record properties of a trial along with the data from the trial.\n\n\nWhen might you use this feature? In this experiment, it would be nice to tag each trial with a circle as a test trial, so that the resulting data can be easily filtered to look at only the test trials. We also could tag the test trials with a property that indicates what the correct response should be (F for the blue circles, J for the orange).\n\n\nIn our current code, we are using the timeline variables feature of jsPsych to choose which circle gets presented on a trial. Since we want to tag the trials differently based on which circle is presented, we need to add the tagging data to the \ntest_stimuli\n array, and then use the \njsPsych.timelineVariable()\n function to get the values and assign them to the \ndata\n property of the trial.\n\n\nWe start by modifying \ntest_stimuli\n:\n\n\nvar\n \ntest_stimuli\n \n=\n \n[\n\n  \n{\n \nstimulus\n:\n \n\"img/blue.png\"\n,\n \ndata\n:\n \n{\ntest_part\n:\n \n'test'\n,\n \ncorrect_response\n:\n \n'f'\n}},\n\n  \n{\n \nstimulus\n:\n \n\"img/orange.png\"\n,\n \ndata\n:\n \n{\ntest_part\n:\n \n'test'\n,\n \ncorrect_response\n \n'j'\n}}\n\n\n];\n\n\n\n\n\n\nNow we assign these values to the \ndata\n parameter of the \ntest\n trial.\n\n\nvar\n \ntest\n \n=\n \n{\n\n  \ntype\n:\n \n\"image-keyboard-response\"\n,\n\n  \nstimulus\n:\n \njsPsych\n.\ntimelineVariable\n(\n'stimulus'\n),\n\n  \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n],\n\n  \ndata\n:\n \njsPsych\n.\ntimelineVariable\n(\n'data'\n)\n\n\n}\n\n\n\n\n\n\nAnother kind of tagging that would be useful is to mark each fixation trial as such, to make removing the data from fixation trials easier. This is a simpler task, as we don't need to use the timeline variables feature. We can just add a \ndata\n property to the \nfixation\n trial:\n\n\nvar\n \nfixation\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'<div style=\"font-size:60px;\">+</div>'\n,\n\n  \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n  \ntrial_duration\n:\n \nfunction\n(){\n\n    \nreturn\n \njsPsych\n.\nrandomization\n.\nsampleWithoutReplacement\n([\n250\n,\n \n500\n,\n \n750\n,\n \n1000\n,\n \n1250\n,\n \n1500\n,\n \n1750\n,\n \n2000\n],\n \n1\n)[\n0\n];\n\n  \n},\n\n  \ndata\n:\n \n{\ntest_part\n:\n \n'fixation'\n}\n\n\n}\n\n\n\n\n\n\nThe complete code so far\n\u00b6\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n></\nbody\n>\n\n  \n<\nscript\n>\n\n\n    \n/* create timeline */\n\n    \nvar\n \ntimeline\n \n=\n \n[];\n\n\n    \n/* define welcome message trial */\n\n    \nvar\n \nwelcome\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"Welcome to the experiment. Press any key to begin.\"\n\n    \n};\n\n    \ntimeline\n.\npush\n(\nwelcome\n);\n\n\n    \n/* define instructions trial */\n\n    \nvar\n \ninstructions\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"<p>In this experiment, a circle will appear in the center \"\n \n+\n\n          \n\"of the screen.</p><p>If the circle is <strong>blue</strong>, \"\n \n+\n\n          \n\"press the letter F on the keyboard as fast as you can.</p>\"\n \n+\n\n          \n\"<p>If the circle is <strong>orange</strong>, press the letter J \"\n \n+\n\n          \n\"as fast as you can.</p>\"\n \n+\n\n          \n\"<div style='float: left;'><img src='img/blue.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the F key</strong></p></div>\"\n \n+\n\n          \n\"<div class='float: right;'><img src='img/orange.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the J key</strong></p></div>\"\n \n+\n\n          \n\"<p>Press any key to begin.</p>\"\n,\n\n      \npost_trial_gap\n:\n \n2000\n\n    \n};\n\n    \ntimeline\n.\npush\n(\ninstructions\n);\n\n\n    \n/* test trials */\n\n    \nvar\n \ntest_stimuli\n \n=\n \n[\n\n      \n{\n \nstimulus\n:\n \n\"img/blue.png\"\n,\n \ndata\n:\n \n{\ntest_part\n:\n \n'test'\n,\n \ncorrect_response\n:\n \n'f'\n}},\n\n      \n{\n \nstimulus\n:\n \n\"img/orange.png\"\n,\n \ndata\n:\n \n{\ntest_part\n:\n \n'test'\n,\n \ncorrect_response\n \n'j'\n}}\n\n    \n];\n\n\n    \nvar\n \nfixation\n \n=\n \n{\n\n      \ntype\n:\n \n'html-keyboard-response'\n,\n\n      \nstimulus\n:\n \n'<div style=\"font-size:60px;\">+</div>'\n,\n\n      \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n      \ntrial_duration\n:\n \nfunction\n(){\n\n        \nreturn\n \njsPsych\n.\nrandomization\n.\nsampleWithoutReplacement\n([\n250\n,\n \n500\n,\n \n750\n,\n \n1000\n,\n \n1250\n,\n \n1500\n,\n \n1750\n,\n \n2000\n],\n \n1\n)[\n0\n];\n\n      \n},\n\n      \ndata\n:\n \n{\ntest_part\n:\n \n'fixation'\n}\n\n    \n}\n\n\n    \nvar\n \ntest\n \n=\n \n{\n\n      \ntype\n:\n \n\"image-keyboard-response\"\n,\n\n      \nstimulus\n:\n \njsPsych\n.\ntimelineVariable\n(\n'stimulus'\n),\n\n      \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n],\n\n      \ndata\n:\n \njsPsych\n.\ntimelineVariable\n(\n'data'\n)\n\n    \n}\n\n\n    \nvar\n \ntest_procedure\n \n=\n \n{\n\n      \ntimeline\n:\n \n[\nfixation\n,\n \ntest\n],\n\n      \ntimeline_variables\n:\n \ntest_stimuli\n,\n\n      \nrandomize_order\n:\n \ntrue\n,\n\n      \nrepetitions\n:\n \n5\n\n    \n}\n\n\n    \ntimeline\n.\npush\n(\ntest_procedure\n);\n\n\n    \n/* start the experiment */\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \ntimeline\n,\n\n      \non_finish\n:\n \nfunction\n()\n \n{\n\n        \njsPsych\n.\ndata\n.\ndisplayData\n();\n\n      \n}\n\n    \n});\n\n  \n</\nscript\n>\n\n  \n</\nhtml\n>\n\n\n\n\n\n\nPart 10: Manipulating data during the experiment\n\u00b6\n\n\nNow that the data from the test trials has a tag that describes the correct response, it would be easy to analyze the data after the fact (in R, for example) and calculate whether the participant responded correctly.\n\n\nBut, we can also do this in jsPsych as the experiment runs to save time later and enable a limited set of data aggregation and analysis directly in the experiment code.\n\n\nTo do this, we'll use the \non_finish\n event of the test trial. We can assign a function to \non_finish\n, and that function will receive an object containing the data generated by the trial. This object can be manipulated inside the function, and any changes made to the object will be stored in jsPsych's internal representation of the data.\n\n\nFor this example, we'll calculate whether the subject responded correctly, and add a new \ncorrect\n property to the data object.\n\n\nvar\n \ntest\n \n=\n \n{\n\n  \ntype\n:\n \n\"image-keyboard-response\"\n,\n\n  \nstimulus\n:\n \njsPsych\n.\ntimelineVariable\n(\n'stimulus'\n),\n\n  \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n],\n\n  \ndata\n:\n \njsPsych\n.\ntimelineVariable\n(\n'data'\n),\n\n  \non_finish\n:\n \nfunction\n(\ndata\n){\n\n    \ndata\n.\ncorrect\n \n=\n \ndata\n.\nkey_press\n \n==\n \njsPsych\n.\npluginAPI\n.\nconvertKeyCharacterToKeyCode\n(\ndata\n.\ncorrect_response\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\nThe \ndata.key_press\n value is a numeric key code indicating which key the subject pressed. The function \njsPsych.pluginAPI.convertKeyCharacterToKeyCode\n converts the character representation of a key into the numeric representation (e.g., calling the function on the value \n'f'\n generates the value \n70\n). If this numeric value matches \ndata.key_press\n then \ndata.correct\n will be \ntrue\n. Otherwise, it will be \nfalse\n.\n\n\nThe complete code so far\n\u00b6\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/jspsych.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nlink\n \nhref\n=\n\"jspsych-6.0.1/css/jspsych.css\"\n \nrel\n=\n\"stylesheet\"\n \ntype\n=\n\"text/css\"\n></\nlink\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n></\nbody\n>\n\n  \n<\nscript\n>\n\n\n    \n/* create timeline */\n\n    \nvar\n \ntimeline\n \n=\n \n[];\n\n\n    \n/* define welcome message trial */\n\n    \nvar\n \nwelcome\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"Welcome to the experiment. Press any key to begin.\"\n\n    \n};\n\n    \ntimeline\n.\npush\n(\nwelcome\n);\n\n\n    \n/* define instructions trial */\n\n    \nvar\n \ninstructions\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"<p>In this experiment, a circle will appear in the center \"\n \n+\n\n          \n\"of the screen.</p><p>If the circle is <strong>blue</strong>, \"\n \n+\n\n          \n\"press the letter F on the keyboard as fast as you can.</p>\"\n \n+\n\n          \n\"<p>If the circle is <strong>orange</strong>, press the letter J \"\n \n+\n\n          \n\"as fast as you can.</p>\"\n \n+\n\n          \n\"<div style='float: left;'><img src='img/blue.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the F key</strong></p></div>\"\n \n+\n\n          \n\"<div class='float: right;'><img src='img/orange.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the J key</strong></p></div>\"\n \n+\n\n          \n\"<p>Press any key to begin.</p>\"\n,\n\n      \npost_trial_gap\n:\n \n2000\n\n    \n};\n\n    \ntimeline\n.\npush\n(\ninstructions\n);\n\n\n    \n/* test trials */\n\n    \nvar\n \ntest_stimuli\n \n=\n \n[\n\n      \n{\n \nstimulus\n:\n \n\"img/blue.png\"\n,\n \ndata\n:\n \n{\ntest_part\n:\n \n'test'\n,\n \ncorrect_response\n:\n \n'f'\n}},\n\n      \n{\n \nstimulus\n:\n \n\"img/orange.png\"\n,\n \ndata\n:\n \n{\ntest_part\n:\n \n'test'\n,\n \ncorrect_response\n \n'j'\n}}\n\n    \n];\n\n\n    \nvar\n \nfixation\n \n=\n \n{\n\n      \ntype\n:\n \n'html-keyboard-response'\n,\n\n      \nstimulus\n:\n \n'<div style=\"font-size:60px;\">+</div>'\n,\n\n      \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n      \ntrial_duration\n:\n \nfunction\n(){\n\n        \nreturn\n \njsPsych\n.\nrandomization\n.\nsampleWithoutReplacement\n([\n250\n,\n \n500\n,\n \n750\n,\n \n1000\n,\n \n1250\n,\n \n1500\n,\n \n1750\n,\n \n2000\n],\n \n1\n)[\n0\n];\n\n      \n},\n\n      \ndata\n:\n \n{\ntest_part\n:\n \n'fixation'\n}\n\n    \n}\n\n\n    \nvar\n \ntest\n \n=\n \n{\n\n      \ntype\n:\n \n\"image-keyboard-response\"\n,\n\n      \nstimulus\n:\n \njsPsych\n.\ntimelineVariable\n(\n'stimulus'\n),\n\n      \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n],\n\n      \ndata\n:\n \njsPsych\n.\ntimelineVariable\n(\n'data'\n),\n\n      \non_finish\n:\n \nfunction\n(\ndata\n){\n\n        \ndata\n.\ncorrect\n \n=\n \ndata\n.\nkey_press\n \n==\n \njsPsych\n.\npluginAPI\n.\nconvertKeyCharacterToKeyCode\n(\ndata\n.\ncorrect_response\n);\n\n      \n}\n\n    \n}\n\n\n    \nvar\n \ntest_procedure\n \n=\n \n{\n\n      \ntimeline\n:\n \n[\nfixation\n,\n \ntest\n],\n\n      \ntimeline_variables\n:\n \ntest_stimuli\n,\n\n      \nrandomize_order\n:\n \ntrue\n,\n\n      \nrepetitions\n:\n \n5\n\n    \n}\n\n\n    \ntimeline\n.\npush\n(\ntest_procedure\n);\n\n\n    \n/* start the experiment */\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \ntimeline\n,\n\n      \non_finish\n:\n \nfunction\n()\n \n{\n\n        \njsPsych\n.\ndata\n.\ndisplayData\n();\n\n      \n}\n\n    \n});\n\n  \n</\nscript\n>\n\n  \n</\nhtml\n>\n\n\n\n\n\n\nPart 11: Data aggregation\n\u00b6\n\n\nA new feature in jsPsych version 6.0 is a suite of data aggregation functions. You can now easily calculate things like mean response times for a selected set of trials. In this part, we'll use these functions to add a final trial to the experiment that tells the subject their accuracy and their mean response time for correct responses.\n\n\nWe'll use the text plugin. Because the actual text that we want to display changes based on the subject's performance in the experiment, we need to use a function for the \ntext\n parameter and return the desired text.\n\n\nvar\n \ndebrief_block\n \n=\n \n{\n\n  \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n  \nstimulus\n:\n \nfunction\n()\n \n{\n\n\n    \nvar\n \ntrials\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\ntest_part\n:\n \n'test'\n});\n\n    \nvar\n \ncorrect_trials\n \n=\n \ntrials\n.\nfilter\n({\ncorrect\n:\n \ntrue\n});\n\n    \nvar\n \naccuracy\n \n=\n \nMath\n.\nround\n(\ncorrect_trials\n.\ncount\n()\n \n/\n \ntrials\n.\ncount\n()\n \n*\n \n100\n);\n\n    \nvar\n \nrt\n \n=\n \nMath\n.\nround\n(\ncorrect_trials\n.\nselect\n(\n'rt'\n).\nmean\n());\n\n\n    \nreturn\n \n\"<p>You responded correctly on \"\n+\naccuracy\n+\n\"% of the trials.</p>\"\n+\n\n    \n\"<p>Your average response time was \"\n+\nrt\n+\n\"ms.</p>\"\n+\n\n    \n\"<p>Press any key to complete the experiment. Thank you!</p>\"\n;\n\n\n  \n}\n\n\n};\n\n\n\ntimeline\n.\npush\n(\ndebrief_block\n);\n\n\n\n\n\n\nTo create the variable \ntrials\n, we use \njsPsych.data.get()\n which returns a jsPsych data collection containing all of the data from the experiment. We can then use \n.filter\n to select only the trials where \ntest_part\n is \n'test'\n (a benefit of tagging the trials in part 9). \ntrials\n contains all of the data from the trials where a circle was shown.\n\n\nTo get only the correct trials, we can use \n.filter()\n again to select only the trials from the \ntrials\n data collection where the property \ncorrect\n is \ntrue\n.\n\n\nTo calculate accuracy, we can use the \n.count()\n method to determine how many trials were correct and how many trials there were total. We also use \nMath.round()\n to avoid extra digits after the decimal.\n\n\nFinally, to calculate the mean response time on correct trials, we use the \n.select\n method on the \ncorrect_trials\n data collection to select only the \n'rt'\n property of those trials. We can then use the \n.mean()\n method to find the mean of all the RT values.\n\n\nThe final code\n\u00b6\n\n\nThis code is available in the examples folder in the jsPsych download. It is called \ndemo-simple-rt-task.html\n.\n\n\n<!DOCTYPE html>\n\n\n<\nhtml\n>\n\n  \n<\nhead\n>\n\n    \n<\ntitle\n>\nMy experiment\n</\ntitle\n>\n\n    \n<\nscript\n \nsrc\n=\n\"../jspsych.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"../plugins/jspsych-html-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nscript\n \nsrc\n=\n\"../plugins/jspsych-image-keyboard-response.js\"\n></\nscript\n>\n\n    \n<\nlink\n \nrel\n=\n\"stylesheet\"\n \nhref\n=\n\"../css/jspsych.css\"\n></\nlink\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n></\nbody\n>\n\n  \n<\nscript\n>\n\n\n    \n/* create timeline */\n\n    \nvar\n \ntimeline\n \n=\n \n[];\n\n\n    \n/* define welcome message trial */\n\n    \nvar\n \nwelcome\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"Welcome to the experiment. Press any key to begin.\"\n\n    \n};\n\n    \ntimeline\n.\npush\n(\nwelcome\n);\n\n\n    \n/* define instructions trial */\n\n    \nvar\n \ninstructions\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \n\"<p>In this experiment, a circle will appear in the center \"\n \n+\n\n          \n\"of the screen.</p><p>If the circle is <strong>blue</strong>, \"\n \n+\n\n          \n\"press the letter F on the keyboard as fast as you can.</p>\"\n \n+\n\n          \n\"<p>If the circle is <strong>orange</strong>, press the letter J \"\n \n+\n\n          \n\"as fast as you can.</p>\"\n \n+\n\n          \n\"<div style='float: left;'><img src='img/blue.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the F key</strong></p></div>\"\n \n+\n\n          \n\"<div class='float: right;'><img src='img/orange.png'></img>\"\n \n+\n\n          \n\"<p class='small'><strong>Press the J key</strong></p></div>\"\n \n+\n\n          \n\"<p>Press any key to begin.</p>\"\n,\n\n      \npost_trial_gap\n:\n \n2000\n\n    \n};\n\n    \ntimeline\n.\npush\n(\ninstructions\n);\n\n\n    \n/* test trials */\n\n\n    \nvar\n \ntest_stimuli\n \n=\n \n[\n\n      \n{\n \nstimulus\n:\n \n\"img/blue.png\"\n,\n \ndata\n:\n \n{\n \ntest_part\n:\n \n'test'\n,\n \ncorrect_response\n:\n \n'f'\n \n}\n \n},\n\n      \n{\n \nstimulus\n:\n \n\"img/orange.png\"\n,\n \ndata\n:\n \n{\n \ntest_part\n:\n \n'test'\n,\n \ncorrect_response\n:\n \n'j'\n \n}\n \n}\n\n    \n];\n\n\n    \nvar\n \nfixation\n \n=\n \n{\n\n      \ntype\n:\n \n'html-keyboard-response'\n,\n\n      \nstimulus\n:\n \n'<div style=\"font-size:60px;\">+</div>'\n,\n\n      \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n      \ntrial_duration\n:\n \nfunction\n(){\n\n        \nreturn\n \njsPsych\n.\nrandomization\n.\nsampleWithoutReplacement\n([\n250\n,\n \n500\n,\n \n750\n,\n \n1000\n,\n \n1250\n,\n \n1500\n,\n \n1750\n,\n \n2000\n],\n \n1\n)[\n0\n];\n\n      \n},\n\n      \ndata\n:\n \n{\ntest_part\n:\n \n'fixation'\n}\n\n    \n}\n\n\n    \nvar\n \ntest\n \n=\n \n{\n\n      \ntype\n:\n \n\"image-keyboard-response\"\n,\n\n      \nstimulus\n:\n \njsPsych\n.\ntimelineVariable\n(\n'stimulus'\n),\n\n      \nchoices\n:\n \n[\n'f'\n,\n \n'j'\n],\n\n      \ndata\n:\n \njsPsych\n.\ntimelineVariable\n(\n'data'\n),\n\n      \non_finish\n:\n \nfunction\n(\ndata\n){\n\n        \ndata\n.\ncorrect\n \n=\n \ndata\n.\nkey_press\n \n==\n \njsPsych\n.\npluginAPI\n.\nconvertKeyCharacterToKeyCode\n(\ndata\n.\ncorrect_response\n);\n\n      \n},\n\n    \n}\n\n\n    \nvar\n \ntest_procedure\n \n=\n \n{\n\n      \ntimeline\n:\n \n[\nfixation\n,\n \ntest\n],\n\n      \ntimeline_variables\n:\n \ntest_stimuli\n,\n\n      \nrepetitions\n:\n \n5\n,\n\n      \nrandomize_order\n:\n \ntrue\n\n    \n}\n\n    \ntimeline\n.\npush\n(\ntest_procedure\n);\n\n\n    \n/* define debrief */\n\n\n    \nvar\n \ndebrief_block\n \n=\n \n{\n\n      \ntype\n:\n \n\"html-keyboard-response\"\n,\n\n      \nstimulus\n:\n \nfunction\n()\n \n{\n\n\n        \nvar\n \ntrials\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\ntest_part\n:\n \n'test'\n});\n\n        \nvar\n \ncorrect_trials\n \n=\n \ntrials\n.\nfilter\n({\ncorrect\n:\n \ntrue\n});\n\n        \nvar\n \naccuracy\n \n=\n \nMath\n.\nround\n(\ncorrect_trials\n.\ncount\n()\n \n/\n \ntrials\n.\ncount\n()\n \n*\n \n100\n);\n\n        \nvar\n \nrt\n \n=\n \nMath\n.\nround\n(\ncorrect_trials\n.\nselect\n(\n'rt'\n).\nmean\n());\n\n\n        \nreturn\n \n\"<p>You responded correctly on \"\n+\naccuracy\n+\n\"% of the trials.</p>\"\n+\n\n        \n\"<p>Your average response time was \"\n+\nrt\n+\n\"ms.</p>\"\n+\n\n        \n\"<p>Press any key to complete the experiment. Thank you!</p>\"\n;\n\n\n      \n}\n\n    \n};\n\n    \ntimeline\n.\npush\n(\ndebrief_block\n);\n\n\n    \n/* start the experiment */\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \ntimeline\n,\n\n      \non_finish\n:\n \nfunction\n()\n \n{\n\n        \njsPsych\n.\ndata\n.\ndisplayData\n();\n\n      \n}\n\n    \n});\n\n  \n</\nscript\n>\n\n\n</\nhtml\n>",
            "title": "Demo Experiment: Simple Reaction Time Task"
        },
        {
            "location": "/tutorials/rt-task/#summary-of-tutorial-content",
            "text": "This tutorial will work through the creation of a simple response time task. The task is to press one key for a blue colored circle and another key for an orange colored circle. Despite this simple task, the tutorial covers many of the key features of jsPsych, including:   Using a plugin to create a standard trial.  Combining plugins together to create new kinds of trials.  Using timeline variables to maximize code reuse.  Randomizing presentation order.  Manipulating, filtering, and aggregating data.  Using dynamic content to change the experiment parameters based on the subject's responses.",
            "title": "Summary of Tutorial Content"
        },
        {
            "location": "/tutorials/rt-task/#part-1-creating-a-blank-experiment",
            "text": "Start by downloading jsPsych and setting up a folder to contain your experiment files. If you are unsure how to do this, follow steps 1-5 in the  Hello World tutorial . At the end of step 5 in the Hello World tutorial, you should have an experiment page that looks like this:  <!DOCTYPE html>  < html > \n   < head > \n     < title > My experiment </ title > \n     < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n     < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n   </ head > \n   < body ></ body >  </ html >   This will be our starting point for building the rest of the experiment.",
            "title": "Part 1: Creating a blank experiment"
        },
        {
            "location": "/tutorials/rt-task/#part-2-display-welcome-message",
            "text": "All jsPsych experiments are defined by a timeline. The timeline is an array that contains the set of trials we want to run in the experiment. We can start by defining the timeline array.  var   timeline   =   [];   Let's greet the subject with a simple welcome message using the  jspsych-html-keyboard-response  plugin.  First, we create a trial that uses the jspsych-html-keyboard-response plugin and contains a simple string to show the subject.  var   welcome   =   { \n   type :   \"html-keyboard-response\" , \n   stimulus :   \"Welcome to the experiment. Press any key to begin.\"  };   Next, we push the welcome trial to the timeline, which adds it to the end of the array.  timeline . push ( welcome );   Finally, we tell jsPsych to run the experiment by calling the  jsPsych.init() function  and passing in the array that defines the experiment timeline.  jsPsych . init ({ \n   timeline :   timeline  });",
            "title": "Part 2: Display welcome message"
        },
        {
            "location": "/tutorials/rt-task/#the-complete-code-so-far",
            "text": "<!DOCTYPE html>  < html > \n   < head > \n     < title > My experiment </ title > \n     < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n     < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n   </ head > \n   < body ></ body > \n   < script > \n\n     /* create timeline */ \n     var   timeline   =   []; \n\n     /* define welcome message trial */ \n     var   welcome   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"Welcome to the experiment. Press any key to begin.\" \n     }; \n     timeline . push ( welcome ); \n\n     /* start the experiment */ \n     jsPsych . init ({ \n       timeline :   timeline \n     }); \n   </ script >  </ html >",
            "title": "The complete code so far"
        },
        {
            "location": "/tutorials/rt-task/#part-3-show-instructions",
            "text": "We can use the same basic structure from part 2 to create a new trial that shows instructions to the subject. The only difference in this trial is that we will use HTML formatting to control how the instructions display.  The trial definition looks like this:  var   instructions_block   =   { \n   type :   \"html-keyboard-response\" , \n   stimulus :   \"<p>In this experiment, a circle will appear in the center \"   + \n       \"of the screen.</p><p>If the circle is <strong>blue</strong>, \"   + \n       \"press the letter F on the keyboard as fast as you can.</p>\"   + \n       \"<p>If the circle is <strong>orange</strong>, press the letter J \"   + \n       \"as fast as you can.</p>\"   + \n       \"<div style='float: left;'><img src='img/blue.png'></img>\"   + \n       \"<p class='small'><strong>Press the F key</strong></p></div>\"   + \n       \"<div class='float: right;'><img src='img/orange.png'></img>\"   + \n       \"<p class='small'><strong>Press the J key</strong></p></div>\"   + \n       \"<p>Press any key to begin.</p>\"  };   Notice that the HTML includes  <img>  tags to display the images that the subject will be responding to. You'll need to download these image files. Right-click on each image below and select  Save image as... . Put the images in a folder called  img  in the experiment folder you created in part 1.    Don't forget to add the trial to the timeline:  timeline . push ( instructions );",
            "title": "Part 3: Show instructions"
        },
        {
            "location": "/tutorials/rt-task/#the-complete-code-so-far_1",
            "text": "<!DOCTYPE html>  < html > \n   < head > \n     < title > My experiment </ title > \n     < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n     < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n   </ head > \n   < body ></ body > \n   < script > \n\n     /* create timeline */ \n     var   timeline   =   []; \n\n     /* define welcome message trial */ \n     var   welcome   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"Welcome to the experiment. Press any key to begin.\" \n     }; \n     timeline . push ( welcome ); \n\n     /* define instructions trial */ \n     var   instructions   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"<p>In this experiment, a circle will appear in the center \"   + \n           \"of the screen.</p><p>If the circle is <strong>blue</strong>, \"   + \n           \"press the letter F on the keyboard as fast as you can.</p>\"   + \n           \"<p>If the circle is <strong>orange</strong>, press the letter J \"   + \n           \"as fast as you can.</p>\"   + \n           \"<div style='float: left;'><img src='img/blue.png'></img>\"   + \n           \"<p class='small'><strong>Press the F key</strong></p></div>\"   + \n           \"<div class='float: right;'><img src='img/orange.png'></img>\"   + \n           \"<p class='small'><strong>Press the J key</strong></p></div>\"   + \n           \"<p>Press any key to begin.</p>\" , \n       post_trial_gap :   2000 \n     }; \n     timeline . push ( instructions ); \n\n     /* start the experiment */ \n     jsPsych . init ({ \n       timeline :   timeline \n     }); \n   </ script >  </ html >",
            "title": "The complete code so far"
        },
        {
            "location": "/tutorials/rt-task/#part-4-displaying-stimuli-and-getting-responses",
            "text": "Creating trials to show the stimuli is conceptually the same as creating a trial to show instructions, except that now we are displaying an image instead of text or html. This means we need to use a different plugin: jspsych-image-keyboard-response. We need to start by loading this plugin by adding a  <script>  tag to the document.  < head > \n   < title > My experiment </ title > \n   < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n   < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n   < script   src = \"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\" ></ script > \n   < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link >  </ head >   For now, we will just show each image once. The path to the image file should be set as the  stimulus  parameter. We will also set the option for which keys the subject is allowed to use to respond ( choices ) so that only the 'f' and 'j' keys are valid responses.  var   blue_trial   =   { \n   type :   'image-keyboard-response' , \n   stimulus :   'img/blue.png' , \n   choices :   [ 'f' ,   'j' ]  };  var   orange_trial   =   { \n   type :   'image-keyboard-response' , \n   stimulus :   'img/orange.png' , \n   choices :   [ 'f' ,   'j' ]  }   As usual, we need to add the trials to the timeline.  timeline . push ( blue_trial ,   orange_trial );",
            "title": "Part 4: Displaying stimuli and getting responses"
        },
        {
            "location": "/tutorials/rt-task/#the-complete-code-so-far_2",
            "text": "<!DOCTYPE html>  < html > \n   < head > \n     < title > My experiment </ title > \n     < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\" ></ script > \n     < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n   </ head > \n   < body ></ body > \n   < script > \n\n     /* create timeline */ \n     var   timeline   =   []; \n\n     /* define welcome message trial */ \n     var   welcome   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"Welcome to the experiment. Press any key to begin.\" \n     }; \n     timeline . push ( welcome ); \n\n     /* define instructions trial */ \n     var   instructions   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"<p>In this experiment, a circle will appear in the center \"   + \n           \"of the screen.</p><p>If the circle is <strong>blue</strong>, \"   + \n           \"press the letter F on the keyboard as fast as you can.</p>\"   + \n           \"<p>If the circle is <strong>orange</strong>, press the letter J \"   + \n           \"as fast as you can.</p>\"   + \n           \"<div style='float: left;'><img src='img/blue.png'></img>\"   + \n           \"<p class='small'><strong>Press the F key</strong></p></div>\"   + \n           \"<div class='float: right;'><img src='img/orange.png'></img>\"   + \n           \"<p class='small'><strong>Press the J key</strong></p></div>\"   + \n           \"<p>Press any key to begin.</p>\" , \n       post_trial_gap :   2000 \n     }; \n     timeline . push ( instructions ); \n\n     /* test trials */ \n     var   blue_trial   =   { \n       type :   'image-keyboard-response' , \n       stimulus :   'img/blue.png' , \n       choices :   [ 'f' ,   'j' ] \n     }; \n\n     var   orange_trial   =   { \n       type :   'image-keyboard-response' , \n       stimulus :   'img/orange.png' , \n       choices :   [ 'f' ,   'j' ] \n     } \n\n     timeline . push ( blue_trial ,   orange_trial ); \n\n     /* start the experiment */ \n     jsPsych . init ({ \n       timeline :   timeline \n     }); \n   </ script > \n   </ html >",
            "title": "The complete code so far"
        },
        {
            "location": "/tutorials/rt-task/#part-5-timeline-variables",
            "text": "In the full experiment, we will want more than two trials. One way we could do this is to create many more objects that define trials and push them all onto the timeline, but there is a more efficient way: using timeline variables.  The parameters for showing the blue and orange circle are very similar. The only difference is which image is displayed. Timeline variables allow us to define the procedure for showing the stimulus once, and then repeatedly use it with different variables. We'll see how, even in this relatively simple case, this can save us a lot of lines of code.  To start, let's make an array that contains all the different trials we want to run in the test phase. There are only two for the experiment: blue trials and orange trials.  var   test_stimuli   =   [ \n   {   stimulus :   \"img/blue.png\" }, \n   {   stimulus :   \"img/orange.png\" }  ];   Instead of just showing the blue and orange circles, let's also set up the experiment to show a fixation cross (+) in between trials. We can define a trial to show the fixation cross for a fixed amount of time by using the  trial_duration  parameter of the html-keyboard-response plugin and setting the  choices  parameter to the special value  jsPsych.NO_KEYS , which means that no responses will be accepted as a valid response and the trial will last however long the  trial_duration  parameter specifies.  var   fixation   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   '<div style=\"font-size:60px;\">+</div>' , \n   choices :   jsPsych . NO_KEYS , \n   trial_duration :   1000 ,  }   To show the circles, we'll set up another trial with the html-keyboard-response plugin, but we'll use the function  jsPsych.timelineVariable()  to indicate that we want jsPsych to substitute the value of the parameter in from the timeline variables.  var   test   =   { \n   type :   \"image-keyboard-response\" , \n   stimulus :   jsPsych . timelineVariable ( 'stimulus' ), \n   choices :   [ 'f' ,   'j' ]  }   To link the variables that we declared in the  test_stimuli  array with the call to  jsPsych.timelineVariable()  we need to create a new timeline and set the  timeline_variables  property:  var   test_procedure   =   { \n   timeline :   [ fixation ,   test ], \n   timeline_variables :   test_stimuli  }   We have to add the  test_procedure  to the main  timeline  array, but the fixation and test trial do not need to be added to  timeline  because they already exist on the  test_procedure  timeline.  timeline . push ( test_procedure );   What happens when the experiment reaches the test procedure? jsPsych will run the  test_procedure  timeline one time for each entry in the  test_stimuli  array (twice, in this case). The first time through, jsPsych will substitute the timeline variables from the first array entry (blue image), and the second time through the second array entry will be used (orange image). Notice that the fixation trial occurs before both the orange and the blue circles, because the entire timeline of the  test_procedure  is repeated for each entry in the  timeline_variables  array.",
            "title": "Part 5: Timeline variables"
        },
        {
            "location": "/tutorials/rt-task/#the-complete-code-so-far_3",
            "text": "<!DOCTYPE html>  < html > \n   < head > \n     < title > My experiment </ title > \n     < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\" ></ script > \n     < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n   </ head > \n   < body ></ body > \n   < script > \n\n     /* create timeline */ \n     var   timeline   =   []; \n\n     /* define welcome message trial */ \n     var   welcome   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"Welcome to the experiment. Press any key to begin.\" \n     }; \n     timeline . push ( welcome ); \n\n     /* define instructions trial */ \n     var   instructions   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"<p>In this experiment, a circle will appear in the center \"   + \n           \"of the screen.</p><p>If the circle is <strong>blue</strong>, \"   + \n           \"press the letter F on the keyboard as fast as you can.</p>\"   + \n           \"<p>If the circle is <strong>orange</strong>, press the letter J \"   + \n           \"as fast as you can.</p>\"   + \n           \"<div style='float: left;'><img src='img/blue.png'></img>\"   + \n           \"<p class='small'><strong>Press the F key</strong></p></div>\"   + \n           \"<div class='float: right;'><img src='img/orange.png'></img>\"   + \n           \"<p class='small'><strong>Press the J key</strong></p></div>\"   + \n           \"<p>Press any key to begin.</p>\" , \n       post_trial_gap :   2000 \n     }; \n     timeline . push ( instructions ); \n\n     /* test trials */ \n     var   test_stimuli   =   [ \n       {   stimulus :   \"img/blue.png\" }, \n       {   stimulus :   \"img/orange.png\" } \n     ]; \n\n     var   fixation   =   { \n       type :   'html-keyboard-response' , \n       stimulus :   '<div style=\"font-size:60px;\">+</div>' , \n       choices :   jsPsych . NO_KEYS , \n       trial_duration :   1000 , \n     } \n\n     var   test   =   { \n       type :   \"image-keyboard-response\" , \n       stimulus :   jsPsych . timelineVariable ( 'stimulus' ), \n       choices :   [ 'f' ,   'j' ] \n     } \n\n     var   test_procedure   =   { \n       timeline :   [ fixation ,   test ], \n       timeline_variables :   test_stimuli \n     } \n\n     timeline . push ( test_procedure ); \n\n     /* start the experiment */ \n     jsPsych . init ({ \n       timeline :   timeline \n     }); \n   </ script > \n   </ html >",
            "title": "The complete code so far"
        },
        {
            "location": "/tutorials/rt-task/#part-6-parameters-for-timelines-with-timeline-variables",
            "text": "Right now our experiment is a measly two trials long. Even worse is that the order of the stimuli is the same every time! When we use timeline variables, we get access to some very easy-to-use methods to randomize the order and repeat the trials. To randomize the order, simply set  randomize_order: true  on the object with the  timeline_variables :  var   test_procedure   =   { \n   timeline :   [ fixation ,   test ], \n   timeline_variables :   test_stimuli , \n   randomize_order :   true  }   We can also easily make the test phase longer by setting the  repetitions  parameter. This parameter controls how many times the experiment will loop through all of the entries in the timeline_variables array. For example, if we set  repetitions: 5 , then the experiment will loop through the two entries in the timeline_variables 5 times, for a total of 10 test trials.  var   test_procedure   =   { \n   timeline :   [ fixation ,   test ], \n   timeline_variables :   test_stimuli , \n   randomize_order :   true , \n   repetitions :   5  }",
            "title": "Part 6: Parameters for timelines with timeline variables"
        },
        {
            "location": "/tutorials/rt-task/#the-complete-code-so-far_4",
            "text": "<!DOCTYPE html>  < html > \n   < head > \n     < title > My experiment </ title > \n     < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\" ></ script > \n     < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n   </ head > \n   < body ></ body > \n   < script > \n\n     /* create timeline */ \n     var   timeline   =   []; \n\n     /* define welcome message trial */ \n     var   welcome   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"Welcome to the experiment. Press any key to begin.\" \n     }; \n     timeline . push ( welcome ); \n\n     /* define instructions trial */ \n     var   instructions   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"<p>In this experiment, a circle will appear in the center \"   + \n           \"of the screen.</p><p>If the circle is <strong>blue</strong>, \"   + \n           \"press the letter F on the keyboard as fast as you can.</p>\"   + \n           \"<p>If the circle is <strong>orange</strong>, press the letter J \"   + \n           \"as fast as you can.</p>\"   + \n           \"<div style='float: left;'><img src='img/blue.png'></img>\"   + \n           \"<p class='small'><strong>Press the F key</strong></p></div>\"   + \n           \"<div class='float: right;'><img src='img/orange.png'></img>\"   + \n           \"<p class='small'><strong>Press the J key</strong></p></div>\"   + \n           \"<p>Press any key to begin.</p>\" , \n       post_trial_gap :   2000 \n     }; \n     timeline . push ( instructions ); \n\n     /* test trials */ \n     var   test_stimuli   =   [ \n       {   stimulus :   \"img/blue.png\" }, \n       {   stimulus :   \"img/orange.png\" } \n     ]; \n\n     var   fixation   =   { \n       type :   'html-keyboard-response' , \n       stimulus :   '<div style=\"font-size:60px;\">+</div>' , \n       choices :   jsPsych . NO_KEYS , \n       trial_duration :   1000 , \n     } \n\n     var   test   =   { \n       type :   \"image-keyboard-response\" , \n       stimulus :   jsPsych . timelineVariable ( 'stimulus' ), \n       choices :   [ 'f' ,   'j' ] \n     } \n\n     var   test_procedure   =   { \n       timeline :   [ fixation ,   test ], \n       timeline_variables :   test_stimuli , \n       randomize_order :   true , \n       repetitions :   5 \n     } \n\n     timeline . push ( test_procedure ); \n\n     /* start the experiment */ \n     jsPsych . init ({ \n       timeline :   timeline \n     }); \n   </ script > \n   </ html >",
            "title": "The complete code so far"
        },
        {
            "location": "/tutorials/rt-task/#part-7-using-functions-to-generate-parameters",
            "text": "One aspect of the experiment that could be improved is the duration of the fixation cross. As the experiment stands right now, the timing of the circles appearing is very predictable. We can change that by using a different value for the  trial_duration  parameter in the  fixation  trial for each trial. But how can we do that and keep the simple code structure we have now where we only have to define the fixation trial once? One option would be to add another timeline variable, like  \"fixation_duration\"  and use that to control the timing. But another option is to specify the  trial_duration  parameter as a function. If a parameter is a function, jsPsych will execute the function every time the trial runs. That means that if the function returns different results probabilistically, we can get a different parameter value every time the trial runs.  To do that here, we'll use one of the built-in randomization methods in  jsPsych's randomization module .  jsPsych.randomization.sampleWithoutReplacement()  takes an array of items to sample from and generates a new array of length  N  by sampling without replacement.  var   fixation   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   '<div style=\"font-size:60px;\">+</div>' , \n   choices :   jsPsych . NO_KEYS , \n   trial_duration :   function (){ \n     return   jsPsych . randomization . sampleWithoutReplacement ([ 250 ,   500 ,   750 ,   1000 ,   1250 ,   1500 ,   1750 ,   2000 ],   1 )[ 0 ]; \n   }  }   In the code above, we replaced the  trial_duration: 1000  parameter in  fixation  with a function. Inside the function, we take a sample from the array  [250, 500, 750, 1000, 1250, 1500, 1750, 2000]  of size 1 (second parameter to  jsPsych.randomization.sampleWithoutReplacement ). The return value from calling  jsPsych.randomization.sampleWithoutReplacement  is an array of length 1, so we add the  [0]  selection at the end to get the value out of the array.",
            "title": "Part 7: Using functions to generate parameters"
        },
        {
            "location": "/tutorials/rt-task/#the-complete-code-so-far_5",
            "text": "<!DOCTYPE html>  < html > \n   < head > \n     < title > My experiment </ title > \n     < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\" ></ script > \n     < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n   </ head > \n   < body ></ body > \n   < script > \n\n     /* create timeline */ \n     var   timeline   =   []; \n\n     /* define welcome message trial */ \n     var   welcome   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"Welcome to the experiment. Press any key to begin.\" \n     }; \n     timeline . push ( welcome ); \n\n     /* define instructions trial */ \n     var   instructions   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"<p>In this experiment, a circle will appear in the center \"   + \n           \"of the screen.</p><p>If the circle is <strong>blue</strong>, \"   + \n           \"press the letter F on the keyboard as fast as you can.</p>\"   + \n           \"<p>If the circle is <strong>orange</strong>, press the letter J \"   + \n           \"as fast as you can.</p>\"   + \n           \"<div style='float: left;'><img src='img/blue.png'></img>\"   + \n           \"<p class='small'><strong>Press the F key</strong></p></div>\"   + \n           \"<div class='float: right;'><img src='img/orange.png'></img>\"   + \n           \"<p class='small'><strong>Press the J key</strong></p></div>\"   + \n           \"<p>Press any key to begin.</p>\" , \n       post_trial_gap :   2000 \n     }; \n     timeline . push ( instructions ); \n\n     /* test trials */ \n     var   test_stimuli   =   [ \n       {   stimulus :   \"img/blue.png\" }, \n       {   stimulus :   \"img/orange.png\" } \n     ]; \n\n     var   fixation   =   { \n       type :   'html-keyboard-response' , \n       stimulus :   '<div style=\"font-size:60px;\">+</div>' , \n       choices :   jsPsych . NO_KEYS , \n       trial_duration :   function (){ \n         return   jsPsych . randomization . sampleWithoutReplacement ([ 250 ,   500 ,   750 ,   1000 ,   1250 ,   1500 ,   1750 ,   2000 ],   1 )[ 0 ]; \n       } \n     } \n\n     var   test   =   { \n       type :   \"image-keyboard-response\" , \n       stimulus :   jsPsych . timelineVariable ( 'stimulus' ), \n       choices :   [ 'f' ,   'j' ] \n     } \n\n     var   test_procedure   =   { \n       timeline :   [ fixation ,   test ], \n       timeline_variables :   test_stimuli , \n       randomize_order :   true , \n       repetitions :   5 \n     } \n\n     timeline . push ( test_procedure ); \n\n     /* start the experiment */ \n     jsPsych . init ({ \n       timeline :   timeline \n     }); \n   </ script > \n   </ html >",
            "title": "The complete code so far"
        },
        {
            "location": "/tutorials/rt-task/#part-8-displaying-the-data",
            "text": "We have created a complete, if simple, experiment at this point, so let's take a look at the data being generated. jsPsych has a built-in  function called  jsPsych.data.displayData()  that is useful for debugging your experiment. It will remove all of the information on the screen and replace it with the raw data collected so far. This isn't terribly useful when you are actually running an experiment, but it's nice for checking the data during development.  We need the  displayData  function to execute when the experiment ends. One way to do this is to use the  on_finish  callback function . This function will automatically execute once all the trials in the experiment are finished. We can specify a function to call in the  init  method.  jsPsych . init ({ \n   timeline :   timeline , \n   on_finish :   function ()   { \n     jsPsych . data . displayData (); \n   }  });",
            "title": "Part 8: Displaying the data"
        },
        {
            "location": "/tutorials/rt-task/#the-complete-code-so-far_6",
            "text": "<!DOCTYPE html>  < html > \n   < head > \n     < title > My experiment </ title > \n     < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\" ></ script > \n     < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n   </ head > \n   < body ></ body > \n   < script > \n\n     /* create timeline */ \n     var   timeline   =   []; \n\n     /* define welcome message trial */ \n     var   welcome   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"Welcome to the experiment. Press any key to begin.\" \n     }; \n     timeline . push ( welcome ); \n\n     /* define instructions trial */ \n     var   instructions   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"<p>In this experiment, a circle will appear in the center \"   + \n           \"of the screen.</p><p>If the circle is <strong>blue</strong>, \"   + \n           \"press the letter F on the keyboard as fast as you can.</p>\"   + \n           \"<p>If the circle is <strong>orange</strong>, press the letter J \"   + \n           \"as fast as you can.</p>\"   + \n           \"<div style='float: left;'><img src='img/blue.png'></img>\"   + \n           \"<p class='small'><strong>Press the F key</strong></p></div>\"   + \n           \"<div class='float: right;'><img src='img/orange.png'></img>\"   + \n           \"<p class='small'><strong>Press the J key</strong></p></div>\"   + \n           \"<p>Press any key to begin.</p>\" , \n       post_trial_gap :   2000 \n     }; \n     timeline . push ( instructions ); \n\n     /* test trials */ \n     var   test_stimuli   =   [ \n       {   stimulus :   \"img/blue.png\" }, \n       {   stimulus :   \"img/orange.png\" } \n     ]; \n\n     var   fixation   =   { \n       type :   'html-keyboard-response' , \n       stimulus :   '<div style=\"font-size:60px;\">+</div>' , \n       choices :   jsPsych . NO_KEYS , \n       trial_duration :   function (){ \n         return   jsPsych . randomization . sampleWithoutReplacement ([ 250 ,   500 ,   750 ,   1000 ,   1250 ,   1500 ,   1750 ,   2000 ],   1 )[ 0 ]; \n       } \n     } \n\n     var   test   =   { \n       type :   \"image-keyboard-response\" , \n       stimulus :   jsPsych . timelineVariable ( 'stimulus' ), \n       choices :   [ 'f' ,   'j' ] \n     } \n\n     var   test_procedure   =   { \n       timeline :   [ fixation ,   test ], \n       timeline_variables :   test_stimuli , \n       randomize_order :   true , \n       repetitions :   5 \n     } \n\n     timeline . push ( test_procedure ); \n\n     /* start the experiment */ \n     jsPsych . init ({ \n       timeline :   timeline , \n       on_finish :   function ()   { \n         jsPsych . data . displayData (); \n       } \n     }); \n   </ script > \n   </ html >",
            "title": "The complete code so far"
        },
        {
            "location": "/tutorials/rt-task/#part-9-tagging-trials-with-additional-data",
            "text": "All trials in jsPsych can be tagged with additional arbitrary data. This data will get stored alongside the data that the plugin normally generates, which allows experimenters to record properties of a trial along with the data from the trial.  When might you use this feature? In this experiment, it would be nice to tag each trial with a circle as a test trial, so that the resulting data can be easily filtered to look at only the test trials. We also could tag the test trials with a property that indicates what the correct response should be (F for the blue circles, J for the orange).  In our current code, we are using the timeline variables feature of jsPsych to choose which circle gets presented on a trial. Since we want to tag the trials differently based on which circle is presented, we need to add the tagging data to the  test_stimuli  array, and then use the  jsPsych.timelineVariable()  function to get the values and assign them to the  data  property of the trial.  We start by modifying  test_stimuli :  var   test_stimuli   =   [ \n   {   stimulus :   \"img/blue.png\" ,   data :   { test_part :   'test' ,   correct_response :   'f' }}, \n   {   stimulus :   \"img/orange.png\" ,   data :   { test_part :   'test' ,   correct_response   'j' }}  ];   Now we assign these values to the  data  parameter of the  test  trial.  var   test   =   { \n   type :   \"image-keyboard-response\" , \n   stimulus :   jsPsych . timelineVariable ( 'stimulus' ), \n   choices :   [ 'f' ,   'j' ], \n   data :   jsPsych . timelineVariable ( 'data' )  }   Another kind of tagging that would be useful is to mark each fixation trial as such, to make removing the data from fixation trials easier. This is a simpler task, as we don't need to use the timeline variables feature. We can just add a  data  property to the  fixation  trial:  var   fixation   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   '<div style=\"font-size:60px;\">+</div>' , \n   choices :   jsPsych . NO_KEYS , \n   trial_duration :   function (){ \n     return   jsPsych . randomization . sampleWithoutReplacement ([ 250 ,   500 ,   750 ,   1000 ,   1250 ,   1500 ,   1750 ,   2000 ],   1 )[ 0 ]; \n   }, \n   data :   { test_part :   'fixation' }  }",
            "title": "Part 9: Tagging trials with additional data"
        },
        {
            "location": "/tutorials/rt-task/#the-complete-code-so-far_7",
            "text": "<!DOCTYPE html>  < html > \n   < head > \n     < title > My experiment </ title > \n     < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\" ></ script > \n     < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n   </ head > \n   < body ></ body > \n   < script > \n\n     /* create timeline */ \n     var   timeline   =   []; \n\n     /* define welcome message trial */ \n     var   welcome   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"Welcome to the experiment. Press any key to begin.\" \n     }; \n     timeline . push ( welcome ); \n\n     /* define instructions trial */ \n     var   instructions   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"<p>In this experiment, a circle will appear in the center \"   + \n           \"of the screen.</p><p>If the circle is <strong>blue</strong>, \"   + \n           \"press the letter F on the keyboard as fast as you can.</p>\"   + \n           \"<p>If the circle is <strong>orange</strong>, press the letter J \"   + \n           \"as fast as you can.</p>\"   + \n           \"<div style='float: left;'><img src='img/blue.png'></img>\"   + \n           \"<p class='small'><strong>Press the F key</strong></p></div>\"   + \n           \"<div class='float: right;'><img src='img/orange.png'></img>\"   + \n           \"<p class='small'><strong>Press the J key</strong></p></div>\"   + \n           \"<p>Press any key to begin.</p>\" , \n       post_trial_gap :   2000 \n     }; \n     timeline . push ( instructions ); \n\n     /* test trials */ \n     var   test_stimuli   =   [ \n       {   stimulus :   \"img/blue.png\" ,   data :   { test_part :   'test' ,   correct_response :   'f' }}, \n       {   stimulus :   \"img/orange.png\" ,   data :   { test_part :   'test' ,   correct_response   'j' }} \n     ]; \n\n     var   fixation   =   { \n       type :   'html-keyboard-response' , \n       stimulus :   '<div style=\"font-size:60px;\">+</div>' , \n       choices :   jsPsych . NO_KEYS , \n       trial_duration :   function (){ \n         return   jsPsych . randomization . sampleWithoutReplacement ([ 250 ,   500 ,   750 ,   1000 ,   1250 ,   1500 ,   1750 ,   2000 ],   1 )[ 0 ]; \n       }, \n       data :   { test_part :   'fixation' } \n     } \n\n     var   test   =   { \n       type :   \"image-keyboard-response\" , \n       stimulus :   jsPsych . timelineVariable ( 'stimulus' ), \n       choices :   [ 'f' ,   'j' ], \n       data :   jsPsych . timelineVariable ( 'data' ) \n     } \n\n     var   test_procedure   =   { \n       timeline :   [ fixation ,   test ], \n       timeline_variables :   test_stimuli , \n       randomize_order :   true , \n       repetitions :   5 \n     } \n\n     timeline . push ( test_procedure ); \n\n     /* start the experiment */ \n     jsPsych . init ({ \n       timeline :   timeline , \n       on_finish :   function ()   { \n         jsPsych . data . displayData (); \n       } \n     }); \n   </ script > \n   </ html >",
            "title": "The complete code so far"
        },
        {
            "location": "/tutorials/rt-task/#part-10-manipulating-data-during-the-experiment",
            "text": "Now that the data from the test trials has a tag that describes the correct response, it would be easy to analyze the data after the fact (in R, for example) and calculate whether the participant responded correctly.  But, we can also do this in jsPsych as the experiment runs to save time later and enable a limited set of data aggregation and analysis directly in the experiment code.  To do this, we'll use the  on_finish  event of the test trial. We can assign a function to  on_finish , and that function will receive an object containing the data generated by the trial. This object can be manipulated inside the function, and any changes made to the object will be stored in jsPsych's internal representation of the data.  For this example, we'll calculate whether the subject responded correctly, and add a new  correct  property to the data object.  var   test   =   { \n   type :   \"image-keyboard-response\" , \n   stimulus :   jsPsych . timelineVariable ( 'stimulus' ), \n   choices :   [ 'f' ,   'j' ], \n   data :   jsPsych . timelineVariable ( 'data' ), \n   on_finish :   function ( data ){ \n     data . correct   =   data . key_press   ==   jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( data . correct_response ); \n   }  }   The  data.key_press  value is a numeric key code indicating which key the subject pressed. The function  jsPsych.pluginAPI.convertKeyCharacterToKeyCode  converts the character representation of a key into the numeric representation (e.g., calling the function on the value  'f'  generates the value  70 ). If this numeric value matches  data.key_press  then  data.correct  will be  true . Otherwise, it will be  false .",
            "title": "Part 10: Manipulating data during the experiment"
        },
        {
            "location": "/tutorials/rt-task/#the-complete-code-so-far_8",
            "text": "<!DOCTYPE html>  < html > \n   < head > \n     < title > My experiment </ title > \n     < script   src = \"jspsych-6.0.1/jspsych.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-html-keyboard-response.js\" ></ script > \n     < script   src = \"jspsych-6.0.1/plugins/jspsych-image-keyboard-response.js\" ></ script > \n     < link   href = \"jspsych-6.0.1/css/jspsych.css\"   rel = \"stylesheet\"   type = \"text/css\" ></ link > \n   </ head > \n   < body ></ body > \n   < script > \n\n     /* create timeline */ \n     var   timeline   =   []; \n\n     /* define welcome message trial */ \n     var   welcome   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"Welcome to the experiment. Press any key to begin.\" \n     }; \n     timeline . push ( welcome ); \n\n     /* define instructions trial */ \n     var   instructions   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"<p>In this experiment, a circle will appear in the center \"   + \n           \"of the screen.</p><p>If the circle is <strong>blue</strong>, \"   + \n           \"press the letter F on the keyboard as fast as you can.</p>\"   + \n           \"<p>If the circle is <strong>orange</strong>, press the letter J \"   + \n           \"as fast as you can.</p>\"   + \n           \"<div style='float: left;'><img src='img/blue.png'></img>\"   + \n           \"<p class='small'><strong>Press the F key</strong></p></div>\"   + \n           \"<div class='float: right;'><img src='img/orange.png'></img>\"   + \n           \"<p class='small'><strong>Press the J key</strong></p></div>\"   + \n           \"<p>Press any key to begin.</p>\" , \n       post_trial_gap :   2000 \n     }; \n     timeline . push ( instructions ); \n\n     /* test trials */ \n     var   test_stimuli   =   [ \n       {   stimulus :   \"img/blue.png\" ,   data :   { test_part :   'test' ,   correct_response :   'f' }}, \n       {   stimulus :   \"img/orange.png\" ,   data :   { test_part :   'test' ,   correct_response   'j' }} \n     ]; \n\n     var   fixation   =   { \n       type :   'html-keyboard-response' , \n       stimulus :   '<div style=\"font-size:60px;\">+</div>' , \n       choices :   jsPsych . NO_KEYS , \n       trial_duration :   function (){ \n         return   jsPsych . randomization . sampleWithoutReplacement ([ 250 ,   500 ,   750 ,   1000 ,   1250 ,   1500 ,   1750 ,   2000 ],   1 )[ 0 ]; \n       }, \n       data :   { test_part :   'fixation' } \n     } \n\n     var   test   =   { \n       type :   \"image-keyboard-response\" , \n       stimulus :   jsPsych . timelineVariable ( 'stimulus' ), \n       choices :   [ 'f' ,   'j' ], \n       data :   jsPsych . timelineVariable ( 'data' ), \n       on_finish :   function ( data ){ \n         data . correct   =   data . key_press   ==   jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( data . correct_response ); \n       } \n     } \n\n     var   test_procedure   =   { \n       timeline :   [ fixation ,   test ], \n       timeline_variables :   test_stimuli , \n       randomize_order :   true , \n       repetitions :   5 \n     } \n\n     timeline . push ( test_procedure ); \n\n     /* start the experiment */ \n     jsPsych . init ({ \n       timeline :   timeline , \n       on_finish :   function ()   { \n         jsPsych . data . displayData (); \n       } \n     }); \n   </ script > \n   </ html >",
            "title": "The complete code so far"
        },
        {
            "location": "/tutorials/rt-task/#part-11-data-aggregation",
            "text": "A new feature in jsPsych version 6.0 is a suite of data aggregation functions. You can now easily calculate things like mean response times for a selected set of trials. In this part, we'll use these functions to add a final trial to the experiment that tells the subject their accuracy and their mean response time for correct responses.  We'll use the text plugin. Because the actual text that we want to display changes based on the subject's performance in the experiment, we need to use a function for the  text  parameter and return the desired text.  var   debrief_block   =   { \n   type :   \"html-keyboard-response\" , \n   stimulus :   function ()   { \n\n     var   trials   =   jsPsych . data . get (). filter ({ test_part :   'test' }); \n     var   correct_trials   =   trials . filter ({ correct :   true }); \n     var   accuracy   =   Math . round ( correct_trials . count ()   /   trials . count ()   *   100 ); \n     var   rt   =   Math . round ( correct_trials . select ( 'rt' ). mean ()); \n\n     return   \"<p>You responded correctly on \" + accuracy + \"% of the trials.</p>\" + \n     \"<p>Your average response time was \" + rt + \"ms.</p>\" + \n     \"<p>Press any key to complete the experiment. Thank you!</p>\" ; \n\n   }  };  timeline . push ( debrief_block );   To create the variable  trials , we use  jsPsych.data.get()  which returns a jsPsych data collection containing all of the data from the experiment. We can then use  .filter  to select only the trials where  test_part  is  'test'  (a benefit of tagging the trials in part 9).  trials  contains all of the data from the trials where a circle was shown.  To get only the correct trials, we can use  .filter()  again to select only the trials from the  trials  data collection where the property  correct  is  true .  To calculate accuracy, we can use the  .count()  method to determine how many trials were correct and how many trials there were total. We also use  Math.round()  to avoid extra digits after the decimal.  Finally, to calculate the mean response time on correct trials, we use the  .select  method on the  correct_trials  data collection to select only the  'rt'  property of those trials. We can then use the  .mean()  method to find the mean of all the RT values.",
            "title": "Part 11: Data aggregation"
        },
        {
            "location": "/tutorials/rt-task/#the-final-code",
            "text": "This code is available in the examples folder in the jsPsych download. It is called  demo-simple-rt-task.html .  <!DOCTYPE html>  < html > \n   < head > \n     < title > My experiment </ title > \n     < script   src = \"../jspsych.js\" ></ script > \n     < script   src = \"../plugins/jspsych-html-keyboard-response.js\" ></ script > \n     < script   src = \"../plugins/jspsych-image-keyboard-response.js\" ></ script > \n     < link   rel = \"stylesheet\"   href = \"../css/jspsych.css\" ></ link > \n   </ head > \n   < body ></ body > \n   < script > \n\n     /* create timeline */ \n     var   timeline   =   []; \n\n     /* define welcome message trial */ \n     var   welcome   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"Welcome to the experiment. Press any key to begin.\" \n     }; \n     timeline . push ( welcome ); \n\n     /* define instructions trial */ \n     var   instructions   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   \"<p>In this experiment, a circle will appear in the center \"   + \n           \"of the screen.</p><p>If the circle is <strong>blue</strong>, \"   + \n           \"press the letter F on the keyboard as fast as you can.</p>\"   + \n           \"<p>If the circle is <strong>orange</strong>, press the letter J \"   + \n           \"as fast as you can.</p>\"   + \n           \"<div style='float: left;'><img src='img/blue.png'></img>\"   + \n           \"<p class='small'><strong>Press the F key</strong></p></div>\"   + \n           \"<div class='float: right;'><img src='img/orange.png'></img>\"   + \n           \"<p class='small'><strong>Press the J key</strong></p></div>\"   + \n           \"<p>Press any key to begin.</p>\" , \n       post_trial_gap :   2000 \n     }; \n     timeline . push ( instructions ); \n\n     /* test trials */ \n\n     var   test_stimuli   =   [ \n       {   stimulus :   \"img/blue.png\" ,   data :   {   test_part :   'test' ,   correct_response :   'f'   }   }, \n       {   stimulus :   \"img/orange.png\" ,   data :   {   test_part :   'test' ,   correct_response :   'j'   }   } \n     ]; \n\n     var   fixation   =   { \n       type :   'html-keyboard-response' , \n       stimulus :   '<div style=\"font-size:60px;\">+</div>' , \n       choices :   jsPsych . NO_KEYS , \n       trial_duration :   function (){ \n         return   jsPsych . randomization . sampleWithoutReplacement ([ 250 ,   500 ,   750 ,   1000 ,   1250 ,   1500 ,   1750 ,   2000 ],   1 )[ 0 ]; \n       }, \n       data :   { test_part :   'fixation' } \n     } \n\n     var   test   =   { \n       type :   \"image-keyboard-response\" , \n       stimulus :   jsPsych . timelineVariable ( 'stimulus' ), \n       choices :   [ 'f' ,   'j' ], \n       data :   jsPsych . timelineVariable ( 'data' ), \n       on_finish :   function ( data ){ \n         data . correct   =   data . key_press   ==   jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( data . correct_response ); \n       }, \n     } \n\n     var   test_procedure   =   { \n       timeline :   [ fixation ,   test ], \n       timeline_variables :   test_stimuli , \n       repetitions :   5 , \n       randomize_order :   true \n     } \n     timeline . push ( test_procedure ); \n\n     /* define debrief */ \n\n     var   debrief_block   =   { \n       type :   \"html-keyboard-response\" , \n       stimulus :   function ()   { \n\n         var   trials   =   jsPsych . data . get (). filter ({ test_part :   'test' }); \n         var   correct_trials   =   trials . filter ({ correct :   true }); \n         var   accuracy   =   Math . round ( correct_trials . count ()   /   trials . count ()   *   100 ); \n         var   rt   =   Math . round ( correct_trials . select ( 'rt' ). mean ()); \n\n         return   \"<p>You responded correctly on \" + accuracy + \"% of the trials.</p>\" + \n         \"<p>Your average response time was \" + rt + \"ms.</p>\" + \n         \"<p>Press any key to complete the experiment. Thank you!</p>\" ; \n\n       } \n     }; \n     timeline . push ( debrief_block ); \n\n     /* start the experiment */ \n     jsPsych . init ({ \n       timeline :   timeline , \n       on_finish :   function ()   { \n         jsPsych . data . displayData (); \n       } \n     }); \n   </ script >  </ html >",
            "title": "The final code"
        },
        {
            "location": "/overview/timeline/",
            "text": "Creating an Experiment: The Timeline\n\u00b6\n\n\nTo create an experiment using jsPsych, you need to specify a timeline that describes the structure of the experiment. The timeline is an ordered set of trials. You must create the timeline before launching the experiment. Most of the code you will write for an experiment will be code to create the timeline. This page walks through the creation of timelines, including very basic examples and more advanced features.\n\n\nA single trial\n\u00b6\n\n\nTo create a trial, you need to create an object that describes the trial. The most important feature of this object is the \ntype\n parameter. This tells jsPsych which plugin file to use to run the trial. For example, if you want to use the text plugin to display a short message, the trial object would look like this:\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'hello world!'\n\n\n}\n\n\n\n\n\n\nThe parameters for this object will depend on the plugin that you choose. Each plugin defines the set of parameters that are needed to run a trial with that plugin. Visit the documentation for a plugin to learn about the parameters that you can use with that plugin.\n\n\nTo create a timeline with the single trial and run the experiment, just embed the trial object in an array. A timeline is simply an array of trials.\n\n\nvar\n \ntimeline\n \n=\n \n[\ntrial\n];\n\n\n\njsPsych\n.\ninit\n({\n\n    \ntimeline\n:\n \ntimeline\n\n\n});\n\n\n\n\n\n\nTo actually create and run this simple example, complete the \nhello world tutorial\n.\n\n\nMultiple trials\n\u00b6\n\n\nScaling up to multiple trials is straightforward. Just create an object for each trial, and add each object to the timeline array.\n\n\n// with lots of trials, it might be easier to add the trials\n\n\n// to the timeline array as they are defined.\n\n\nvar\n \ntimeline\n \n=\n \n[];\n\n\n\nvar\n \ntrial_1\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'This is trial 1.'\n\n\n}\n\n\ntimeline\n.\npush\n(\ntrial_1\n);\n\n\n\nvar\n \ntrial_2\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'This is trial 2.'\n\n\n}\n\n\ntimeline\n.\npush\n(\ntrial_2\n);\n\n\n\nvar\n \ntrial_3\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'This is trial 3.'\n\n\n}\n\n\ntimeline\n.\npush\n(\ntrial_3\n);\n\n\n\n\n\n\nNested timelines\n\u00b6\n\n\nEach object on the timeline can also have it's own timeline. This is useful for many reasons. One is that it allows you to define common parameters across trials once and have them apply to all the trials on the nested timeline. The example below creates a series of trials using the image-keyboard-response plugin, where the only thing that changes from trial-to-trial is the image file being displayed on the screen.\n\n\nvar\n \njudgment_trials\n \n=\n \n{\n\n    \ntype\n:\n \n'image-keyboard-response'\n,\n\n    \nprompt\n:\n \n'<p>Press a number 1-7 to indicate how unusual the image is.</p>'\n,\n\n    \nchoices\n:\n \n[\n'1'\n,\n'2'\n,\n'3'\n,\n'4'\n,\n'5'\n,\n'6'\n,\n'7'\n],\n\n    \ntimeline\n:\n \n[\n\n        \n{\nstimulus\n:\n \n'image1.png'\n},\n\n        \n{\nstimulus\n:\n \n'image2.png'\n},\n\n        \n{\nstimulus\n:\n \n'image3.png'\n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nIn the above code, the \ntype\n, \nprompt\n, and \nchoices\n parameters are automatically applied to all of the objects in the \ntimeline\n array. This creates three trials with the same \ntype\n, \nprompt\n, and \nchoices\n parameters, but different values for the \nstimulus\n parameter.\n\n\nYou can also override the values by declaring a new value in the \ntimeline\n array. In the example below, the second trial will display a different prompt message.\n\n\nvar\n \njudgment_trials\n \n=\n \n{\n\n    \ntype\n:\n \n'image-keyboard-response'\n,\n\n    \nprompt\n:\n \n'<p>Press a number 1-7 to indicate how unusual the image is.</p>'\n,\n\n    \nchoices\n:\n \n[\n'1'\n,\n'2'\n,\n'3'\n,\n'4'\n,\n'5'\n,\n'6'\n,\n'7'\n],\n\n    \ntimeline\n:\n \n[\n\n        \n{\nstimulus\n:\n \n'image1.png'\n},\n\n        \n{\nstimulus\n:\n \n'image2.png'\n,\n \nprompt\n:\n \n'<p>Press 1 for this trial.</p>'\n},\n\n        \n{\nstimulus\n:\n \n'image3.png'\n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nTimelines can be nested any number of times.\n\n\nTimeline variables\n\u00b6\n\n\nA common pattern in behavioral experiments is to repeat the same procedure many times with different stimuli. A procedure might be a single trial, but it also might be a series of trials. One shortcut to implement this pattern is with the approach described in the previous section, but this only works if all the trials use the same plugin type. Timeline variables are a more general solution. With timeline variables, you define the procedure once (as a timeline), and specify a set of parameters and their values for each iteration through the timeline.\n\n\nWhat follows is an example of how to use timeline variables. The \nsimple reaction time tutorial\n also explains how to use timeline variables.\n\n\nSuppose we want to create an experiment where people see a set of faces with names displayed below the face. In between each face, a fixation cross is displayed on the screen. Without timeline variables, we would need to add many trials to the timeline, alternating between trials showing the fixation cross and trials showing the face and name. This could be done efficiently in a loop or function, but timeline variables make it even easier - as well as adding extra features like sampling and randomization.\n\n\nHere's a basic version of the task with timeline variables.\n\n\nvar\n \nface_name_procedure\n \n=\n \n{\n\n    \ntimeline\n:\n \n[\n\n        \n{\n\n            \ntype\n:\n \n'html-keyboard-response'\n,\n\n            \nstimulus\n:\n \n'+'\n,\n\n            \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n            \ntiming_response\n:\n \n500\n\n        \n},\n\n        \n{\n\n            \ntype\n:\n \n'image-keyboard-response'\n,\n\n            \nstimulus\n:\n \njsPsych\n.\ntimelineVariable\n(\n'face'\n),\n\n            \nprompt\n:\n \nfunction\n(){\n \nreturn\n \n\"This person's name is \"\n+\njsPsych\n.\ntimelineVariable\n(\n'name'\n,\n \ntrue\n);\n \n},\n\n            \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n            \ntiming_response\n:\n \n2500\n\n        \n}\n\n    \n],\n\n    \ntimeline_variables\n:\n \n[\n\n        \n{\n \nface\n:\n \n'person-1.jpg'\n,\n \nname\n:\n \n'Alex'\n \n},\n\n        \n{\n \nface\n:\n \n'person-2.jpg'\n,\n \nname\n:\n \n'Beth'\n \n},\n\n        \n{\n \nface\n:\n \n'person-3.jpg'\n,\n \nname\n:\n \n'Chad'\n \n},\n\n        \n{\n \nface\n:\n \n'person-4.jpg'\n,\n \nname\n:\n \n'Dave'\n \n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nIn the above version, there are four separate trials defined in the \ntimeline_variables\n parameter. Each trial has a variable \nface\n and a variable \nname\n. The \ntimeline\n defines a procedure of showing a fixation cross for 500ms followed by the face and name for 2500ms.  This procedure will repeat four times, with the first trial showing Alex, the second Beth, and so on. The variables are referenced in the procedure by calling the \njsPsych.timelineVariable()\n method. Note that the call to this method is wrapped in a function, as we want the method to execute during the experiment, not during the declaration of the timeline.\n\n\nRandom orders of trials\n\u00b6\n\n\nIf we want to randomize the order of the trials, we can set \nrandomize_order\n to \ntrue\n.\n\n\nvar\n \nface_name_procedure\n \n=\n \n{\n\n    \n// timeline parameter hidden to save space ...\n\n    \ntimeline_variables\n:\n \n[\n\n        \n{\n \nface\n:\n \n'person-1.jpg'\n,\n \nname\n:\n \n'Alex'\n \n},\n\n        \n{\n \nface\n:\n \n'person-2.jpg'\n,\n \nname\n:\n \n'Beth'\n \n},\n\n        \n{\n \nface\n:\n \n'person-3.jpg'\n,\n \nname\n:\n \n'Chad'\n \n},\n\n        \n{\n \nface\n:\n \n'person-4.jpg'\n,\n \nname\n:\n \n'Dave'\n \n}\n\n    \n],\n\n    \nrandomize_order\n:\n \ntrue\n\n\n}\n\n\n\n\n\n\nRepeating trials\n\u00b6\n\n\nIf we want to repeat the set of trials multiple times, then we can set \nrepetitions\n to an integer. If \nrandomize_order\n is also \ntrue\n, the order will re-randomize before every repetition.\n\n\nvar\n \nface_name_procedure\n \n=\n \n{\n\n    \n// timeline parameter hidden to save space ...\n\n    \ntimeline_variables\n:\n \n[\n\n        \n{\n \nface\n:\n \n'person-1.jpg'\n,\n \nname\n:\n \n'Alex'\n \n},\n\n        \n{\n \nface\n:\n \n'person-2.jpg'\n,\n \nname\n:\n \n'Beth'\n \n},\n\n        \n{\n \nface\n:\n \n'person-3.jpg'\n,\n \nname\n:\n \n'Chad'\n \n},\n\n        \n{\n \nface\n:\n \n'person-4.jpg'\n,\n \nname\n:\n \n'Dave'\n \n}\n\n    \n],\n\n    \nrandomize_order\n:\n \ntrue\n,\n\n    \nrepetitions\n:\n \n3\n\n\n}\n\n\n\n\n\n\nSampling methods\n\u00b6\n\n\nThere are also a set of sampling methods that can be used to select a set of trials from the timeline_variables. Sampling is declared by creating a \nsample\n parameter.\n\n\nSampling with replacement\n\u00b6\n\n\nvar\n \nface_name_procedure\n \n=\n \n{\n\n    \n// timeline parameter hidden to save space ...\n\n    \ntimeline_variables\n:\n \n[\n\n        \n{\n \nface\n:\n \n'person-1.jpg'\n,\n \nname\n:\n \n'Alex'\n \n},\n\n        \n{\n \nface\n:\n \n'person-2.jpg'\n,\n \nname\n:\n \n'Beth'\n \n},\n\n        \n{\n \nface\n:\n \n'person-3.jpg'\n,\n \nname\n:\n \n'Chad'\n \n},\n\n        \n{\n \nface\n:\n \n'person-4.jpg'\n,\n \nname\n:\n \n'Dave'\n \n}\n\n    \n],\n\n    \nsample\n:\n \n{\n\n        \ntype\n:\n \n'with-replacement'\n,\n\n        \nsize\n:\n \n10\n,\n \n// 10 trials, with replacement\n\n    \n}\n\n\n}\n\n\n\n\n\n\nSampling with replacement, unequal probabilities\n\u00b6\n\n\nvar\n \nface_name_procedure\n \n=\n \n{\n\n    \n// timeline parameter hidden to save space ...\n\n    \ntimeline_variables\n:\n \n[\n\n        \n{\n \nface\n:\n \n'person-1.jpg'\n,\n \nname\n:\n \n'Alex'\n \n},\n\n        \n{\n \nface\n:\n \n'person-2.jpg'\n,\n \nname\n:\n \n'Beth'\n \n},\n\n        \n{\n \nface\n:\n \n'person-3.jpg'\n,\n \nname\n:\n \n'Chad'\n \n},\n\n        \n{\n \nface\n:\n \n'person-4.jpg'\n,\n \nname\n:\n \n'Dave'\n \n}\n\n    \n],\n\n    \nsample\n:\n \n{\n\n        \ntype\n:\n \n'with-replacement'\n,\n\n        \nsize\n:\n \n10\n,\n \n// 10 trials, with replacement\n\n        \nweights\n:\n \n[\n3\n,\n \n1\n,\n \n1\n,\n \n1\n],\n \n// The Alex trial is three times as likely to be sampled as the others.\n\n    \n}\n\n\n}\n\n\n\n\n\n\nSampling without replacement\n\u00b6\n\n\nvar\n \nface_name_procedure\n \n=\n \n{\n\n    \n// timeline parameter hidden to save space ...\n\n    \ntimeline_variables\n:\n \n[\n\n        \n{\n \nface\n:\n \n'person-1.jpg'\n,\n \nname\n:\n \n'Alex'\n \n},\n\n        \n{\n \nface\n:\n \n'person-2.jpg'\n,\n \nname\n:\n \n'Beth'\n \n},\n\n        \n{\n \nface\n:\n \n'person-3.jpg'\n,\n \nname\n:\n \n'Chad'\n \n},\n\n        \n{\n \nface\n:\n \n'person-4.jpg'\n,\n \nname\n:\n \n'Dave'\n \n}\n\n    \n],\n\n    \nsample\n:\n \n{\n\n        \ntype\n:\n \n'without-replacement'\n,\n\n        \nsize\n:\n \n3\n,\n \n// 3 trials, without replacement\n\n    \n}\n\n\n}\n\n\n\n\n\n\nRepeating each trial a fixed number of times in a random order\n\u00b6\n\n\nvar\n \nface_name_procedure\n \n=\n \n{\n\n    \n// timeline parameter hidden to save space ...\n\n    \ntimeline_variables\n:\n \n[\n\n        \n{\n \nface\n:\n \n'person-1.jpg'\n,\n \nname\n:\n \n'Alex'\n \n},\n\n        \n{\n \nface\n:\n \n'person-2.jpg'\n,\n \nname\n:\n \n'Beth'\n \n},\n\n        \n{\n \nface\n:\n \n'person-3.jpg'\n,\n \nname\n:\n \n'Chad'\n \n},\n\n        \n{\n \nface\n:\n \n'person-4.jpg'\n,\n \nname\n:\n \n'Dave'\n \n}\n\n    \n],\n\n    \nsample\n:\n \n{\n\n        \ntype\n:\n \n'fixed-repetitions'\n,\n\n        \nsize\n:\n \n3\n,\n \n// 3 repetitions of each trial, 12 total trials, order is randomized.\n\n    \n}\n\n\n}\n\n\n\n\n\n\nCustom sampling function\n\u00b6\n\n\nvar\n \nface_name_procedure\n \n=\n \n{\n\n    \n// timeline parameter hidden to save space ...\n\n    \ntimeline_variables\n:\n \n[\n\n        \n{\n \nface\n:\n \n'person-1.jpg'\n,\n \nname\n:\n \n'Alex'\n \n},\n\n        \n{\n \nface\n:\n \n'person-2.jpg'\n,\n \nname\n:\n \n'Beth'\n \n},\n\n        \n{\n \nface\n:\n \n'person-3.jpg'\n,\n \nname\n:\n \n'Chad'\n \n},\n\n        \n{\n \nface\n:\n \n'person-4.jpg'\n,\n \nname\n:\n \n'Dave'\n \n}\n\n    \n],\n\n    \nsample\n:\n \n{\n\n        \ntype\n:\n \n'custom'\n,\n\n        \nfn\n:\n \nfunction\n(\nt\n){\n\n            \n// the first parameter to this function call is an array of integers\n\n            \n// from 0 to n-1, where n is the number of trials.\n\n            \n// the method needs to return an array of integers specifying the order\n\n            \n// that the trials should be executed. this array does not need to\n\n            \n// contain all of the integers.\n\n\n            \nreturn\n \nt\n.\nreverse\n();\n \n// show the trials in the reverse order\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nLooping timelines\n\u00b6\n\n\nAny timeline can be looped using the \nloop_function\n option. The loop function should be a function that evaluates to \ntrue\n if the timeline should repeat, and \nfalse\n if the timeline should end. It receives a single parameter: the DataCollection object with all of the data from the trials executed in the last iteration of the timeline. The loop function will be evaluated after the timeline is completed.\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'This trial is in a loop. Press R to repeat this trial, or C to continue.'\n\n\n}\n\n\n\nvar\n \nloop_node\n \n=\n \n{\n\n    \ntimeline\n:\n \n[\ntrial\n],\n\n    \nloop_function\n:\n \nfunction\n(\ndata\n){\n\n        \nif\n(\njsPsych\n.\npluginAPI\n.\nconvertKeyCharacterToKeyCode\n(\n'r'\n)\n \n==\n \ndata\n.\nvalues\n()[\n0\n].\nkey_press\n){\n\n            \nreturn\n \ntrue\n;\n\n        \n}\n \nelse\n \n{\n\n            \nreturn\n \nfalse\n;\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nConditional timelines\n\u00b6\n\n\nA timeline can be skipped based on the evaluation of a function using the \nconditional_function\n option. If the conditional function evaluates to \ntrue\n, the timeline will execute normally. If the conditional function evaluates to \nfalse\n, then the timeline will be skipped. The conditional function is evaluated whenever the timeline is about to run the first trial.\n\n\nvar\n \npre_if_trial\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'The next trial is in a conditional statement. Press S to skip it, or V to view it.'\n\n\n}\n\n\n\nvar\n \nif_trial\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'You chose to view the trial. Press any key to continue.'\n\n\n}\n\n\n\nvar\n \nif_node\n \n=\n \n{\n\n    \ntimeline\n:\n \n[\nif_trial\n],\n\n    \nconditional_function\n:\n \nfunction\n(){\n\n        \n// get the data from the previous trial,\n\n        \n// and check which key was pressed\n\n        \nvar\n \ndata\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nlast\n(\n1\n).\nvalues\n()[\n0\n];\n\n        \nif\n(\ndata\n.\nkey_press\n \n==\n \njsPsych\n.\npluginAPI\n.\nconvertKeyCharacterToKeyCode\n(\n's'\n)){\n\n            \nreturn\n \nfalse\n;\n\n        \n}\n \nelse\n \n{\n\n            \nreturn\n \ntrue\n;\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\nvar\n \nafter_if_trial\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'This is the trial after the conditional.'\n\n\n}\n\n\n\njsPsych\n.\ninit\n({\n\n    \ntimeline\n:\n \n[\npre_if_trial\n,\n \nif_node\n,\n \nafter_if_trial\n],\n\n    \non_finish\n:\n \nfunction\n(){\njsPsych\n.\ndata\n.\ndisplayData\n();\n \n}\n\n\n});",
            "title": "Creating an Experiment: The Timeline"
        },
        {
            "location": "/overview/timeline/#creating-an-experiment-the-timeline",
            "text": "To create an experiment using jsPsych, you need to specify a timeline that describes the structure of the experiment. The timeline is an ordered set of trials. You must create the timeline before launching the experiment. Most of the code you will write for an experiment will be code to create the timeline. This page walks through the creation of timelines, including very basic examples and more advanced features.",
            "title": "Creating an Experiment: The Timeline"
        },
        {
            "location": "/overview/timeline/#a-single-trial",
            "text": "To create a trial, you need to create an object that describes the trial. The most important feature of this object is the  type  parameter. This tells jsPsych which plugin file to use to run the trial. For example, if you want to use the text plugin to display a short message, the trial object would look like this:  var   trial   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   'hello world!'  }   The parameters for this object will depend on the plugin that you choose. Each plugin defines the set of parameters that are needed to run a trial with that plugin. Visit the documentation for a plugin to learn about the parameters that you can use with that plugin.  To create a timeline with the single trial and run the experiment, just embed the trial object in an array. A timeline is simply an array of trials.  var   timeline   =   [ trial ];  jsPsych . init ({ \n     timeline :   timeline  });   To actually create and run this simple example, complete the  hello world tutorial .",
            "title": "A single trial"
        },
        {
            "location": "/overview/timeline/#multiple-trials",
            "text": "Scaling up to multiple trials is straightforward. Just create an object for each trial, and add each object to the timeline array.  // with lots of trials, it might be easier to add the trials  // to the timeline array as they are defined.  var   timeline   =   [];  var   trial_1   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   'This is trial 1.'  }  timeline . push ( trial_1 );  var   trial_2   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   'This is trial 2.'  }  timeline . push ( trial_2 );  var   trial_3   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   'This is trial 3.'  }  timeline . push ( trial_3 );",
            "title": "Multiple trials"
        },
        {
            "location": "/overview/timeline/#nested-timelines",
            "text": "Each object on the timeline can also have it's own timeline. This is useful for many reasons. One is that it allows you to define common parameters across trials once and have them apply to all the trials on the nested timeline. The example below creates a series of trials using the image-keyboard-response plugin, where the only thing that changes from trial-to-trial is the image file being displayed on the screen.  var   judgment_trials   =   { \n     type :   'image-keyboard-response' , \n     prompt :   '<p>Press a number 1-7 to indicate how unusual the image is.</p>' , \n     choices :   [ '1' , '2' , '3' , '4' , '5' , '6' , '7' ], \n     timeline :   [ \n         { stimulus :   'image1.png' }, \n         { stimulus :   'image2.png' }, \n         { stimulus :   'image3.png' } \n     ]  }   In the above code, the  type ,  prompt , and  choices  parameters are automatically applied to all of the objects in the  timeline  array. This creates three trials with the same  type ,  prompt , and  choices  parameters, but different values for the  stimulus  parameter.  You can also override the values by declaring a new value in the  timeline  array. In the example below, the second trial will display a different prompt message.  var   judgment_trials   =   { \n     type :   'image-keyboard-response' , \n     prompt :   '<p>Press a number 1-7 to indicate how unusual the image is.</p>' , \n     choices :   [ '1' , '2' , '3' , '4' , '5' , '6' , '7' ], \n     timeline :   [ \n         { stimulus :   'image1.png' }, \n         { stimulus :   'image2.png' ,   prompt :   '<p>Press 1 for this trial.</p>' }, \n         { stimulus :   'image3.png' } \n     ]  }   Timelines can be nested any number of times.",
            "title": "Nested timelines"
        },
        {
            "location": "/overview/timeline/#timeline-variables",
            "text": "A common pattern in behavioral experiments is to repeat the same procedure many times with different stimuli. A procedure might be a single trial, but it also might be a series of trials. One shortcut to implement this pattern is with the approach described in the previous section, but this only works if all the trials use the same plugin type. Timeline variables are a more general solution. With timeline variables, you define the procedure once (as a timeline), and specify a set of parameters and their values for each iteration through the timeline.  What follows is an example of how to use timeline variables. The  simple reaction time tutorial  also explains how to use timeline variables.  Suppose we want to create an experiment where people see a set of faces with names displayed below the face. In between each face, a fixation cross is displayed on the screen. Without timeline variables, we would need to add many trials to the timeline, alternating between trials showing the fixation cross and trials showing the face and name. This could be done efficiently in a loop or function, but timeline variables make it even easier - as well as adding extra features like sampling and randomization.  Here's a basic version of the task with timeline variables.  var   face_name_procedure   =   { \n     timeline :   [ \n         { \n             type :   'html-keyboard-response' , \n             stimulus :   '+' , \n             choices :   jsPsych . NO_KEYS , \n             timing_response :   500 \n         }, \n         { \n             type :   'image-keyboard-response' , \n             stimulus :   jsPsych . timelineVariable ( 'face' ), \n             prompt :   function (){   return   \"This person's name is \" + jsPsych . timelineVariable ( 'name' ,   true );   }, \n             choices :   jsPsych . NO_KEYS , \n             timing_response :   2500 \n         } \n     ], \n     timeline_variables :   [ \n         {   face :   'person-1.jpg' ,   name :   'Alex'   }, \n         {   face :   'person-2.jpg' ,   name :   'Beth'   }, \n         {   face :   'person-3.jpg' ,   name :   'Chad'   }, \n         {   face :   'person-4.jpg' ,   name :   'Dave'   } \n     ]  }   In the above version, there are four separate trials defined in the  timeline_variables  parameter. Each trial has a variable  face  and a variable  name . The  timeline  defines a procedure of showing a fixation cross for 500ms followed by the face and name for 2500ms.  This procedure will repeat four times, with the first trial showing Alex, the second Beth, and so on. The variables are referenced in the procedure by calling the  jsPsych.timelineVariable()  method. Note that the call to this method is wrapped in a function, as we want the method to execute during the experiment, not during the declaration of the timeline.",
            "title": "Timeline variables"
        },
        {
            "location": "/overview/timeline/#random-orders-of-trials",
            "text": "If we want to randomize the order of the trials, we can set  randomize_order  to  true .  var   face_name_procedure   =   { \n     // timeline parameter hidden to save space ... \n     timeline_variables :   [ \n         {   face :   'person-1.jpg' ,   name :   'Alex'   }, \n         {   face :   'person-2.jpg' ,   name :   'Beth'   }, \n         {   face :   'person-3.jpg' ,   name :   'Chad'   }, \n         {   face :   'person-4.jpg' ,   name :   'Dave'   } \n     ], \n     randomize_order :   true  }",
            "title": "Random orders of trials"
        },
        {
            "location": "/overview/timeline/#repeating-trials",
            "text": "If we want to repeat the set of trials multiple times, then we can set  repetitions  to an integer. If  randomize_order  is also  true , the order will re-randomize before every repetition.  var   face_name_procedure   =   { \n     // timeline parameter hidden to save space ... \n     timeline_variables :   [ \n         {   face :   'person-1.jpg' ,   name :   'Alex'   }, \n         {   face :   'person-2.jpg' ,   name :   'Beth'   }, \n         {   face :   'person-3.jpg' ,   name :   'Chad'   }, \n         {   face :   'person-4.jpg' ,   name :   'Dave'   } \n     ], \n     randomize_order :   true , \n     repetitions :   3  }",
            "title": "Repeating trials"
        },
        {
            "location": "/overview/timeline/#sampling-methods",
            "text": "There are also a set of sampling methods that can be used to select a set of trials from the timeline_variables. Sampling is declared by creating a  sample  parameter.",
            "title": "Sampling methods"
        },
        {
            "location": "/overview/timeline/#sampling-with-replacement",
            "text": "var   face_name_procedure   =   { \n     // timeline parameter hidden to save space ... \n     timeline_variables :   [ \n         {   face :   'person-1.jpg' ,   name :   'Alex'   }, \n         {   face :   'person-2.jpg' ,   name :   'Beth'   }, \n         {   face :   'person-3.jpg' ,   name :   'Chad'   }, \n         {   face :   'person-4.jpg' ,   name :   'Dave'   } \n     ], \n     sample :   { \n         type :   'with-replacement' , \n         size :   10 ,   // 10 trials, with replacement \n     }  }",
            "title": "Sampling with replacement"
        },
        {
            "location": "/overview/timeline/#sampling-with-replacement-unequal-probabilities",
            "text": "var   face_name_procedure   =   { \n     // timeline parameter hidden to save space ... \n     timeline_variables :   [ \n         {   face :   'person-1.jpg' ,   name :   'Alex'   }, \n         {   face :   'person-2.jpg' ,   name :   'Beth'   }, \n         {   face :   'person-3.jpg' ,   name :   'Chad'   }, \n         {   face :   'person-4.jpg' ,   name :   'Dave'   } \n     ], \n     sample :   { \n         type :   'with-replacement' , \n         size :   10 ,   // 10 trials, with replacement \n         weights :   [ 3 ,   1 ,   1 ,   1 ],   // The Alex trial is three times as likely to be sampled as the others. \n     }  }",
            "title": "Sampling with replacement, unequal probabilities"
        },
        {
            "location": "/overview/timeline/#sampling-without-replacement",
            "text": "var   face_name_procedure   =   { \n     // timeline parameter hidden to save space ... \n     timeline_variables :   [ \n         {   face :   'person-1.jpg' ,   name :   'Alex'   }, \n         {   face :   'person-2.jpg' ,   name :   'Beth'   }, \n         {   face :   'person-3.jpg' ,   name :   'Chad'   }, \n         {   face :   'person-4.jpg' ,   name :   'Dave'   } \n     ], \n     sample :   { \n         type :   'without-replacement' , \n         size :   3 ,   // 3 trials, without replacement \n     }  }",
            "title": "Sampling without replacement"
        },
        {
            "location": "/overview/timeline/#repeating-each-trial-a-fixed-number-of-times-in-a-random-order",
            "text": "var   face_name_procedure   =   { \n     // timeline parameter hidden to save space ... \n     timeline_variables :   [ \n         {   face :   'person-1.jpg' ,   name :   'Alex'   }, \n         {   face :   'person-2.jpg' ,   name :   'Beth'   }, \n         {   face :   'person-3.jpg' ,   name :   'Chad'   }, \n         {   face :   'person-4.jpg' ,   name :   'Dave'   } \n     ], \n     sample :   { \n         type :   'fixed-repetitions' , \n         size :   3 ,   // 3 repetitions of each trial, 12 total trials, order is randomized. \n     }  }",
            "title": "Repeating each trial a fixed number of times in a random order"
        },
        {
            "location": "/overview/timeline/#custom-sampling-function",
            "text": "var   face_name_procedure   =   { \n     // timeline parameter hidden to save space ... \n     timeline_variables :   [ \n         {   face :   'person-1.jpg' ,   name :   'Alex'   }, \n         {   face :   'person-2.jpg' ,   name :   'Beth'   }, \n         {   face :   'person-3.jpg' ,   name :   'Chad'   }, \n         {   face :   'person-4.jpg' ,   name :   'Dave'   } \n     ], \n     sample :   { \n         type :   'custom' , \n         fn :   function ( t ){ \n             // the first parameter to this function call is an array of integers \n             // from 0 to n-1, where n is the number of trials. \n             // the method needs to return an array of integers specifying the order \n             // that the trials should be executed. this array does not need to \n             // contain all of the integers. \n\n             return   t . reverse ();   // show the trials in the reverse order \n         } \n     }  }",
            "title": "Custom sampling function"
        },
        {
            "location": "/overview/timeline/#looping-timelines",
            "text": "Any timeline can be looped using the  loop_function  option. The loop function should be a function that evaluates to  true  if the timeline should repeat, and  false  if the timeline should end. It receives a single parameter: the DataCollection object with all of the data from the trials executed in the last iteration of the timeline. The loop function will be evaluated after the timeline is completed.  var   trial   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   'This trial is in a loop. Press R to repeat this trial, or C to continue.'  }  var   loop_node   =   { \n     timeline :   [ trial ], \n     loop_function :   function ( data ){ \n         if ( jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'r' )   ==   data . values ()[ 0 ]. key_press ){ \n             return   true ; \n         }   else   { \n             return   false ; \n         } \n     }  }",
            "title": "Looping timelines"
        },
        {
            "location": "/overview/timeline/#conditional-timelines",
            "text": "A timeline can be skipped based on the evaluation of a function using the  conditional_function  option. If the conditional function evaluates to  true , the timeline will execute normally. If the conditional function evaluates to  false , then the timeline will be skipped. The conditional function is evaluated whenever the timeline is about to run the first trial.  var   pre_if_trial   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   'The next trial is in a conditional statement. Press S to skip it, or V to view it.'  }  var   if_trial   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   'You chose to view the trial. Press any key to continue.'  }  var   if_node   =   { \n     timeline :   [ if_trial ], \n     conditional_function :   function (){ \n         // get the data from the previous trial, \n         // and check which key was pressed \n         var   data   =   jsPsych . data . get (). last ( 1 ). values ()[ 0 ]; \n         if ( data . key_press   ==   jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 's' )){ \n             return   false ; \n         }   else   { \n             return   true ; \n         } \n     }  }  var   after_if_trial   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   'This is the trial after the conditional.'  }  jsPsych . init ({ \n     timeline :   [ pre_if_trial ,   if_node ,   after_if_trial ], \n     on_finish :   function (){ jsPsych . data . displayData ();   }  });",
            "title": "Conditional timelines"
        },
        {
            "location": "/overview/trial/",
            "text": "Advanced Options for Trials\n\u00b6\n\n\nThe parameters available for a trial depend primarily on what plugin is used for the trial. However, there are several options that do not depend on the particular plugin; they are available for all trials.\n\n\nThe data parameter\n\u00b6\n\n\nThe \ndata\n parameter enables tagging the trial with additional properties. This can be useful for storing properties of the trial that are not directly apparent from the values that the plugin records. The \ndata\n parameter value should be an object that contains key-value pairs.\n\n\nA simple example is the \nFlanker Task\n. In this experiment, participants respond to the direction of an arrow, pressing a key to the left for a left-pointing arrow (<) and a key to the right for a right-pointing arrow (>). The arrow appears in the center of \nflankers\n, or arrows that the participant should ignore. Those flankers can be congruent (>>>>>) or incongruent (<<><<).\n\n\nA trial for the Flanker Task written with jsPsych might look like this:\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'<<<<<'\n,\n\n  \nchoices\n:\n \n[\n'f'\n,\n'j'\n],\n\n  \ndata\n:\n \n{\n\n    \nstimulus_type\n:\n \n'congruent'\n,\n\n    \ntarget_direction\n:\n \n'left'\n\n  \n}\n\n\n}\n\n\n\n\n\n\nNote the use of the data parameter to add a property \nstimulus_type\n with the value \ncongruent\n and a property \ntarget_direction\n with the value \nleft\n. Having these properties recorded directly in the data simplifies data analysis, making it easy to aggregate data by \nstimulus_type\n and/or \ntarget_direction\n.\n\n\nInter-trial interval\n\u00b6\n\n\nThe default inter-trial interval (ITI) in jsPsych is 0 ms. This can be adjusted at the experiment-wide level by changing the \ndefault_iti\n parameter in \njsPsych.init()\n.\n\n\nThe ITI can also be controlled at the trial level through the \npost_trial_gap\n parameter. Setting this parameter to a positive integer \nx\n will cause a blank screen to display after the trial for \nx\n milliseconds.\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'There will be a 1.5 second blank screen after this trial.'\n,\n\n  \npost_trial_gap\n:\n \n1500\n\n\n}\n\n\n\n\n\n\nThe on_start event\n\u00b6\n\n\nImmediately before a trial runs, there is an opportunity to run an arbitrary function through the \non_start\n event handler. This event handler is passed a single argument containing an \neditable\n copy of the trial parameters. This event handler can therefore be used to alter the trial based on the state of the experiment, among other uses.\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'<<<<<'\n,\n\n  \nchoices\n:\n \n[\n'f'\n,\n'j'\n],\n\n  \ndata\n:\n \n{\n\n    \nstimulus_type\n:\n \n'congruent'\n,\n\n    \ntarget_direction\n:\n \n'left'\n\n  \n},\n\n  \non_start\n:\n \nfunction\n(\ntrial\n){\n\n    \ntrial\n.\nstimulus\n \n=\n \n'<<><<'\n;\n\n    \ntrial\n.\ndata\n.\nstimulus_type\n \n=\n \n'incongruent'\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\nThe on_finish event\n\u00b6\n\n\nAfter a trial is completed, there is an opportunity to run an arbitrary function through the \non_finish\n event handler. This event handler is passed a single argument containing an \neditable\n copy of the data recorded for that trial. This event handler can therefore be used to update the state of the experiment based on the data collected or modify the data collected.\n\n\nThis can be useful to calculate new data properties that were unknowable at the start of the trial. For example, with the Flanker Task example above, the \non_finish\n event could add a new property \ncorrect\n.\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'<<<<<'\n,\n\n  \nchoices\n:\n \n[\n'f'\n,\n'j'\n],\n\n  \ndata\n:\n \n{\n\n    \nstimulus_type\n:\n \n'congruent'\n,\n\n    \ntarget_direction\n:\n \n'left'\n\n  \n},\n\n  \non_finish\n:\n \nfunction\n(\ndata\n){\n\n    \nif\n(\ndata\n.\nkey_press\n \n==\n \n70\n){\n// 70 is the numeric code for f\n\n      \ndata\n.\ncorrect\n \n=\n \ntrue\n;\n \n// can add property correct by modify data object directly\n\n    \n}\n \nelse\n \n{\n\n      \ndata\n.\ncorrect\n \n=\n \nfalse\n;\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\nThe on_load event\n\u00b6\n\n\nThe \non_load\n callback can be added to any trial. The callback will trigger once the trial has completed loading. For most plugins, this will occur once the display has been initially updated but before any user interactions or timed events (e.g., animations) have occurred.\n\n\nSample use\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'image-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'imgA.png'\n,\n\n  \non_load\n:\n \nfunction\n()\n \n{\n\n    \nconsole\n.\nlog\n(\n'The trial just finished loading.'\n);\n\n  \n}\n\n\n};\n\n\n\n\n\n\nDynamic parameters\n\u00b6\n\n\nMost plugins allow parameters to be functions. In a typical declaration of a jsPsych trial, parameters have to be known at the start of the experiment. This makes it impossible to alter the content of the trial based on the outcome of previous trials. When functions are used as parameters for a block of trials, the function is evaluated at the start of each trial, and the return value of the function is used as the parameter. This enables dynamic updating of the parameter based on data that a subject has generated.\n\n\nHere is a sketch of how this functionality could be used to display feedback to a subject in the Flanker Task.\n\n\nvar\n \ntimeline\n \n=\n \n[];\n\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'<<<<<'\n,\n\n  \nchoices\n:\n \n[\n'f'\n,\n'j'\n],\n\n  \ndata\n:\n \n{\n\n    \nstimulus_type\n:\n \n'congruent'\n,\n\n    \ntarget_direction\n:\n \n'left'\n\n  \n},\n\n  \non_finish\n:\n \nfunction\n(\ndata\n){\n\n    \nif\n(\ndata\n.\nkey_press\n \n==\n \n70\n){\n// 70 is the numeric code for f\n\n      \ndata\n.\ncorrect\n \n=\n \ntrue\n;\n \n// can add property correct by modify data object directly\n\n    \n}\n \nelse\n \n{\n\n      \ndata\n.\ncorrect\n \n=\n \nfalse\n;\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\nvar\n \nfeedback\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \nfunction\n(){\n\n    \nvar\n \nlast_trial_correct\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nlast\n(\n1\n).\nvalues\n()[\n0\n].\ncorrect\n;\n\n    \nif\n(\nlast_trial_correct\n){\n\n      \nreturn\n \n\"<p>Correct!</p>\"\n;\n\n    \n}\n \nelse\n \n{\n\n      \nreturn\n \n\"<p>Wrong.</p>\"\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\ntimeline\n.\npush\n(\ntrial\n,\n \nfeedback\n);",
            "title": "Advanced Options for Trials"
        },
        {
            "location": "/overview/trial/#advanced-options-for-trials",
            "text": "The parameters available for a trial depend primarily on what plugin is used for the trial. However, there are several options that do not depend on the particular plugin; they are available for all trials.",
            "title": "Advanced Options for Trials"
        },
        {
            "location": "/overview/trial/#the-data-parameter",
            "text": "The  data  parameter enables tagging the trial with additional properties. This can be useful for storing properties of the trial that are not directly apparent from the values that the plugin records. The  data  parameter value should be an object that contains key-value pairs.  A simple example is the  Flanker Task . In this experiment, participants respond to the direction of an arrow, pressing a key to the left for a left-pointing arrow (<) and a key to the right for a right-pointing arrow (>). The arrow appears in the center of  flankers , or arrows that the participant should ignore. Those flankers can be congruent (>>>>>) or incongruent (<<><<).  A trial for the Flanker Task written with jsPsych might look like this:  var   trial   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   '<<<<<' , \n   choices :   [ 'f' , 'j' ], \n   data :   { \n     stimulus_type :   'congruent' , \n     target_direction :   'left' \n   }  }   Note the use of the data parameter to add a property  stimulus_type  with the value  congruent  and a property  target_direction  with the value  left . Having these properties recorded directly in the data simplifies data analysis, making it easy to aggregate data by  stimulus_type  and/or  target_direction .",
            "title": "The data parameter"
        },
        {
            "location": "/overview/trial/#inter-trial-interval",
            "text": "The default inter-trial interval (ITI) in jsPsych is 0 ms. This can be adjusted at the experiment-wide level by changing the  default_iti  parameter in  jsPsych.init() .  The ITI can also be controlled at the trial level through the  post_trial_gap  parameter. Setting this parameter to a positive integer  x  will cause a blank screen to display after the trial for  x  milliseconds.  var   trial   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   'There will be a 1.5 second blank screen after this trial.' , \n   post_trial_gap :   1500  }",
            "title": "Inter-trial interval"
        },
        {
            "location": "/overview/trial/#the-on_start-event",
            "text": "Immediately before a trial runs, there is an opportunity to run an arbitrary function through the  on_start  event handler. This event handler is passed a single argument containing an  editable  copy of the trial parameters. This event handler can therefore be used to alter the trial based on the state of the experiment, among other uses.  var   trial   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   '<<<<<' , \n   choices :   [ 'f' , 'j' ], \n   data :   { \n     stimulus_type :   'congruent' , \n     target_direction :   'left' \n   }, \n   on_start :   function ( trial ){ \n     trial . stimulus   =   '<<><<' ; \n     trial . data . stimulus_type   =   'incongruent' ; \n   }  }",
            "title": "The on_start event"
        },
        {
            "location": "/overview/trial/#the-on_finish-event",
            "text": "After a trial is completed, there is an opportunity to run an arbitrary function through the  on_finish  event handler. This event handler is passed a single argument containing an  editable  copy of the data recorded for that trial. This event handler can therefore be used to update the state of the experiment based on the data collected or modify the data collected.  This can be useful to calculate new data properties that were unknowable at the start of the trial. For example, with the Flanker Task example above, the  on_finish  event could add a new property  correct .  var   trial   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   '<<<<<' , \n   choices :   [ 'f' , 'j' ], \n   data :   { \n     stimulus_type :   'congruent' , \n     target_direction :   'left' \n   }, \n   on_finish :   function ( data ){ \n     if ( data . key_press   ==   70 ){ // 70 is the numeric code for f \n       data . correct   =   true ;   // can add property correct by modify data object directly \n     }   else   { \n       data . correct   =   false ; \n     } \n   }  }",
            "title": "The on_finish event"
        },
        {
            "location": "/overview/trial/#the-on_load-event",
            "text": "The  on_load  callback can be added to any trial. The callback will trigger once the trial has completed loading. For most plugins, this will occur once the display has been initially updated but before any user interactions or timed events (e.g., animations) have occurred.",
            "title": "The on_load event"
        },
        {
            "location": "/overview/trial/#sample-use",
            "text": "var   trial   =   { \n   type :   'image-keyboard-response' , \n   stimulus :   'imgA.png' , \n   on_load :   function ()   { \n     console . log ( 'The trial just finished loading.' ); \n   }  };",
            "title": "Sample use"
        },
        {
            "location": "/overview/trial/#dynamic-parameters",
            "text": "Most plugins allow parameters to be functions. In a typical declaration of a jsPsych trial, parameters have to be known at the start of the experiment. This makes it impossible to alter the content of the trial based on the outcome of previous trials. When functions are used as parameters for a block of trials, the function is evaluated at the start of each trial, and the return value of the function is used as the parameter. This enables dynamic updating of the parameter based on data that a subject has generated.  Here is a sketch of how this functionality could be used to display feedback to a subject in the Flanker Task.  var   timeline   =   [];  var   trial   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   '<<<<<' , \n   choices :   [ 'f' , 'j' ], \n   data :   { \n     stimulus_type :   'congruent' , \n     target_direction :   'left' \n   }, \n   on_finish :   function ( data ){ \n     if ( data . key_press   ==   70 ){ // 70 is the numeric code for f \n       data . correct   =   true ;   // can add property correct by modify data object directly \n     }   else   { \n       data . correct   =   false ; \n     } \n   }  }  var   feedback   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   function (){ \n     var   last_trial_correct   =   jsPsych . data . get (). last ( 1 ). values ()[ 0 ]. correct ; \n     if ( last_trial_correct ){ \n       return   \"<p>Correct!</p>\" ; \n     }   else   { \n       return   \"<p>Wrong.</p>\" \n     } \n   }  }  timeline . push ( trial ,   feedback );",
            "title": "Dynamic parameters"
        },
        {
            "location": "/overview/data/",
            "text": "Data in jsPsych: permanent and non-permanent data.\n\u00b6\n\n\nThere are two very different kinds of data storage: data stored in \nmemory\n and data stored \npermanently\n. Data stored permanently exists even after the browser running jsPsych closes, typically in a database or in a file on a server. Data stored in memory exists only as long the browser window running jsPsych is open.\n\n\njsPsych has many features for interacting with data stored in memory, but few for permanent data storage. This is a deliberate choice, as there are dozens of ways that data could be stored permanently. jsPsych does not lock you into one particular solution. However, saving data permanently is obviously a crucial component of any experiment, and the second half of this page contains a few suggestions on how to accomplish permanent data storage.\n\n\nStoring data in jsPsych's data structure\n\u00b6\n\n\njsPsych has a centralized collection of data that is built as the experiment runs. Each trial adds to the collection, and you can access the data with various functions, including \njsPsych.data.get()\n, which returns the entire set of data.\n\n\nIn most cases, data collection will be automatic and hidden. Plugins save data on their own so it is not uncommon to have the only interaction with the data be at the end of the experiment when it is time to save it in a permanent manner (see sections below about how to do this). However, there are some situations in which you may want to interact with the data; in particular, you may want to store additional data that the plugins are not recording, like a subject identifier or condition assignment. You may also want to add data on a trial by trial basis. For example, in a Stroop paradigm you would want to label which trials are congruent and which are incongruent. These scenarios are explored below.\n\n\nAdding data to all trials\n\u00b6\n\n\nOften it is useful to add a piece of data to \nall\n of the trials in the experiment. For example, appending the subject ID to each trial. This can be done  with the \njsPsych.data.addProperties()\n function. Here is an example:\n\n\n// generate a random subject ID with 15 characters\n\n\nvar\n \nsubject_id\n \n=\n \njsPsych\n.\nrandomization\n.\nrandomID\n(\n15\n);\n\n\n\n// pick a random condition for the subject at the start of the experiment\n\n\nvar\n \ncondition_assignment\n \n=\n \njsPsych\n.\nrandomization\n.\nsampleWithoutReplacement\n([\n'conditionA'\n,\n \n'conditionB'\n,\n \n'conditionC'\n],\n \n1\n)[\n0\n];\n\n\n\n// record the condition assignment in the jsPsych data\n\n\n// this adds a property called 'subject' and a property called 'condition' to every trial\n\n\njsPsych\n.\ndata\n.\naddProperties\n({\n\n  \nsubject\n:\n \nsubject_id\n,\n\n  \ncondition\n:\n \ncondition_assignment\n\n\n});\n\n\n\n\n\n\nAdding data to a particular trial or set of trials\n\u00b6\n\n\nData can be added to a particular trial by setting the \ndata\n parameter for the trial. The \ndata\n parameter is an object of key-value pairs, and each pair is added to the data for that trial.\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'image-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'imgA.jpg'\n,\n\n  \ndata\n:\n \n{\n \nimage_type\n:\n \n'A'\n \n}\n\n\n}\n\n\n\n\n\n\nData declared in this way is also saved in the trials on any nested timelines:\n\n\nvar\n \nblock\n \n=\n \n{\n\n  \ntype\n:\n \n'image-keyboard-response'\n,\n\n  \ndata\n:\n \n{\n \nimage_type\n:\n \n'A'\n \n},\n\n  \ntimeline\n:\n \n[\n\n    \n{\nstimulus\n:\n \n'imgA1.jpg'\n},\n\n    \n{\nstimulus\n:\n \n'imgA2.jpg'\n}\n\n  \n]\n\n\n}\n\n\n\n\n\n\nAggregating and manipulating jsPsych data\n\u00b6\n\n\nWhen accessing the data with \njsPsych.data.get()\n the returned object is a special data collection object that exposes a number of methods for aggregating and manipulating the data. The full list of methods is detailed in the \ndata module documentation\n.\n\n\nHere are some examples of data collection manipulation.\n\n\nAll data generated by the image-keyboard-response plugin:\n\n\nvar\n \ndata\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\ntrial_type\n:\n \n'image-keyboard-response'\n});\n\n\n\n\n\n\nAll data generated by the categorize-image plugin with a correct response:\n\n\nvar\n \ndata\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\ntrial_type\n:\n \n'categorize-image'\n,\n \ncorrect\n:\n \ntrue\n});\n\n\n\n\n\n\nAll data with a response time between 100 and 500ms:\n\n\nvar\n \ndata\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilterCustom\n(\nfunction\n(\nx\n){\n \nreturn\n \nx\n.\nrt\n \n>=\n \n100\n \n&&\n \nx\n.\nrt\n \n<=\n500\n \n});\n\n\n\n\n\n\nApplying filters consecutively to get all trials from a particular plugin with a response time above 100ms:\n\n\nvar\n \ndata\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\ntrial_type\n:\n \n'image-keyboard-response'\n}).\nfilterCustom\n(\nfunction\n(\nx\n){\n \nreturn\n \nx\n.\nrt\n \n>\n \n100\n;\n \n});\n\n\n\n\n\n\nGetting the data from the last n trials:\n\n\nvar\n \nn\n \n=\n \n3\n;\n\n\nvar\n \ndata\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nlast\n(\nn\n);\n\n\n\n\n\n\nGetting the data from the last n trials with a correct response:\n\n\nvar\n \nn\n \n=\n \n3\n;\n\n\nvar\n \ndata\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\ncorrect\n:\n \ntrue\n}).\nlast\n(\nn\n);\n\n\n\n\n\n\nGetting the data from the first n trials:\n\n\nvar\n \nn\n \n=\n \n3\n;\n\n\nvar\n \ndata\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfirst\n(\nn\n);\n\n\n\n\n\n\nCounting the number of trials in a data collection:\n\n\nvar\n \ncount\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\ncorrect\n:\n \ntrue\n}).\ncount\n();\n\n\n\n\n\n\nSelecting all of the response times from a data collection:\n\n\nvar\n \nresponse_times\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n);\n\n\n\n\n\n\nCalculating various descriptive statistics on the response times in a data collection:\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nmean\n();\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nsum\n();\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nmin\n();\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nmax\n();\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nvariance\n();\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nsd\n();\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nmedian\n();\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\ncount\n();\n\n\n\n\n\n\nStoring data permanently as a file\n\u00b6\n\n\nThis is one of the simplest methods for saving jsPsych data on the server that is running the experiment. It involves a short PHP script and a few lines of JavaScript code. This method will save each participant's data as a CSV file on the server. \nThis method will only work if you are running on a web server with PHP installed, or a local server with PHP (e.g., \nXAMPP\n).\n\n\nThis method uses a simple PHP script to write files to the server:\n\n\n<?php\n\n\n// the $_POST[] array will contain the passed in filename and filedata\n\n\n// the directory \"data\" must be writable by the server\n\n\n$filename\n \n=\n \n\"data/\"\n.\n$_POST\n[\n'filename'\n];\n\n\n$data\n \n=\n \n$_POST\n[\n'filedata'\n];\n\n\n// write the file to disk\n\n\nfile_put_contents\n(\n$filename\n,\n \n$data\n);\n\n\n?>\n\n\n\n\n\n\nThe \nfile_put_contents($filename, $data)\n method requires permission to write new files. An easy way to solve this is to create a directory on the server that will store the data and use the chmod command to give all users write permission to that directory. In the above example, I prepend the directory \ndata/\n to the filename, and that directory is writable.\n\n\nTo use the PHP script, the JavaScript that runs jsPsych needs to send the \nfilename\n and \nfiledata\n information. This is done through an \nAJAX\n call.\n\n\nfunction\n \nsaveData\n(\nname\n,\n \ndata\n){\n\n  \nvar\n \nxhr\n \n=\n \nnew\n \nXMLHttpRequest\n();\n\n  \nxhr\n.\nopen\n(\n'POST'\n,\n \n'write_data.php'\n);\n \n// 'write_data.php' is the path to the php file described above.\n\n  \nxhr\n.\nsetRequestHeader\n(\n'Content-Type'\n,\n \n'application/json'\n);\n\n  \nxhr\n.\nsend\n(\nJSON\n.\nstringify\n({\nfilename\n:\n \nname\n,\n \nfiledata\n:\n \ndata\n}));\n\n\n}\n\n\n\n// call the saveData function after the experiment is over\n\n\njsPsych\n.\ninit\n({\n\n   \n// code to define the experiment structure would go here...\n\n   \non_finish\n:\n \nfunction\n(){\n \nsaveData\n(\n\"experiment_data.csv\"\n,\n \njsPsych\n.\ndata\n.\nget\n().\ncsv\n());\n \n}\n\n\n});\n\n\n\n\n\n\nTo use this in an actual experiment, it would be important to tie the filename to some unique identifier like a subject number. Otherwise the file may be overwritten by collecting new data.\n\n\nStoring data permanently in a MySQL database\n\u00b6\n\n\nThe ideal solution for storing data generated by jsPsych is to write it to a database.\n\n\nThere are dozens of database options. MySQL is one of the most popular \nrelational databases\n, is free to use, and relatively easy \nto install\n. This code will assume that you have a MySQL database installed on your server that is hosting the jsPsych experiment, and that your server is able to execute PHP code. If you are trying to run on a local machine, you'll need to install a local server environment like \nXAMPP\n.\n\n\nYou'll need two PHP scripts. The first is a configuration file for your database. Save it as \ndatabase_config.php\n on your server. Within this file are configuration options for the database. You'll need to change these according to how you have configured your MySQL installation.\n\n\n<?php\n\n  \n$servername\n \n=\n \n\"localhost\"\n;\n\n  \n$port\n \n=\n \n3306\n;\n\n  \n$username\n \n=\n \n\"username\"\n;\n\n  \n$password\n \n=\n \n\"password\"\n;\n\n  \n$dbname\n \n=\n \n\"database\"\n;\n\n  \n$table\n \n=\n \n\"tablename\"\n;\n\n\n?>\n\n\n\n\n\n\nThe second PHP file will write data to the database. This script reads the database to discover what columns are in the table, and then only allows data to be entered in that matches those columns. This is a security feature. Save this file as \nwrite_data.php\n on your server.\n\n\n<?php\n\n\n\n// this path should point to your configuration file.\n\n\ninclude\n(\n'database_config.php'\n);\n\n\n\n$data_array\n \n=\n \njson_decode\n(\nfile_get_contents\n(\n'php://input'\n),\n \ntrue\n);\n\n\n\ntry\n \n{\n\n  \n$conn\n \n=\n \nnew\n \nPDO\n(\n\"mysql:host=\n$servername\n;port=\n$port\n;dbname=\n$dbname\n\"\n,\n \n$username\n,\n \n$password\n);\n\n  \n$conn\n->\nsetAttribute\n(\nPDO\n::\nATTR_ERRMODE\n,\n \nPDO\n::\nERRMODE_EXCEPTION\n);\n\n  \n// First stage is to get all column names from the table and store\n\n  \n// them in $col_names array.\n\n  \n$stmt\n \n=\n \n$conn\n->\nprepare\n(\n\"SHOW COLUMNS FROM `\n$table\n`\"\n);\n\n  \n$stmt\n->\nexecute\n();\n\n  \n$col_names\n \n=\n \narray\n();\n\n  \nwhile\n(\n$row\n \n=\n \n$stmt\n->\nfetchColumn\n())\n \n{\n\n    \n$col_names\n[]\n \n=\n \n$row\n;\n\n  \n}\n\n  \n// Second stage is to create prepared SQL statement using the column\n\n  \n// names as a guide to what values might be in the JSON.\n\n  \n// If a value is missing from a particular trial, then NULL is inserted\n\n  \n$sql\n \n=\n \n\"INSERT INTO \n$table\n VALUES(\"\n;\n\n  \nfor\n(\n$i\n \n=\n \n0\n;\n \n$i\n \n<\n \ncount\n(\n$col_names\n);\n \n$i\n++\n){\n\n    \n$name\n \n=\n \n$col_names\n[\n$i\n];\n\n    \n$sql\n \n.=\n \n\":\n$name\n\"\n;\n\n    \nif\n(\n$i\n \n!=\n \ncount\n(\n$col_names\n)\n-\n1\n){\n\n      \n$sql\n \n.=\n \n\", \"\n;\n\n    \n}\n\n  \n}\n\n  \n$sql\n \n.=\n \n\");\"\n;\n\n  \n$insertstmt\n \n=\n \n$conn\n->\nprepare\n(\n$sql\n);\n\n  \nfor\n(\n$i\n=\n0\n;\n \n$i\n \n<\n \ncount\n(\n$data_array\n);\n \n$i\n++\n){\n\n    \nfor\n(\n$j\n \n=\n \n0\n;\n \n$j\n \n<\n \ncount\n(\n$col_names\n);\n \n$j\n++\n){\n\n      \n$colname\n \n=\n \n$col_names\n[\n$j\n];\n\n      \nif\n(\n!\nisset\n(\n$data_array\n[\n$i\n][\n$colname\n])){\n\n        \n$insertstmt\n->\nbindValue\n(\n\":\n$colname\n\"\n,\n \nnull\n,\n \nPDO\n::\nPARAM_NULL\n);\n\n      \n}\n \nelse\n \n{\n\n        \n$insertstmt\n->\nbindValue\n(\n\":\n$colname\n\"\n,\n \n$data_array\n[\n$i\n][\n$colname\n]);\n\n      \n}\n\n    \n}\n\n    \n$insertstmt\n->\nexecute\n();\n\n  \n}\n\n  \necho\n \n'{\"success\": true}'\n;\n\n\n}\n \ncatch\n(\nPDOException\n \n$e\n)\n \n{\n\n  \necho\n \n'{\"success\": false, \"message\": '\n \n.\n \n$e\n->\ngetMessage\n();\n\n\n}\n\n\n$conn\n \n=\n \nnull\n;\n\n\n?>\n\n\n\n\n\n\nTo send the data, we use an AJAX request in JavaScript.\n\n\nfunction\n \nsaveData\n()\n \n{\n\n  \nvar\n \nxhr\n \n=\n \nnew\n \nXMLHttpRequest\n();\n\n  \nxhr\n.\nopen\n(\n'POST'\n,\n \n'write_data.php'\n);\n \n// change 'write_data.php' to point to php script.\n\n  \nxhr\n.\nsetRequestHeader\n(\n'Content-Type'\n,\n \n'application/json'\n);\n\n  \nxhr\n.\nonload\n \n=\n \nfunction\n()\n \n{\n\n    \nif\n(\nxhr\n.\nstatus\n \n==\n \n200\n){\n\n      \nvar\n \nresponse\n \n=\n \nJSON\n.\nparse\n(\nxhr\n.\nresponseText\n);\n\n      \nconsole\n.\nlog\n(\nresponse\n.\nsuccess\n);\n\n    \n}\n\n  \n};\n\n  \nxhr\n.\nsend\n(\njsPsych\n.\ndata\n.\nget\n().\njson\n());\n\n\n}\n\n\n\n\n\n\nYou can call the \nsaveData()\n function using the \non_finish\n handler for the experiment, or by using the \ncall-function\n plugin.\n\n\n// with on_finish handler\n\n\njsPsych\n.\ninit\n({\n\n  \non_finish\n:\n \nsaveData\n\n\n});\n\n\n\n// with call-function plugin\n\n\ntimeline\n.\npush\n({\n\n  \ntype\n:\n \n'call-function'\n,\n\n  \nfunc\n:\n \nsaveData\n\n\n});",
            "title": "Data Storage, Aggregation, and Manipulation"
        },
        {
            "location": "/overview/data/#data-in-jspsych-permanent-and-non-permanent-data",
            "text": "There are two very different kinds of data storage: data stored in  memory  and data stored  permanently . Data stored permanently exists even after the browser running jsPsych closes, typically in a database or in a file on a server. Data stored in memory exists only as long the browser window running jsPsych is open.  jsPsych has many features for interacting with data stored in memory, but few for permanent data storage. This is a deliberate choice, as there are dozens of ways that data could be stored permanently. jsPsych does not lock you into one particular solution. However, saving data permanently is obviously a crucial component of any experiment, and the second half of this page contains a few suggestions on how to accomplish permanent data storage.",
            "title": "Data in jsPsych: permanent and non-permanent data."
        },
        {
            "location": "/overview/data/#storing-data-in-jspsychs-data-structure",
            "text": "jsPsych has a centralized collection of data that is built as the experiment runs. Each trial adds to the collection, and you can access the data with various functions, including  jsPsych.data.get() , which returns the entire set of data.  In most cases, data collection will be automatic and hidden. Plugins save data on their own so it is not uncommon to have the only interaction with the data be at the end of the experiment when it is time to save it in a permanent manner (see sections below about how to do this). However, there are some situations in which you may want to interact with the data; in particular, you may want to store additional data that the plugins are not recording, like a subject identifier or condition assignment. You may also want to add data on a trial by trial basis. For example, in a Stroop paradigm you would want to label which trials are congruent and which are incongruent. These scenarios are explored below.",
            "title": "Storing data in jsPsych's data structure"
        },
        {
            "location": "/overview/data/#adding-data-to-all-trials",
            "text": "Often it is useful to add a piece of data to  all  of the trials in the experiment. For example, appending the subject ID to each trial. This can be done  with the  jsPsych.data.addProperties()  function. Here is an example:  // generate a random subject ID with 15 characters  var   subject_id   =   jsPsych . randomization . randomID ( 15 );  // pick a random condition for the subject at the start of the experiment  var   condition_assignment   =   jsPsych . randomization . sampleWithoutReplacement ([ 'conditionA' ,   'conditionB' ,   'conditionC' ],   1 )[ 0 ];  // record the condition assignment in the jsPsych data  // this adds a property called 'subject' and a property called 'condition' to every trial  jsPsych . data . addProperties ({ \n   subject :   subject_id , \n   condition :   condition_assignment  });",
            "title": "Adding data to all trials"
        },
        {
            "location": "/overview/data/#adding-data-to-a-particular-trial-or-set-of-trials",
            "text": "Data can be added to a particular trial by setting the  data  parameter for the trial. The  data  parameter is an object of key-value pairs, and each pair is added to the data for that trial.  var   trial   =   { \n   type :   'image-keyboard-response' , \n   stimulus :   'imgA.jpg' , \n   data :   {   image_type :   'A'   }  }   Data declared in this way is also saved in the trials on any nested timelines:  var   block   =   { \n   type :   'image-keyboard-response' , \n   data :   {   image_type :   'A'   }, \n   timeline :   [ \n     { stimulus :   'imgA1.jpg' }, \n     { stimulus :   'imgA2.jpg' } \n   ]  }",
            "title": "Adding data to a particular trial or set of trials"
        },
        {
            "location": "/overview/data/#aggregating-and-manipulating-jspsych-data",
            "text": "When accessing the data with  jsPsych.data.get()  the returned object is a special data collection object that exposes a number of methods for aggregating and manipulating the data. The full list of methods is detailed in the  data module documentation .  Here are some examples of data collection manipulation.  All data generated by the image-keyboard-response plugin:  var   data   =   jsPsych . data . get (). filter ({ trial_type :   'image-keyboard-response' });   All data generated by the categorize-image plugin with a correct response:  var   data   =   jsPsych . data . get (). filter ({ trial_type :   'categorize-image' ,   correct :   true });   All data with a response time between 100 and 500ms:  var   data   =   jsPsych . data . get (). filterCustom ( function ( x ){   return   x . rt   >=   100   &&   x . rt   <= 500   });   Applying filters consecutively to get all trials from a particular plugin with a response time above 100ms:  var   data   =   jsPsych . data . get (). filter ({ trial_type :   'image-keyboard-response' }). filterCustom ( function ( x ){   return   x . rt   >   100 ;   });   Getting the data from the last n trials:  var   n   =   3 ;  var   data   =   jsPsych . data . get (). last ( n );   Getting the data from the last n trials with a correct response:  var   n   =   3 ;  var   data   =   jsPsych . data . get (). filter ({ correct :   true }). last ( n );   Getting the data from the first n trials:  var   n   =   3 ;  var   data   =   jsPsych . data . get (). first ( n );   Counting the number of trials in a data collection:  var   count   =   jsPsych . data . get (). filter ({ correct :   true }). count ();   Selecting all of the response times from a data collection:  var   response_times   =   jsPsych . data . get (). select ( 'rt' );   Calculating various descriptive statistics on the response times in a data collection:  jsPsych . data . get (). select ( 'rt' ). mean ();  jsPsych . data . get (). select ( 'rt' ). sum ();  jsPsych . data . get (). select ( 'rt' ). min ();  jsPsych . data . get (). select ( 'rt' ). max ();  jsPsych . data . get (). select ( 'rt' ). variance ();  jsPsych . data . get (). select ( 'rt' ). sd ();  jsPsych . data . get (). select ( 'rt' ). median ();  jsPsych . data . get (). select ( 'rt' ). count ();",
            "title": "Aggregating and manipulating jsPsych data"
        },
        {
            "location": "/overview/data/#storing-data-permanently-as-a-file",
            "text": "This is one of the simplest methods for saving jsPsych data on the server that is running the experiment. It involves a short PHP script and a few lines of JavaScript code. This method will save each participant's data as a CSV file on the server.  This method will only work if you are running on a web server with PHP installed, or a local server with PHP (e.g.,  XAMPP ).  This method uses a simple PHP script to write files to the server:  <?php  // the $_POST[] array will contain the passed in filename and filedata  // the directory \"data\" must be writable by the server  $filename   =   \"data/\" . $_POST [ 'filename' ];  $data   =   $_POST [ 'filedata' ];  // write the file to disk  file_put_contents ( $filename ,   $data );  ?>   The  file_put_contents($filename, $data)  method requires permission to write new files. An easy way to solve this is to create a directory on the server that will store the data and use the chmod command to give all users write permission to that directory. In the above example, I prepend the directory  data/  to the filename, and that directory is writable.  To use the PHP script, the JavaScript that runs jsPsych needs to send the  filename  and  filedata  information. This is done through an  AJAX  call.  function   saveData ( name ,   data ){ \n   var   xhr   =   new   XMLHttpRequest (); \n   xhr . open ( 'POST' ,   'write_data.php' );   // 'write_data.php' is the path to the php file described above. \n   xhr . setRequestHeader ( 'Content-Type' ,   'application/json' ); \n   xhr . send ( JSON . stringify ({ filename :   name ,   filedata :   data }));  }  // call the saveData function after the experiment is over  jsPsych . init ({ \n    // code to define the experiment structure would go here... \n    on_finish :   function (){   saveData ( \"experiment_data.csv\" ,   jsPsych . data . get (). csv ());   }  });   To use this in an actual experiment, it would be important to tie the filename to some unique identifier like a subject number. Otherwise the file may be overwritten by collecting new data.",
            "title": "Storing data permanently as a file"
        },
        {
            "location": "/overview/data/#storing-data-permanently-in-a-mysql-database",
            "text": "The ideal solution for storing data generated by jsPsych is to write it to a database.  There are dozens of database options. MySQL is one of the most popular  relational databases , is free to use, and relatively easy  to install . This code will assume that you have a MySQL database installed on your server that is hosting the jsPsych experiment, and that your server is able to execute PHP code. If you are trying to run on a local machine, you'll need to install a local server environment like  XAMPP .  You'll need two PHP scripts. The first is a configuration file for your database. Save it as  database_config.php  on your server. Within this file are configuration options for the database. You'll need to change these according to how you have configured your MySQL installation.  <?php \n   $servername   =   \"localhost\" ; \n   $port   =   3306 ; \n   $username   =   \"username\" ; \n   $password   =   \"password\" ; \n   $dbname   =   \"database\" ; \n   $table   =   \"tablename\" ;  ?>   The second PHP file will write data to the database. This script reads the database to discover what columns are in the table, and then only allows data to be entered in that matches those columns. This is a security feature. Save this file as  write_data.php  on your server.  <?php  // this path should point to your configuration file.  include ( 'database_config.php' );  $data_array   =   json_decode ( file_get_contents ( 'php://input' ),   true );  try   { \n   $conn   =   new   PDO ( \"mysql:host= $servername ;port= $port ;dbname= $dbname \" ,   $username ,   $password ); \n   $conn -> setAttribute ( PDO :: ATTR_ERRMODE ,   PDO :: ERRMODE_EXCEPTION ); \n   // First stage is to get all column names from the table and store \n   // them in $col_names array. \n   $stmt   =   $conn -> prepare ( \"SHOW COLUMNS FROM ` $table `\" ); \n   $stmt -> execute (); \n   $col_names   =   array (); \n   while ( $row   =   $stmt -> fetchColumn ())   { \n     $col_names []   =   $row ; \n   } \n   // Second stage is to create prepared SQL statement using the column \n   // names as a guide to what values might be in the JSON. \n   // If a value is missing from a particular trial, then NULL is inserted \n   $sql   =   \"INSERT INTO  $table  VALUES(\" ; \n   for ( $i   =   0 ;   $i   <   count ( $col_names );   $i ++ ){ \n     $name   =   $col_names [ $i ]; \n     $sql   .=   \": $name \" ; \n     if ( $i   !=   count ( $col_names ) - 1 ){ \n       $sql   .=   \", \" ; \n     } \n   } \n   $sql   .=   \");\" ; \n   $insertstmt   =   $conn -> prepare ( $sql ); \n   for ( $i = 0 ;   $i   <   count ( $data_array );   $i ++ ){ \n     for ( $j   =   0 ;   $j   <   count ( $col_names );   $j ++ ){ \n       $colname   =   $col_names [ $j ]; \n       if ( ! isset ( $data_array [ $i ][ $colname ])){ \n         $insertstmt -> bindValue ( \": $colname \" ,   null ,   PDO :: PARAM_NULL ); \n       }   else   { \n         $insertstmt -> bindValue ( \": $colname \" ,   $data_array [ $i ][ $colname ]); \n       } \n     } \n     $insertstmt -> execute (); \n   } \n   echo   '{\"success\": true}' ;  }   catch ( PDOException   $e )   { \n   echo   '{\"success\": false, \"message\": '   .   $e -> getMessage ();  }  $conn   =   null ;  ?>   To send the data, we use an AJAX request in JavaScript.  function   saveData ()   { \n   var   xhr   =   new   XMLHttpRequest (); \n   xhr . open ( 'POST' ,   'write_data.php' );   // change 'write_data.php' to point to php script. \n   xhr . setRequestHeader ( 'Content-Type' ,   'application/json' ); \n   xhr . onload   =   function ()   { \n     if ( xhr . status   ==   200 ){ \n       var   response   =   JSON . parse ( xhr . responseText ); \n       console . log ( response . success ); \n     } \n   }; \n   xhr . send ( jsPsych . data . get (). json ());  }   You can call the  saveData()  function using the  on_finish  handler for the experiment, or by using the  call-function  plugin.  // with on_finish handler  jsPsych . init ({ \n   on_finish :   saveData  });  // with call-function plugin  timeline . push ({ \n   type :   'call-function' , \n   func :   saveData  });",
            "title": "Storing data permanently in a MySQL database"
        },
        {
            "location": "/overview/callbacks/",
            "text": "Event-related callback functions\n\u00b6\n\n\njsPsych offers the ability to call arbitrary functions in response to certain events occurring, like the end of a trial or when new data is saved. This page summarizes the different opportunities for callback functions and how to specify them.\n\n\n\n\non_data_update\n\u00b6\n\n\nThe \non_data_update\n callback can be declared in the \njsPsych.init\n method. The callback triggers at the end of a data update cycle. This happens after every trial, after the on_finish (trial) and on_trial_finish events execute, allowing you to modify the data in those callbacks, and then use this callback to store the data. The function will be passed a single argument, which contains the data that was written.\n\n\nSample use\n\u00b6\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \nexp\n,\n\n  \non_data_update\n:\n \nfunction\n(\ndata\n)\n \n{\n\n    \nconsole\n.\nlog\n(\n'Just added new data. The contents of the data are: '\n+\nJSON\n.\nstringify\n(\ndata\n));\n\n  \n}\n\n\n});\n\n\n\n\n\n\n\n\non_finish (trial)\n\u00b6\n\n\nThe \non_finish\n callback can be added to any trial. The callback will trigger whenever the trial ends. The callback function will be passed a single argument, containing the data object from the trial.\n\n\nSample use\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'image-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'imgA.png'\n,\n\n  \non_finish\n:\n \nfunction\n(\ndata\n)\n \n{\n\n    \nconsole\n.\nlog\n(\n'The trial just ended.'\n);\n\n    \nconsole\n.\nlog\n(\nJSON\n.\nstringify\n(\ndata\n));\n\n  \n}\n\n\n};\n\n\n\n\n\n\n\n\non_finish (experiment)\n\u00b6\n\n\nThe \non_finish\n callback can be declared in the \njsPsych.init\n method. The callback will trigger once all trials in the experiment have been run. The method will be passed a single argument, containing all of the data generated in the experiment.\n\n\nSample use\n\u00b6\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \nexp\n,\n\n  \non_finish\n:\n \nfunction\n(\ndata\n)\n \n{\n\n    \nconsole\n.\nlog\n(\n'The experiment is over! Here is all the data: '\n+\nJSON\n.\nstringify\n(\ndata\n));\n\n  \n}\n\n\n});\n\n\n\n\n\n\n\n\non_load\n\u00b6\n\n\nThe \non_load\n callback can be added to any trial. The callback will trigger once the trial has completed loading. For most plugins, this will occur once the display has been initially updated but before any user interactions or timed events (e.g., animations) have occurred.\n\n\nSample use\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'image-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'imgA.png'\n,\n\n  \non_load\n:\n \nfunction\n()\n \n{\n\n    \nconsole\n.\nlog\n(\n'The trial just finished loading.'\n);\n\n  \n}\n\n\n};\n\n\n\n\n\n\n\n\non_start (trial)\n\u00b6\n\n\nThe \non_start\n callback can be added to any trial. The callback will trigger right before the trial begins. The callback function will be passed a single argument, containing the trial object. If any of the parameters of the trial are functions or timeline variables, these will be evaluated before \non_start\n is called, and the trial object will contain the evaluated value. The trial object is modifiable, and any changes made will affect the trial.\n\n\nSample use\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'image-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'imgA.png'\n,\n\n  \non_start\n:\n \nfunction\n(\ntrial\n)\n \n{\n\n    \nconsole\n.\nlog\n(\n'The trial is about to start.'\n);\n\n    \ntrial\n.\nstimulus\n \n=\n \n'imgB.png'\n;\n \n// this will change what stimulus is displayed in the trial\n\n  \n}\n\n\n};\n\n\n\n\n\n\n\n\non_trial_finish\n\u00b6\n\n\nThe \non_trial_finish\n callback can be declared in the \njsPsych.init\n method. The callback will trigger at the end of every trial in the experiment. If you want a callback to trigger only for the end of certain trials, use the \non_finish\n callback on the trial object. The callback function will be passed a single argument, containing the data object from the trial.\n\n\nSample use\n\u00b6\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \nexp\n,\n\n  \non_trial_finish\n:\n \nfunction\n(\ndata\n)\n \n{\n\n    \nconsole\n.\nlog\n(\n'A trial just ended.'\n);\n\n    \nconsole\n.\nlog\n(\nJSON\n.\nstringify\n(\ndata\n));\n\n  \n}\n\n\n});\n\n\n\n\n\n\n\n\non_trial_start\n\u00b6\n\n\nThe \non_trial_start\n callback can be declared in the \njsPsych.init\n method. The callback will trigger at the start of every trial in the experiment. The function receives a single argument: a modifiable copy of the trial object that will be used to run the next trial. Changes can be made to this object to alter the parameters of the upcoming trial.\n\n\nSample use\n\u00b6\n\n\nvar\n \ncurrent_score\n \n=\n \n0\n;\n \n// a variable that is updated throughout the experiment to keep track of the current score.\n\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \nexp\n,\n\n  \non_trial_start\n:\n \nfunction\n(\ntrial\n)\n \n{\n\n    \ntrial\n.\ndata\n.\nscore_at_start_of_trial\n \n=\n \ncurrent_score\n;\n\n    \nconsole\n.\nlog\n(\n'A trial just started.'\n);\n\n  \n}\n\n\n});",
            "title": "Event-related Callback Functions"
        },
        {
            "location": "/overview/callbacks/#event-related-callback-functions",
            "text": "jsPsych offers the ability to call arbitrary functions in response to certain events occurring, like the end of a trial or when new data is saved. This page summarizes the different opportunities for callback functions and how to specify them.",
            "title": "Event-related callback functions"
        },
        {
            "location": "/overview/callbacks/#on_data_update",
            "text": "The  on_data_update  callback can be declared in the  jsPsych.init  method. The callback triggers at the end of a data update cycle. This happens after every trial, after the on_finish (trial) and on_trial_finish events execute, allowing you to modify the data in those callbacks, and then use this callback to store the data. The function will be passed a single argument, which contains the data that was written.",
            "title": "on_data_update"
        },
        {
            "location": "/overview/callbacks/#sample-use",
            "text": "jsPsych . init ({ \n   timeline :   exp , \n   on_data_update :   function ( data )   { \n     console . log ( 'Just added new data. The contents of the data are: ' + JSON . stringify ( data )); \n   }  });",
            "title": "Sample use"
        },
        {
            "location": "/overview/callbacks/#on_finish-trial",
            "text": "The  on_finish  callback can be added to any trial. The callback will trigger whenever the trial ends. The callback function will be passed a single argument, containing the data object from the trial.",
            "title": "on_finish (trial)"
        },
        {
            "location": "/overview/callbacks/#sample-use_1",
            "text": "var   trial   =   { \n   type :   'image-keyboard-response' , \n   stimulus :   'imgA.png' , \n   on_finish :   function ( data )   { \n     console . log ( 'The trial just ended.' ); \n     console . log ( JSON . stringify ( data )); \n   }  };",
            "title": "Sample use"
        },
        {
            "location": "/overview/callbacks/#on_finish-experiment",
            "text": "The  on_finish  callback can be declared in the  jsPsych.init  method. The callback will trigger once all trials in the experiment have been run. The method will be passed a single argument, containing all of the data generated in the experiment.",
            "title": "on_finish (experiment)"
        },
        {
            "location": "/overview/callbacks/#sample-use_2",
            "text": "jsPsych . init ({ \n   timeline :   exp , \n   on_finish :   function ( data )   { \n     console . log ( 'The experiment is over! Here is all the data: ' + JSON . stringify ( data )); \n   }  });",
            "title": "Sample use"
        },
        {
            "location": "/overview/callbacks/#on_load",
            "text": "The  on_load  callback can be added to any trial. The callback will trigger once the trial has completed loading. For most plugins, this will occur once the display has been initially updated but before any user interactions or timed events (e.g., animations) have occurred.",
            "title": "on_load"
        },
        {
            "location": "/overview/callbacks/#sample-use_3",
            "text": "var   trial   =   { \n   type :   'image-keyboard-response' , \n   stimulus :   'imgA.png' , \n   on_load :   function ()   { \n     console . log ( 'The trial just finished loading.' ); \n   }  };",
            "title": "Sample use"
        },
        {
            "location": "/overview/callbacks/#on_start-trial",
            "text": "The  on_start  callback can be added to any trial. The callback will trigger right before the trial begins. The callback function will be passed a single argument, containing the trial object. If any of the parameters of the trial are functions or timeline variables, these will be evaluated before  on_start  is called, and the trial object will contain the evaluated value. The trial object is modifiable, and any changes made will affect the trial.",
            "title": "on_start (trial)"
        },
        {
            "location": "/overview/callbacks/#sample-use_4",
            "text": "var   trial   =   { \n   type :   'image-keyboard-response' , \n   stimulus :   'imgA.png' , \n   on_start :   function ( trial )   { \n     console . log ( 'The trial is about to start.' ); \n     trial . stimulus   =   'imgB.png' ;   // this will change what stimulus is displayed in the trial \n   }  };",
            "title": "Sample use"
        },
        {
            "location": "/overview/callbacks/#on_trial_finish",
            "text": "The  on_trial_finish  callback can be declared in the  jsPsych.init  method. The callback will trigger at the end of every trial in the experiment. If you want a callback to trigger only for the end of certain trials, use the  on_finish  callback on the trial object. The callback function will be passed a single argument, containing the data object from the trial.",
            "title": "on_trial_finish"
        },
        {
            "location": "/overview/callbacks/#sample-use_5",
            "text": "jsPsych . init ({ \n   timeline :   exp , \n   on_trial_finish :   function ( data )   { \n     console . log ( 'A trial just ended.' ); \n     console . log ( JSON . stringify ( data )); \n   }  });",
            "title": "Sample use"
        },
        {
            "location": "/overview/callbacks/#on_trial_start",
            "text": "The  on_trial_start  callback can be declared in the  jsPsych.init  method. The callback will trigger at the start of every trial in the experiment. The function receives a single argument: a modifiable copy of the trial object that will be used to run the next trial. Changes can be made to this object to alter the parameters of the upcoming trial.",
            "title": "on_trial_start"
        },
        {
            "location": "/overview/callbacks/#sample-use_6",
            "text": "var   current_score   =   0 ;   // a variable that is updated throughout the experiment to keep track of the current score.  jsPsych . init ({ \n   timeline :   exp , \n   on_trial_start :   function ( trial )   { \n     trial . data . score_at_start_of_trial   =   current_score ; \n     console . log ( 'A trial just started.' ); \n   }  });",
            "title": "Sample use"
        },
        {
            "location": "/overview/record-browser-interactions/",
            "text": "Record browser interactions\n\u00b6\n\n\nParticipants in an online experiment have the freedom to multitask while performing an experiment. jsPsych automatically records information about when the user clicks on a window that is not the experiment, and about when the user exits full screen mode if the experiment is running in full screen mode. This data is stored separately from the main experiment data, and can be accessed with \njsPsych.data.getInteractionData()\n.\n\n\nEach time the user leaves the experiment window, returns to the experiment window, exits full screen mode, or enters full screen mode, the event is recorded in the interaction data. Each event has the following structure.\n\n\n{\n\n  \nevent\n:\n \n'focus'\n,\n \n// 'focus' or 'blur' or 'fullscreenenter' or 'fullscreenexit'\n\n  \ntrial\n:\n \n12\n,\n \n// the index of the active trial when the event happened\n\n  \ntime\n:\n \n1240543\n \n// time in ms since the start of the experiment\n\n\n}\n\n\n\n\n\n\nYou can specify a custom function, in the jsPsych.init() method, that is called whenever one of these events occurs\n\n\njsPsych\n.\ninit\n({\n\n  \non_interaction_data_update\n:\n \nfunction\n(\ndata\n)\n \n{\n\n    \nconsole\n.\nlog\n(\nJSON\n.\nstringify\n(\ndata\n))\n\n  \n}\n\n\n});",
            "title": "Record Browser Interactions"
        },
        {
            "location": "/overview/record-browser-interactions/#record-browser-interactions",
            "text": "Participants in an online experiment have the freedom to multitask while performing an experiment. jsPsych automatically records information about when the user clicks on a window that is not the experiment, and about when the user exits full screen mode if the experiment is running in full screen mode. This data is stored separately from the main experiment data, and can be accessed with  jsPsych.data.getInteractionData() .  Each time the user leaves the experiment window, returns to the experiment window, exits full screen mode, or enters full screen mode, the event is recorded in the interaction data. Each event has the following structure.  { \n   event :   'focus' ,   // 'focus' or 'blur' or 'fullscreenenter' or 'fullscreenexit' \n   trial :   12 ,   // the index of the active trial when the event happened \n   time :   1240543   // time in ms since the start of the experiment  }   You can specify a custom function, in the jsPsych.init() method, that is called whenever one of these events occurs  jsPsych . init ({ \n   on_interaction_data_update :   function ( data )   { \n     console . log ( JSON . stringify ( data )) \n   }  });",
            "title": "Record browser interactions"
        },
        {
            "location": "/overview/media-preloading/",
            "text": "Media Preloading\n\u00b6\n\n\nIf an experiment uses images or audio files as stimuli, it is a good idea to preload the files before running the experiment. Preloading files means that the subject's browser will download all of the files and store them in local memory on the subject's computer. This is important because loading an image file is much faster if it is already in memory on the subject's computer. Without preloading, there will be noticeable delays in the display of media, which will affect any timing measurements (such as how long an image is displayed, or a subject's response time since first viewing an image).\n\n\nAutomatic Preloading\n\u00b6\n\n\njsPsych will automatically preload audio and image files that are used as parameters for the standard set of plugins.\n\n\n// the image file img/file1.png is\n\n\n// automatically preloaded before the experiment begins\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'image-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'img/file1.png'\n\n\n}\n\n\n\n// the sound file is also preloaded automatically\n\n\nvar\n \nsound_trial\n \n=\n \n{\n\n    \ntype\n:\n \n'audio-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'audio/hello.mp3'\n\n\n}\n\n\n\njsPsych\n.\ninit\n({\n\n    \ntimeline\n:\n \n[\ntrial\n]\n\n\n});\n\n\n\n\n\n\nManual preloading\n\u00b6\n\n\nIf you are using images or audio in your experiment but they are not being passed directly as parameters to the trials (e.g., because you are using functions as parameters that return the image or audio), then you can manually specify the files to preload.\n\n\nYou can specify an array of image files (\npreload_images\n) and an array of audio files (\npreload_audio\n) for preloading in the \njsPsych.init()\n method. These files will load before the experiment starts.\n\n\n// this trial will not preload the images, because the image file is being used\n\n\n// in an HTML string\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'<img src=\"img/file1.png\"></img>'\n,\n\n\n}\n\n\n\nvar\n \naudio_trial\n \n=\n \n{\n\n    \ntype\n:\n \n'audio-keyboard-response'\n,\n\n    \nstimulus\n:\n \nfunction\n()\n \n{\n \nreturn\n \n'audio/foo.mp3'\n \n}\n\n\n}\n\n\n\n// an array of paths to images that need to be loaded\n\n\nvar\n \nimages\n \n=\n \n[\n'img/file1.png'\n];\n\n\nvar\n \naudio\n \n=\n \n[\n'audio/foo.mp3'\n];\n\n\n\njsPsych\n.\ninit\n({\n\n    \ntimeline\n:\n \n[\ntrial\n],\n\n    \npreload_audio\n:\n \naudio\n,\n\n    \npreload_images\n:\n \nimages\n\n\n});\n\n\n\n\n\n\nPreloading progress bar\n\u00b6\n\n\nBy default, jsPsych will display a small progress bar while files are being preloaded. This progress bar represents all files that are being automatically preloaded or preloaded from the \npreload_audio\n and \npreload_images\n arrays. You may wish to turn this off if you are only loading a small number of files, as it will disappear so quickly that the participant may be confused about what it was. You can control whether the preloading progress bar appears by setting the \nshow_preload_progress_bar\n parameter in \njsPsych.init()\n\n\njsPsych\n.\ninit\n({\n\n    \ntimeline\n:\n \ntimeline\n,\n\n    \nshow_preload_progress_bar\n:\n \nfalse\n \n// hide preload progress bar\n\n\n});",
            "title": "Media Preloading"
        },
        {
            "location": "/overview/media-preloading/#media-preloading",
            "text": "If an experiment uses images or audio files as stimuli, it is a good idea to preload the files before running the experiment. Preloading files means that the subject's browser will download all of the files and store them in local memory on the subject's computer. This is important because loading an image file is much faster if it is already in memory on the subject's computer. Without preloading, there will be noticeable delays in the display of media, which will affect any timing measurements (such as how long an image is displayed, or a subject's response time since first viewing an image).",
            "title": "Media Preloading"
        },
        {
            "location": "/overview/media-preloading/#automatic-preloading",
            "text": "jsPsych will automatically preload audio and image files that are used as parameters for the standard set of plugins.  // the image file img/file1.png is  // automatically preloaded before the experiment begins  var   trial   =   { \n     type :   'image-keyboard-response' , \n     stimulus :   'img/file1.png'  }  // the sound file is also preloaded automatically  var   sound_trial   =   { \n     type :   'audio-keyboard-response' , \n     stimulus :   'audio/hello.mp3'  }  jsPsych . init ({ \n     timeline :   [ trial ]  });",
            "title": "Automatic Preloading"
        },
        {
            "location": "/overview/media-preloading/#manual-preloading",
            "text": "If you are using images or audio in your experiment but they are not being passed directly as parameters to the trials (e.g., because you are using functions as parameters that return the image or audio), then you can manually specify the files to preload.  You can specify an array of image files ( preload_images ) and an array of audio files ( preload_audio ) for preloading in the  jsPsych.init()  method. These files will load before the experiment starts.  // this trial will not preload the images, because the image file is being used  // in an HTML string  var   trial   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   '<img src=\"img/file1.png\"></img>' ,  }  var   audio_trial   =   { \n     type :   'audio-keyboard-response' , \n     stimulus :   function ()   {   return   'audio/foo.mp3'   }  }  // an array of paths to images that need to be loaded  var   images   =   [ 'img/file1.png' ];  var   audio   =   [ 'audio/foo.mp3' ];  jsPsych . init ({ \n     timeline :   [ trial ], \n     preload_audio :   audio , \n     preload_images :   images  });",
            "title": "Manual preloading"
        },
        {
            "location": "/overview/media-preloading/#preloading-progress-bar",
            "text": "By default, jsPsych will display a small progress bar while files are being preloaded. This progress bar represents all files that are being automatically preloaded or preloaded from the  preload_audio  and  preload_images  arrays. You may wish to turn this off if you are only loading a small number of files, as it will disappear so quickly that the participant may be confused about what it was. You can control whether the preloading progress bar appears by setting the  show_preload_progress_bar  parameter in  jsPsych.init()  jsPsych . init ({ \n     timeline :   timeline , \n     show_preload_progress_bar :   false   // hide preload progress bar  });",
            "title": "Preloading progress bar"
        },
        {
            "location": "/overview/fullscreen/",
            "text": "Fullscreen Experiments\n\u00b6\n\n\nYou can run your experiment in fullscreen mode by using the jspsych-fullscreen plugin.\n\n\nvar\n \ntimeline\n \n=\n \n[];\n\n\n\ntimeline\n.\npush\n({\n\n  \ntype\n:\n \n'fullscreen'\n,\n\n  \nfullscreen_mode\n:\n \ntrue\n\n\n});\n\n\n\ntimeline\n.\npush\n({\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'This trial will be in fullscreen mode.'\n\n\n});\n\n\n\n// exit fullscreen mode\n\n\ntimeline\n.\npush\n({\n\n  \ntype\n:\n \n'fullscreen'\n,\n\n  \nfullscreen_mode\n:\n \nfalse\n\n\n});\n\n\n\ntimeline\n.\npush\n({\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'This trial will NOT be in fullscreen mode.'\n\n\n});\n\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \ntimeline\n\n\n});\n\n\n\n\n\n\nFor security reasons, web browsers require that users initiate an action to launch fullscreen mode. The fullscreen plugin displays a button that the user must click to change the display to fullscreen.\n\n\nSafari does not support keyboard input when the browser is in fullscreen mode. Therefore, the function will not launch fullscreen mode on Safari. The experiment will ignore any trials using the fullscreen plugin in Safari.",
            "title": "Fullscreen Experiments"
        },
        {
            "location": "/overview/fullscreen/#fullscreen-experiments",
            "text": "You can run your experiment in fullscreen mode by using the jspsych-fullscreen plugin.  var   timeline   =   [];  timeline . push ({ \n   type :   'fullscreen' , \n   fullscreen_mode :   true  });  timeline . push ({ \n   type :   'html-keyboard-response' , \n   stimulus :   'This trial will be in fullscreen mode.'  });  // exit fullscreen mode  timeline . push ({ \n   type :   'fullscreen' , \n   fullscreen_mode :   false  });  timeline . push ({ \n   type :   'html-keyboard-response' , \n   stimulus :   'This trial will NOT be in fullscreen mode.'  });  jsPsych . init ({ \n   timeline :   timeline  });   For security reasons, web browsers require that users initiate an action to launch fullscreen mode. The fullscreen plugin displays a button that the user must click to change the display to fullscreen.  Safari does not support keyboard input when the browser is in fullscreen mode. Therefore, the function will not launch fullscreen mode on Safari. The experiment will ignore any trials using the fullscreen plugin in Safari.",
            "title": "Fullscreen Experiments"
        },
        {
            "location": "/overview/exclude-browser/",
            "text": "Exclude Participants Based on Browser Features\n\u00b6\n\n\nOnline subjects will use many different kinds of browsers. Depending on the experiment, it may be important to specify a minimum feature set of the browser. jsPsych makes this straightforward. Simply specify certain exclusion criteria in the \njsPsych.init\n method call. If a subject's browser doesn't meet the criteria the experiment will not start and the subject will see a message explaining the problem. For size restrictions the subject will see a message that displays the current size of their browser window and the minimum size needed to start the experiment, giving the subject an opportunity to enlarge the browser window to continue.\n\n\nCurrent exclusion options:\n\n Minimum browser width & height\n\n Support for the WebAudio API\n\n\nExamples\n\u00b6\n\n\nExclude browsers that are not at least 800x600 pixels\n\u00b6\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \nexp\n,\n\n  \nexclusions\n:\n \n{\n\n    \nmin_width\n:\n \n800\n,\n\n    \nmin_height\n:\n \n600\n\n  \n}\n\n\n});\n\n\n\n\n\n\nExclude browsers that do not have access to the WebAudio API\n\u00b6\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \nexp\n,\n\n  \nexclusions\n:\n \n{\n\n    \naudio\n:\n \ntrue\n\n  \n}\n\n\n});",
            "title": "Exclude Participants Based on Browser Features"
        },
        {
            "location": "/overview/exclude-browser/#exclude-participants-based-on-browser-features",
            "text": "Online subjects will use many different kinds of browsers. Depending on the experiment, it may be important to specify a minimum feature set of the browser. jsPsych makes this straightforward. Simply specify certain exclusion criteria in the  jsPsych.init  method call. If a subject's browser doesn't meet the criteria the experiment will not start and the subject will see a message explaining the problem. For size restrictions the subject will see a message that displays the current size of their browser window and the minimum size needed to start the experiment, giving the subject an opportunity to enlarge the browser window to continue.  Current exclusion options:  Minimum browser width & height  Support for the WebAudio API",
            "title": "Exclude Participants Based on Browser Features"
        },
        {
            "location": "/overview/exclude-browser/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/overview/exclude-browser/#exclude-browsers-that-are-not-at-least-800x600-pixels",
            "text": "jsPsych . init ({ \n   timeline :   exp , \n   exclusions :   { \n     min_width :   800 , \n     min_height :   600 \n   }  });",
            "title": "Exclude browsers that are not at least 800x600 pixels"
        },
        {
            "location": "/overview/exclude-browser/#exclude-browsers-that-do-not-have-access-to-the-webaudio-api",
            "text": "jsPsych . init ({ \n   timeline :   exp , \n   exclusions :   { \n     audio :   true \n   }  });",
            "title": "Exclude browsers that do not have access to the WebAudio API"
        },
        {
            "location": "/overview/progress-bar/",
            "text": "Automatic Progress Bar\n\u00b6\n\n\njsPsych can show a progress bar at the top of the experiment page indicating the subject's overall completion progress. The progress bar is rendered outside the jsPsych display element, and it requires the \njspsych.css\n file to be loaded on the page. As of version 6.0, the progress bar looks like this:\n\n\n\n\nTo show the progress bar, set the \nshow_progress_bar\n option in \njsPsych.init\n to \ntrue\n:\n\n\njsPsych\n.\ninit\n({\n\n    \ntimeline\n:\n \nexp\n,\n\n    \nshow_progress_bar\n:\n \ntrue\n\n\n});\n\n\n\n\n\n\nThe progress bar updates after every node on the top-level timeline updates. This avoids distracting updates in the middle of trials that are composed of multiple plugins, or confusing updates due to looping or conditional structures that may or may not execute depending on the actions of the subject. This also allows some flexibility for the programmer; by nesting timelines in a deliberate manner, the timing of progress bar updates can be controlled.\n\n\nManual Control\n\u00b6\n\n\nThe progress bar can also be manually controlled using the function \njsPsych.setProgressBar()\n. This function takes a numeric value between 0 and 1, representing the proportion of the progress bar to fill.\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'Almost done...'\n,\n\n    \non_finish\n:\n \nfunction\n(){\n\n        \njsPsych\n.\nsetProgressBar\n(\n0.85\n);\n \n// set progress bar to 85% full.\n\n    \n}\n\n\n}\n\n\n\n\n\n\nIf you are going to use manual progress bar control, you may want to disable the automatic progress bar updates by setting the \nauto_update_progress_bar\n property in \njsPsych.init()\n to \nfalse\n.\n\n\njsPsych\n.\ninit\n({\n\n    \ntimeline\n:\n \nexp\n,\n\n    \nshow_progress_bar\n:\n \ntrue\n,\n\n    \nauto_update_progress_bar\n:\n \nfalse\n\n\n});",
            "title": "Automatic Progress Bar"
        },
        {
            "location": "/overview/progress-bar/#automatic-progress-bar",
            "text": "jsPsych can show a progress bar at the top of the experiment page indicating the subject's overall completion progress. The progress bar is rendered outside the jsPsych display element, and it requires the  jspsych.css  file to be loaded on the page. As of version 6.0, the progress bar looks like this:   To show the progress bar, set the  show_progress_bar  option in  jsPsych.init  to  true :  jsPsych . init ({ \n     timeline :   exp , \n     show_progress_bar :   true  });   The progress bar updates after every node on the top-level timeline updates. This avoids distracting updates in the middle of trials that are composed of multiple plugins, or confusing updates due to looping or conditional structures that may or may not execute depending on the actions of the subject. This also allows some flexibility for the programmer; by nesting timelines in a deliberate manner, the timing of progress bar updates can be controlled.",
            "title": "Automatic Progress Bar"
        },
        {
            "location": "/overview/progress-bar/#manual-control",
            "text": "The progress bar can also be manually controlled using the function  jsPsych.setProgressBar() . This function takes a numeric value between 0 and 1, representing the proportion of the progress bar to fill.  var   trial   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   'Almost done...' , \n     on_finish :   function (){ \n         jsPsych . setProgressBar ( 0.85 );   // set progress bar to 85% full. \n     }  }   If you are going to use manual progress bar control, you may want to disable the automatic progress bar updates by setting the  auto_update_progress_bar  property in  jsPsych.init()  to  false .  jsPsych . init ({ \n     timeline :   exp , \n     show_progress_bar :   true , \n     auto_update_progress_bar :   false  });",
            "title": "Manual Control"
        },
        {
            "location": "/overview/mturk/",
            "text": "Integrating with Mechanical Turk\n\u00b6\n\n\nA common use of jsPsych is to build an online experiment and find subjects using \nMechanical Turk\n. Once an experiment is available through a web server and data is being \nsaved on the server\n, connecting the experiment with Mechanical Turk takes only a few additional steps. jsPsych has some built-in functionality to assist with this process. \n\n\nThe jsPsych.turk module\n\u00b6\n\n\nThe \njsPsych.turk\n module contains functions that are relevant for experiments running on Mechanical Turk.\n\n\nCreating an advertisement page\n\u00b6\n\n\nWhen potential subjects view your experiment on Mechanical Turk, they will be able to see a single webpage before deciding whether or not to accept the HIT (start the experiment). This first page is often used as an advertisement for the experiment, similar to posting a flier in a department hallway. The important thing to remember about this page is that potential subjects will be able to interact with it even if they haven't accepted the HIT. Therefore, it can be useful to change the content of the page depending on whether the HIT has been accepted or not. This is relatively easy to do using jsPsych and jQuery:\n\n\n<\ndiv\n \nid\n=\n\"experiment_link\"\n>\nYou must accept the HIT to begin the experiment\n</\ndiv\n>\n.\n\n\n<\nscript\n>\n\n\n// jsPsych has a method turkInfo() which can determine whether or not the\n\n\n// HIT has been accepted.\n\n\nvar\n \nturkInfo\n \n=\n \njsPsych\n.\nturkInfo\n();\n\n\n\n// turkInfo.previewMode is true in two cases: when the HIT has not been\n\n\n// accepted yet OR when the page is viewed outside of mechanical turk.\n\n\n// The second property, outsideTurk, is true when the page is viewed\n\n\n// outside of mechanical turk, so together, the statement will be true\n\n\n// only when in Turk and when the HIT is not accepted yet.\n\n\nif\n(\nturkInfo\n.\npreviewMode\n \n&&\n \n!\nturkInfo\n.\noutsideTurk\n)\n \n{\n\n  \n$\n(\n'#turkInfo'\n).\nhtml\n(\n'<a href=\"link_to_experiment.html\" target=\"_blank\">Click Here to Start Experiment</a>'\n);\n\n\n}\n\n\n</\nscript\n>\n\n\n\n\n\n\nOne important issue with advertisement pages is that they must be served using the https protocol, which requires having an SSL certificate on the web server hosting the page. Instructions for how to do this vary depending on what kind of server you are using, so the best advice is to simply Google for instructions on how to acquire and install an SSL certificate on your particular server.\n\n\nGetting the worker ID\n\u00b6\n\n\nEvery account on Mechanical Turk is given a unique identification string. Recording this ID is a useful way to keep track of who is doing your experiment. In particular, while Turk has built in tools for preventing the same person from doing a HIT more than once, there may be cases where you don't want subjects to complete related experiments. If you store the worker ID of every person who starts an experiment in a database, then you can exclude people by running a query on the database to check for the ID. jsPsych can get the workerID, assignmentID, and hitID with the turkInfo method.\n\n\nvar\n \nturkInfo\n \n=\n \njsPsych\n.\nturk\n.\nturkInfo\n();\n\n\n\n// workerID\n\n\nturkInfo\n.\nworkerId\n\n\n\n// hitID\n\n\nturkInfo\n.\nhitId\n\n\n\n// assignmentID\n\n\nturkInfo\n.\nassignmentId\n\n\n\n\n\n\nRecording the workerId at the start of the experiment is also a good way to track dropouts.\n\n\nSubmitting results to Mechanical Turk\n\u00b6\n\n\nIf you are running a HIT on Mechanical Turk using the ExternalQuestion template, then you'll need to provide a way for subjects to indicate that they have completed the HIT. (If you are using another template, then the template will provide this code for you). jsPSych makes this a relatively easy task. A common strategy for external HITs is to display an HTML page on the Mechanical Turk website that links to your HIT. Subjects click the link, which opens the actual experiment content in a new browser window or tab, allowing the experiment to take up the whole browser window instead of just the iframe that displays content on Mechanical Turk.\n\n\nOn this page, you might include a submit button for workers to indicate that they have finished the experiment. The page would look something like this:\n\n\n<\np\n>\nEnter the code you were given:\n</\np\n>\n\n\n<\ninput\n \ntype\n=\n\"text\"\n \nid\n=\n\"code\"\n></\ninput\n>\n\n\n<\nbutton\n \nonclick\n=\n\"sendData();\"\n>\nSubmit HIT\n</\nbutton\n>\n\n\n\n<\nscript\n>\n\n\nfunction\n \nsendData\n()\n \n{\n\n  \njsPsych\n.\nturk\n.\nsubmitToTurk\n({\n\n    \ncode\n:\n \ndocument\n.\ngetElementById\n(\n'code'\n).\nvalue\n\n  \n});\n\n\n}\n\n\n</\nscript\n>\n\n\n\n\n\n\nWhen workers click the button, the contents of the \ncode\n text field will be sent to Mechanical Turk, and you'll be able to view the subjects and the codes that they entered in the Mechanical Turk GUI. You can then approve or reject work using the Mechanical Turk website.\n\n\nLimitations\n\u00b6\n\n\njsPsych is not designed to communicate with the Mechanical Turk API in a comprehensive manner. If you are looking for software to help you post and manage HITs, then you may want to look at \nPsiTurk\n. jsPsych and PsiTurk complement each other nicely, and there is \nan example of combining the two platforms\n on PsiTurk's experiment exchange.",
            "title": "Integrating with Mechanical Turk"
        },
        {
            "location": "/overview/mturk/#integrating-with-mechanical-turk",
            "text": "A common use of jsPsych is to build an online experiment and find subjects using  Mechanical Turk . Once an experiment is available through a web server and data is being  saved on the server , connecting the experiment with Mechanical Turk takes only a few additional steps. jsPsych has some built-in functionality to assist with this process.",
            "title": "Integrating with Mechanical Turk"
        },
        {
            "location": "/overview/mturk/#the-jspsychturk-module",
            "text": "The  jsPsych.turk  module contains functions that are relevant for experiments running on Mechanical Turk.",
            "title": "The jsPsych.turk module"
        },
        {
            "location": "/overview/mturk/#creating-an-advertisement-page",
            "text": "When potential subjects view your experiment on Mechanical Turk, they will be able to see a single webpage before deciding whether or not to accept the HIT (start the experiment). This first page is often used as an advertisement for the experiment, similar to posting a flier in a department hallway. The important thing to remember about this page is that potential subjects will be able to interact with it even if they haven't accepted the HIT. Therefore, it can be useful to change the content of the page depending on whether the HIT has been accepted or not. This is relatively easy to do using jsPsych and jQuery:  < div   id = \"experiment_link\" > You must accept the HIT to begin the experiment </ div > . < script >  // jsPsych has a method turkInfo() which can determine whether or not the  // HIT has been accepted.  var   turkInfo   =   jsPsych . turkInfo ();  // turkInfo.previewMode is true in two cases: when the HIT has not been  // accepted yet OR when the page is viewed outside of mechanical turk.  // The second property, outsideTurk, is true when the page is viewed  // outside of mechanical turk, so together, the statement will be true  // only when in Turk and when the HIT is not accepted yet.  if ( turkInfo . previewMode   &&   ! turkInfo . outsideTurk )   { \n   $ ( '#turkInfo' ). html ( '<a href=\"link_to_experiment.html\" target=\"_blank\">Click Here to Start Experiment</a>' );  }  </ script >   One important issue with advertisement pages is that they must be served using the https protocol, which requires having an SSL certificate on the web server hosting the page. Instructions for how to do this vary depending on what kind of server you are using, so the best advice is to simply Google for instructions on how to acquire and install an SSL certificate on your particular server.",
            "title": "Creating an advertisement page"
        },
        {
            "location": "/overview/mturk/#getting-the-worker-id",
            "text": "Every account on Mechanical Turk is given a unique identification string. Recording this ID is a useful way to keep track of who is doing your experiment. In particular, while Turk has built in tools for preventing the same person from doing a HIT more than once, there may be cases where you don't want subjects to complete related experiments. If you store the worker ID of every person who starts an experiment in a database, then you can exclude people by running a query on the database to check for the ID. jsPsych can get the workerID, assignmentID, and hitID with the turkInfo method.  var   turkInfo   =   jsPsych . turk . turkInfo ();  // workerID  turkInfo . workerId  // hitID  turkInfo . hitId  // assignmentID  turkInfo . assignmentId   Recording the workerId at the start of the experiment is also a good way to track dropouts.",
            "title": "Getting the worker ID"
        },
        {
            "location": "/overview/mturk/#submitting-results-to-mechanical-turk",
            "text": "If you are running a HIT on Mechanical Turk using the ExternalQuestion template, then you'll need to provide a way for subjects to indicate that they have completed the HIT. (If you are using another template, then the template will provide this code for you). jsPSych makes this a relatively easy task. A common strategy for external HITs is to display an HTML page on the Mechanical Turk website that links to your HIT. Subjects click the link, which opens the actual experiment content in a new browser window or tab, allowing the experiment to take up the whole browser window instead of just the iframe that displays content on Mechanical Turk.  On this page, you might include a submit button for workers to indicate that they have finished the experiment. The page would look something like this:  < p > Enter the code you were given: </ p >  < input   type = \"text\"   id = \"code\" ></ input >  < button   onclick = \"sendData();\" > Submit HIT </ button >  < script >  function   sendData ()   { \n   jsPsych . turk . submitToTurk ({ \n     code :   document . getElementById ( 'code' ). value \n   });  }  </ script >   When workers click the button, the contents of the  code  text field will be sent to Mechanical Turk, and you'll be able to view the subjects and the codes that they entered in the Mechanical Turk GUI. You can then approve or reject work using the Mechanical Turk website.",
            "title": "Submitting results to Mechanical Turk"
        },
        {
            "location": "/overview/mturk/#limitations",
            "text": "jsPsych is not designed to communicate with the Mechanical Turk API in a comprehensive manner. If you are looking for software to help you post and manage HITs, then you may want to look at  PsiTurk . jsPsych and PsiTurk complement each other nicely, and there is  an example of combining the two platforms  on PsiTurk's experiment exchange.",
            "title": "Limitations"
        },
        {
            "location": "/core_library/jspsych-core/",
            "text": "The jsPsych core library\n\u00b6\n\n\n\n\njsPsych.addNodeToEndOfTimeline\n\u00b6\n\n\njsPsych.addNodeToEndOfTimeline(node_parameters)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnode_parameters\n\n\nobject\n\n\nAn object defining a timeline. It must have, at a minimum, a \ntimeline\n parameter with a valid timeline array as the value for that parameter.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nNone.\n\n\nDescription\n\u00b6\n\n\nAdds the timeline to the end of the experiment.\n\n\nExample\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'This is a new trial.'\n\n\n}\n\n\n\nvar\n \nnew_timeline\n \n=\n \n{\n\n  \ntimeline\n:\n \n[\ntrial\n]\n\n\n}\n\n\n\njsPsych\n.\naddNodeToEndOfTimeline\n(\nnew_timeline\n)\n\n\n\n\n\n\n\n\njsPsych.currentTimelineNodeID\n\u00b6\n\n\njsPsych.currentTimelineNodeID()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nReturns the ID of the TimelineNode that is currently active.\n\n\nDescription\n\u00b6\n\n\nGets the ID of the active TimelineNode. The ID is a string that follows a specific format:\n\n\n\n\n\"0.0\"\n is the ID of the first top-level TimelineNode\n\n\n\"1.0\"\n is the ID of the second top-level TimelineNode\n\n\n\"2.0\"\n is the ID of the third top-level TimelineNode, and so on...\n\n\n\n\nIf a TimelineNode iterates multiple times (using the loop function, for example), then the iterations are indicated in the second number:\n\n\n\n\n\"0.0\"\n is the ID of the first top-level TimelineNode during the first iteration\n\n\n\"0.1\"\n is the ID of the first top-level TimelineNode during the second iteration\n\n\n\"0.2\"\n is the ID of the first top-level TimelineNode during the third iteration, and so on...\n\n\n\n\nIf TimelineNodes are nested in other TimelineNodes, then the hierarchical structure is shown with \n\".\"\n:\n\n\n\n\n\"0.0-1.0\"\n is the ID of the second TimelineNode on the timeline of the first top-level TimelineNode.\n\n\n\"0.0-2.0\"\n is the ID of the third TimelineNode on the timeline of the first top-level TimelineNode, and so on...\n\n\n\n\nThe rules about iterations apply throughout the hierarchical ID:\n\n\n\n\n\"0.2-1.3\"\n is the ID of the second TimelineNode, executing for the fourth time, on the timeline of the first top-level TimelineNode, executing for the third time.\n\n\n\n\nExample\n\u00b6\n\n\nvar\n \nid\n \n=\n \njsPsych\n.\ncurrentTimelineNodeID\n();\n\n\n\nconsole\n.\nlog\n(\n'The current TimelineNode ID is '\n+\nid\n);\n\n\n\n\n\n\n\n\njsPsych.currentTrial\n\u00b6\n\n\njsPsych.currentTrial()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nReturns the object describing the current trial. The object will contain all of the parameters associated with the current trial.\n\n\nDescription\n\u00b6\n\n\nGet a description of the current trial\n\n\nExample\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \njsPsych\n.\ncurrentTrial\n();\n\n\n\nconsole\n.\nlog\n(\n'The current trial is using the '\n+\ntrial\n.\ntype\n+\n' plugin'\n);\n\n\n\n\n\n\n\n\njsPsych.endCurrentTimeline\n\u00b6\n\n\njsPsych.endCurrentTimeline\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nNone.\n\n\nDescription\n\u00b6\n\n\nEnds the current timeline. If timelines are nested, then only the timeline that contains the current trial is ended.\n\n\nExample\n\u00b6\n\n\nLoop indefinitely until a particular key is pressed\n\u00b6\n\n\nvar\n \nimages\n \n=\n \n[\n\n  \n\"img/1.gif\"\n,\n \n\"img/2.gif\"\n,\n \n\"img/3.gif\"\n,\n \n\"img/4.gif\"\n,\n\n  \n\"img/5.gif\"\n,\n \n\"img/6.gif\"\n,\n \n\"img/7.gif\"\n,\n \n\"img/8.gif\"\n,\n\n  \n\"img/9.gif\"\n,\n \n\"img/10.gif\"\n\n\n];\n\n\n\nvar\n \ntrials\n \n=\n \n[];\n\n\nfor\n \n(\nvar\n \ni\n \n=\n \n0\n;\n \ni\n \n<\n \nimages\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n  \ntrials\n.\npush\n({\n\n    \nstimulus\n:\n \nimages\n[\ni\n]\n\n  \n});\n\n\n}\n\n\n\nvar\n \nblock\n \n=\n \n{\n\n  \ntype\n:\n \n'image-keyboard-response'\n,\n\n  \nchoices\n:\n \n[\n89\n,\n \n78\n],\n \n// Y or N\n\n  \nprompt\n:\n \n'<p>Press Y to Continue. Press N to end this node of the experiment.</p>'\n,\n\n  \non_finish\n:\n \nfunction\n(\ndata\n)\n \n{\n\n    \nif\n \n(\ndata\n.\nkey_press\n \n==\n \n78\n)\n \n{\n\n      \njsPsych\n.\nendCurrentTimeline\n();\n\n    \n}\n\n  \n},\n\n  \ntimeline\n:\n \ntrials\n\n\n}\n\n\n\nvar\n \nafter_block\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'<p>The next node</p>'\n,\n\n  \nis_html\n:\n \ntrue\n\n\n}\n\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \n[\nblock\n,\n \nafter_block\n],\n\n  \non_finish\n:\n \nfunction\n()\n \n{\n\n    \njsPsych\n.\ndata\n.\ndisplayData\n();\n\n  \n}\n\n\n});\n\n\n\n\n\n\n\n\njsPsych.endExperiment\n\u00b6\n\n\njsPsych.endExperiment(end_message)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nend_message\n\n\nstring\n\n\nA message to display on the screen after the experiment is over.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nNone.\n\n\nDescription\n\u00b6\n\n\nEnds the experiment, skipping all remaining trials.\n\n\nExample\n\u00b6\n\n\nEnd the experiment if a particular response is given\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'image-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'image1.jpg'\n,\n\n  \nchoices\n:\n \n[\n89\n,\n78\n],\n \n// Y or N\n\n  \nprompt\n:\n \n'<p>Press Y to Continue. Press N to end the experiment</p>'\n,\n\n  \non_finish\n:\n \nfunction\n(\ndata\n){\n\n    \nif\n(\ndata\n.\nkey_press\n \n==\n \n78\n){\n\n      \njsPsych\n.\nendExperiment\n(\n'The experiment was ended by pressing N.'\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\njsPsych.finishTrial\n\u00b6\n\n\njsPsych.finishTrial(data)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nobject\n\n\nThe data to store for the trial.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nThis method tells jsPsych that the current trial is over. It is used in all of the plugins to end the current trial. When the trial ends a few things happen:\n\n\n\n\nThe data is stored using \njsPsych.data.write()\n\n\nThe on_finish callback function is executed for the trial\n\n\nThe on_trial_finish callback function is executed\n\n\nThe progress bar is updated if it is being displayed\n\n\nThe experiment ends if the trial is the last one (and the on_finish callback function is executed).\n\n\nThe next trial, if one exists, is started.\n\n\n\n\nExample\n\u00b6\n\n\n// this code would be in a plugin\n\n\njsPsych\n.\nfinishTrial\n({\ncorrect_response\n:\n \ntrue\n});\n\n\n\n\n\n\n\n\njsPsych.getDisplayElement\n\u00b6\n\n\njsPsych.getDisplayElement\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nReturns the HTML DOM element used for displaying the experiment.\n\n\nDescription\n\u00b6\n\n\nGet the DOM element that displays the experiment.\n\n\nExample\n\u00b6\n\n\nvar\n \nel\n \n=\n \njsPsych\n.\ngetDisplayElement\n();\n\n\n\n// hide the jsPsych display\n\n\nel\n.\nstyle\n.\nvisibility\n \n=\n \n'hidden'\n;\n\n\n\n\n\n\n\n\njsPsych.init\n\u00b6\n\n\njsPsych.init(settings)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsettings\n\n\nobject\n\n\nThe settings object for initializing jsPsych. See table below.\n\n\n\n\n\n\n\n\nThe settings object can contain several parameters. The only \nrequired\n parameter is \ntimeline\n.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimeline\n\n\narray\n\n\nAn array containing the objects that describe the experiment timeline. See \nCreating an Experiment: The Timeline\n.\n\n\n\n\n\n\ndisplay_element\n\n\nstring\n\n\nThe ID of an HTML element to display the experiment in. If left blank, then jsPsych will use the \n<body>\n element to display content (creating it if necessary). You can override this parameter at the trial level as well by specifying a display_element property on any timeline.\n\n\n\n\n\n\non_finish\n\n\nfunction\n\n\nFunction to execute when the experiment ends.\n\n\n\n\n\n\non_trial_start\n\n\nfunction\n\n\nFunction to execute when a new trial begins.\n\n\n\n\n\n\non_trial_finish\n\n\nfunction\n\n\nFunction to execute when a trial ends.\n\n\n\n\n\n\non_data_update\n\n\nfunction\n\n\nFunction to execute every time data is stored using the \njsPsych.data.write\n method. All plugins use this method to save data (via a call to \njsPsych.finishTrial\n, so this function runs every time a plugin stores new data.\n\n\n\n\n\n\non_interaction_data_update\n\n\nfunction\n\n\nFunction to execute every time a new interaction event occurs. Interaction events include clicking on a different window (blur), returning to the experiment window (focus), entering full screen mode (fullscreenenter), and exiting full screen mode (fullscreenexit).\n\n\n\n\n\n\nexclusions\n\n\nobject\n\n\nSpecifies restrictions on the browser the subject can use to complete the experiment. See list of options below.\n\n\n\n\n\n\nshow_progress_bar\n\n\nboolean\n\n\nIf true, then \na progress bar\n is shown at the top of the page.\n\n\n\n\n\n\nauto_update_progress_bar\n\n\nboolean\n\n\nIf true, then the progress bar at the top of the page will automatically update as every top-level timeline or trial is completed.\n\n\n\n\n\n\nshow_preload_progress_bar\n\n\nboolean\n\n\nIf true, then a progress bar is displayed while media files are automatically preloaded.\n\n\n\n\n\n\npreload_audio\n\n\narray\n\n\nAn array of audio files to preload before starting the experiment.\n\n\n\n\n\n\npreload_images\n\n\narray\n\n\nAn array of image files to preload before starting the experiment.\n\n\n\n\n\n\nmax_load_time\n\n\nnumeric\n\n\nThe maximum number of milliseconds to wait for content to preload. If the wait time is exceeded an error message is displayed and the experiment stops. The default value is 60 seconds.\n\n\n\n\n\n\ndefault_iti\n\n\nnumeric\n\n\nThe default inter-trial interval in ms. The default value if none is specified is 0ms.\n\n\n\n\n\n\n\n\nPossible values for the exclusions parameter above.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmin_width\n\n\nnumeric\n\n\nThe minimum width of the browser window. If the width is below this value, a message will be displayed to the subject asking them to maximize their browser window. The experiment will sit on this page until the browser window is large enough.\n\n\n\n\n\n\nmin_height\n\n\nnumeric\n\n\nSame as above, but with height.\n\n\n\n\n\n\naudio\n\n\nboolean\n\n\nSet to true to require support for the WebAudio API (used by plugins that play audio files).\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nThis method configures and starts the experiment.\n\n\nExample\n\u00b6\n\n\nSee any of the plugin examples in the \nexamples folder\n in the GitHub repository.\n\n\n\n\njsPsych.initSettings\n\u00b6\n\n\njsPsych.initSettings()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nReturn value\n\u00b6\n\n\nReturns the settings object used to initialize the experiment.\n\n\nDescription\n\u00b6\n\n\nGets the object containing the settings for the current experiment.\n\n\nExample\n\u00b6\n\n\nvar\n \nsettings\n \n=\n \njsPsych\n.\ninitSettings\n();\n\n\n\n// check the experiment structure\n\n\nconsole\n.\nlog\n(\nJSON\n.\nstringify\n(\nsettings\n.\ntimeline\n));\n\n\n\n\n\n\n\n\njsPsych.pauseExperiment\n\u00b6\n\n\njsPsych.pauseExperiment()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nNone.\n\n\nDescription\n\u00b6\n\n\nPauses the experiment. The experiment will finish the current trial, but will not execute any additional trials until \njsPsych.resumeExperiment()\n is called.\n\n\nExample\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'Press p to take a 30 second break. Otherwise, press c to continue immediately.'\n,\n\n  \nchoices\n:\n \n[\n'p'\n,\n'c'\n],\n\n  \non_finish\n:\n \nfunction\n(\ndata\n){\n\n    \nif\n(\ndata\n.\nkey_press\n \n==\n \n80\n)\n \n{\n \n// 80 = p\n\n      \njsPsych\n.\npauseExperiment\n();\n\n      \nsetTimeout\n(\njsPsych\n.\nresumeExperiment\n,\n \n30000\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\njsPsych.progress\n\u00b6\n\n\njsPsych.progress()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nReturns an object with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntotal_trials\n\n\nnumeric\n\n\nIndicates the number of trials in the experiment. Note that this does not count possible loops or skipped trials due to conditional statements.\n\n\n\n\n\n\ncurrent_trial_global\n\n\nnumeric\n\n\nReturns the trial index of the current trial in a global scope. Every trial will increase this count by 1.\n\n\n\n\n\n\npercent_complete\n\n\nnumeric\n\n\nEstimates the percent of the experiment that is complete. Works as expected for experiments without conditional or looping timelines. For complex timelines, the percent is an approximation.\n\n\n\n\n\n\n\n\nDescription\n\u00b6\n\n\nThis method returns information about the length of the experiment and the subject's current location in the experiment timeline.\n\n\nExample\n\u00b6\n\n\nvar\n \nprogress\n \n=\n \njsPsych\n.\nprogress\n();\n\n\n\nalert\n(\n'You have completed approximately '\n+\nprogress\n.\npercent_complete\n+\n'% of the experiment'\n);\n\n\n\n\n\n\n\n\njsPsych.resumeExperiment\n\u00b6\n\n\njsPsych.resumeExperiment()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nNone.\n\n\nDescription\n\u00b6\n\n\nResumes the experiment after a call to \njsPsych.pauseExperiment()\n. If the post trial delay (\npost_trial_gap\n) has not yet been reached, then the experiment will not continue until the delay is finished. For example, if \npost_trial_gap\n was 10,000ms and \njsPsych.resumeExperiment()\n was called 6,000ms after the previous trial finished, then the experiment would not continue for another 4,000ms.\n\n\nExample\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'Press p to take a 30 second break. Otherwise, press c to continue immediately.'\n,\n\n  \nchoices\n:\n \n[\n'p'\n,\n'c'\n],\n\n  \non_finish\n:\n \nfunction\n(\ndata\n){\n\n    \nif\n(\ndata\n.\nkey_press\n \n==\n \n80\n)\n \n{\n \n// 80 = p\n\n      \njsPsych\n.\npauseExperiment\n();\n\n      \nsetTimeout\n(\njsPsych\n.\nresumeExperiment\n,\n \n30000\n);\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\njsPsych.startTime\n\u00b6\n\n\njsPsych.startTime()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nReturns a \nDate\n object indicating when the experiment began.\n\n\nDescription\n\u00b6\n\n\nGet the time that the experiment began.\n\n\nExample\n\u00b6\n\n\nvar\n \nstart_time\n \n=\n \njsPsych\n.\nstartTime\n();\n\n\n\n\n\n\n\n\njsPsych.totalTime\n\u00b6\n\n\njsPsych.totalTime()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nReturns a numeric value indicating the number of milliseconds since \njsPsych.init\n was called.\n\n\nDescription\n\u00b6\n\n\nGets the total time the subject has been in the experiment.\n\n\nExample\n\u00b6\n\n\nvar\n \ntime\n \n=\n \njsPsych\n.\ntotalTime\n();\n\n\nconsole\n.\nlog\n(\ntime\n);",
            "title": "jsPsych"
        },
        {
            "location": "/core_library/jspsych-core/#the-jspsych-core-library",
            "text": "",
            "title": "The jsPsych core library"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychaddnodetoendoftimeline",
            "text": "jsPsych.addNodeToEndOfTimeline(node_parameters)",
            "title": "jsPsych.addNodeToEndOfTimeline"
        },
        {
            "location": "/core_library/jspsych-core/#parameters",
            "text": "Parameter  Type  Description      node_parameters  object  An object defining a timeline. It must have, at a minimum, a  timeline  parameter with a valid timeline array as the value for that parameter.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value",
            "text": "None.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description",
            "text": "Adds the timeline to the end of the experiment.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example",
            "text": "var   trial   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   'This is a new trial.'  }  var   new_timeline   =   { \n   timeline :   [ trial ]  }  jsPsych . addNodeToEndOfTimeline ( new_timeline )",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychcurrenttimelinenodeid",
            "text": "jsPsych.currentTimelineNodeID()",
            "title": "jsPsych.currentTimelineNodeID"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_1",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_1",
            "text": "Returns the ID of the TimelineNode that is currently active.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_1",
            "text": "Gets the ID of the active TimelineNode. The ID is a string that follows a specific format:   \"0.0\"  is the ID of the first top-level TimelineNode  \"1.0\"  is the ID of the second top-level TimelineNode  \"2.0\"  is the ID of the third top-level TimelineNode, and so on...   If a TimelineNode iterates multiple times (using the loop function, for example), then the iterations are indicated in the second number:   \"0.0\"  is the ID of the first top-level TimelineNode during the first iteration  \"0.1\"  is the ID of the first top-level TimelineNode during the second iteration  \"0.2\"  is the ID of the first top-level TimelineNode during the third iteration, and so on...   If TimelineNodes are nested in other TimelineNodes, then the hierarchical structure is shown with  \".\" :   \"0.0-1.0\"  is the ID of the second TimelineNode on the timeline of the first top-level TimelineNode.  \"0.0-2.0\"  is the ID of the third TimelineNode on the timeline of the first top-level TimelineNode, and so on...   The rules about iterations apply throughout the hierarchical ID:   \"0.2-1.3\"  is the ID of the second TimelineNode, executing for the fourth time, on the timeline of the first top-level TimelineNode, executing for the third time.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_1",
            "text": "var   id   =   jsPsych . currentTimelineNodeID ();  console . log ( 'The current TimelineNode ID is ' + id );",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychcurrenttrial",
            "text": "jsPsych.currentTrial()",
            "title": "jsPsych.currentTrial"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_2",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_2",
            "text": "Returns the object describing the current trial. The object will contain all of the parameters associated with the current trial.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_2",
            "text": "Get a description of the current trial",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_2",
            "text": "var   trial   =   jsPsych . currentTrial ();  console . log ( 'The current trial is using the ' + trial . type + ' plugin' );",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychendcurrenttimeline",
            "text": "jsPsych.endCurrentTimeline",
            "title": "jsPsych.endCurrentTimeline"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_3",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_3",
            "text": "None.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_3",
            "text": "Ends the current timeline. If timelines are nested, then only the timeline that contains the current trial is ended.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_3",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#loop-indefinitely-until-a-particular-key-is-pressed",
            "text": "var   images   =   [ \n   \"img/1.gif\" ,   \"img/2.gif\" ,   \"img/3.gif\" ,   \"img/4.gif\" , \n   \"img/5.gif\" ,   \"img/6.gif\" ,   \"img/7.gif\" ,   \"img/8.gif\" , \n   \"img/9.gif\" ,   \"img/10.gif\"  ];  var   trials   =   [];  for   ( var   i   =   0 ;   i   <   images . length ;   i ++ )   { \n   trials . push ({ \n     stimulus :   images [ i ] \n   });  }  var   block   =   { \n   type :   'image-keyboard-response' , \n   choices :   [ 89 ,   78 ],   // Y or N \n   prompt :   '<p>Press Y to Continue. Press N to end this node of the experiment.</p>' , \n   on_finish :   function ( data )   { \n     if   ( data . key_press   ==   78 )   { \n       jsPsych . endCurrentTimeline (); \n     } \n   }, \n   timeline :   trials  }  var   after_block   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   '<p>The next node</p>' , \n   is_html :   true  }  jsPsych . init ({ \n   timeline :   [ block ,   after_block ], \n   on_finish :   function ()   { \n     jsPsych . data . displayData (); \n   }  });",
            "title": "Loop indefinitely until a particular key is pressed"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychendexperiment",
            "text": "jsPsych.endExperiment(end_message)",
            "title": "jsPsych.endExperiment"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_4",
            "text": "Parameter  Type  Description      end_message  string  A message to display on the screen after the experiment is over.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_4",
            "text": "None.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_4",
            "text": "Ends the experiment, skipping all remaining trials.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_4",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#end-the-experiment-if-a-particular-response-is-given",
            "text": "var   trial   =   { \n   type :   'image-keyboard-response' , \n   stimulus :   'image1.jpg' , \n   choices :   [ 89 , 78 ],   // Y or N \n   prompt :   '<p>Press Y to Continue. Press N to end the experiment</p>' , \n   on_finish :   function ( data ){ \n     if ( data . key_press   ==   78 ){ \n       jsPsych . endExperiment ( 'The experiment was ended by pressing N.' ); \n     } \n   }  }",
            "title": "End the experiment if a particular response is given"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychfinishtrial",
            "text": "jsPsych.finishTrial(data)",
            "title": "jsPsych.finishTrial"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_5",
            "text": "Parameter  Type  Description      data  object  The data to store for the trial.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_5",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_5",
            "text": "This method tells jsPsych that the current trial is over. It is used in all of the plugins to end the current trial. When the trial ends a few things happen:   The data is stored using  jsPsych.data.write()  The on_finish callback function is executed for the trial  The on_trial_finish callback function is executed  The progress bar is updated if it is being displayed  The experiment ends if the trial is the last one (and the on_finish callback function is executed).  The next trial, if one exists, is started.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_5",
            "text": "// this code would be in a plugin  jsPsych . finishTrial ({ correct_response :   true });",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychgetdisplayelement",
            "text": "jsPsych.getDisplayElement",
            "title": "jsPsych.getDisplayElement"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_6",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_6",
            "text": "Returns the HTML DOM element used for displaying the experiment.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_6",
            "text": "Get the DOM element that displays the experiment.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_6",
            "text": "var   el   =   jsPsych . getDisplayElement ();  // hide the jsPsych display  el . style . visibility   =   'hidden' ;",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychinit",
            "text": "jsPsych.init(settings)",
            "title": "jsPsych.init"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_7",
            "text": "Parameter  Type  Description      settings  object  The settings object for initializing jsPsych. See table below.     The settings object can contain several parameters. The only  required  parameter is  timeline .     Parameter  Type  Description      timeline  array  An array containing the objects that describe the experiment timeline. See  Creating an Experiment: The Timeline .    display_element  string  The ID of an HTML element to display the experiment in. If left blank, then jsPsych will use the  <body>  element to display content (creating it if necessary). You can override this parameter at the trial level as well by specifying a display_element property on any timeline.    on_finish  function  Function to execute when the experiment ends.    on_trial_start  function  Function to execute when a new trial begins.    on_trial_finish  function  Function to execute when a trial ends.    on_data_update  function  Function to execute every time data is stored using the  jsPsych.data.write  method. All plugins use this method to save data (via a call to  jsPsych.finishTrial , so this function runs every time a plugin stores new data.    on_interaction_data_update  function  Function to execute every time a new interaction event occurs. Interaction events include clicking on a different window (blur), returning to the experiment window (focus), entering full screen mode (fullscreenenter), and exiting full screen mode (fullscreenexit).    exclusions  object  Specifies restrictions on the browser the subject can use to complete the experiment. See list of options below.    show_progress_bar  boolean  If true, then  a progress bar  is shown at the top of the page.    auto_update_progress_bar  boolean  If true, then the progress bar at the top of the page will automatically update as every top-level timeline or trial is completed.    show_preload_progress_bar  boolean  If true, then a progress bar is displayed while media files are automatically preloaded.    preload_audio  array  An array of audio files to preload before starting the experiment.    preload_images  array  An array of image files to preload before starting the experiment.    max_load_time  numeric  The maximum number of milliseconds to wait for content to preload. If the wait time is exceeded an error message is displayed and the experiment stops. The default value is 60 seconds.    default_iti  numeric  The default inter-trial interval in ms. The default value if none is specified is 0ms.     Possible values for the exclusions parameter above.     Parameter  Type  Description      min_width  numeric  The minimum width of the browser window. If the width is below this value, a message will be displayed to the subject asking them to maximize their browser window. The experiment will sit on this page until the browser window is large enough.    min_height  numeric  Same as above, but with height.    audio  boolean  Set to true to require support for the WebAudio API (used by plugins that play audio files).",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_7",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_7",
            "text": "This method configures and starts the experiment.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_7",
            "text": "See any of the plugin examples in the  examples folder  in the GitHub repository.",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychinitsettings",
            "text": "jsPsych.initSettings()",
            "title": "jsPsych.initSettings"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_8",
            "text": "Returns the settings object used to initialize the experiment.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_8",
            "text": "Gets the object containing the settings for the current experiment.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_8",
            "text": "var   settings   =   jsPsych . initSettings ();  // check the experiment structure  console . log ( JSON . stringify ( settings . timeline ));",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychpauseexperiment",
            "text": "jsPsych.pauseExperiment()",
            "title": "jsPsych.pauseExperiment"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_9",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_9",
            "text": "None.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_9",
            "text": "Pauses the experiment. The experiment will finish the current trial, but will not execute any additional trials until  jsPsych.resumeExperiment()  is called.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_9",
            "text": "var   trial   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   'Press p to take a 30 second break. Otherwise, press c to continue immediately.' , \n   choices :   [ 'p' , 'c' ], \n   on_finish :   function ( data ){ \n     if ( data . key_press   ==   80 )   {   // 80 = p \n       jsPsych . pauseExperiment (); \n       setTimeout ( jsPsych . resumeExperiment ,   30000 ); \n     } \n   }  }",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychprogress",
            "text": "jsPsych.progress()",
            "title": "jsPsych.progress"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_10",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_10",
            "text": "Returns an object with the following properties:     Property  Type  Description      total_trials  numeric  Indicates the number of trials in the experiment. Note that this does not count possible loops or skipped trials due to conditional statements.    current_trial_global  numeric  Returns the trial index of the current trial in a global scope. Every trial will increase this count by 1.    percent_complete  numeric  Estimates the percent of the experiment that is complete. Works as expected for experiments without conditional or looping timelines. For complex timelines, the percent is an approximation.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_10",
            "text": "This method returns information about the length of the experiment and the subject's current location in the experiment timeline.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_10",
            "text": "var   progress   =   jsPsych . progress ();  alert ( 'You have completed approximately ' + progress . percent_complete + '% of the experiment' );",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychresumeexperiment",
            "text": "jsPsych.resumeExperiment()",
            "title": "jsPsych.resumeExperiment"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_11",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_11",
            "text": "None.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_11",
            "text": "Resumes the experiment after a call to  jsPsych.pauseExperiment() . If the post trial delay ( post_trial_gap ) has not yet been reached, then the experiment will not continue until the delay is finished. For example, if  post_trial_gap  was 10,000ms and  jsPsych.resumeExperiment()  was called 6,000ms after the previous trial finished, then the experiment would not continue for another 4,000ms.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_11",
            "text": "var   trial   =   { \n   type :   'html-keyboard-response' , \n   stimulus :   'Press p to take a 30 second break. Otherwise, press c to continue immediately.' , \n   choices :   [ 'p' , 'c' ], \n   on_finish :   function ( data ){ \n     if ( data . key_press   ==   80 )   {   // 80 = p \n       jsPsych . pauseExperiment (); \n       setTimeout ( jsPsych . resumeExperiment ,   30000 ); \n     } \n   }  }",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychstarttime",
            "text": "jsPsych.startTime()",
            "title": "jsPsych.startTime"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_12",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_12",
            "text": "Returns a  Date  object indicating when the experiment began.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_12",
            "text": "Get the time that the experiment began.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_12",
            "text": "var   start_time   =   jsPsych . startTime ();",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-core/#jspsychtotaltime",
            "text": "jsPsych.totalTime()",
            "title": "jsPsych.totalTime"
        },
        {
            "location": "/core_library/jspsych-core/#parameters_13",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-core/#return-value_13",
            "text": "Returns a numeric value indicating the number of milliseconds since  jsPsych.init  was called.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-core/#description_13",
            "text": "Gets the total time the subject has been in the experiment.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-core/#example_13",
            "text": "var   time   =   jsPsych . totalTime ();  console . log ( time );",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-data/",
            "text": "jsPsych.data\n\u00b6\n\n\nThe jsPsych.data module contains functions for interacting with the data generated by jsPsych plugins.\n\n\n\n\njsPsych.data.addProperties\n\u00b6\n\n\njsPsych.data.addProperties(properties)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nproperties\n\n\nobject\n\n\nObject of key: value pairs to add to the data.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nThis method appends a set of properties to every trial in the data object, including trials that have already occurred and trials that have yet to occur. You can use this to record things like the subject ID or condition assignment.\n\n\nExamples\n\u00b6\n\n\nAssigning a subject ID and condition code\n\u00b6\n\n\njsPsych\n.\ndata\n.\naddProperties\n({\nsubject\n:\n \n1\n,\n \ncondition\n:\n \n'control'\n});\n\n\n\n\n\n\n\n\njsPsych.data.displayData\n\u00b6\n\n\njsPsych.data.displayData(format)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nformat\n\n\nstring\n\n\nSpecifies whether to display the data in \n'csv'\n or \n'json'\n format.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nOutputs all of the data collected in the experiment to the screen in either JSON or CSV format. This is a useful method for quick debugging when developing an experiment.\n\n\nExamples\n\u00b6\n\n\nUsing the on_finish callback function to show data at the end of the experiment\n\u00b6\n\n\njsPsych\n.\ninit\n({\n\n    \nexperiment_structure\n:\n \nexp\n,\n\n    \non_finish\n:\n \nfunction\n()\n \n{\n\n        \njsPsych\n.\ndata\n.\ndisplayData\n(\n'csv'\n);\n\n    \n}\n\n\n})\n\n\n\n\n\n\n\n\njsPsych.data.get\n\u00b6\n\n\njsPsych.data.get()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nReturns the data collection of all data generated by the experiment.\n\n\nDescription\n\u00b6\n\n\nThis function is the standard starting point for accessing the data generated by the experiment. It returns a DataCollection object, which has\nseveral methods that can be used to further filter, aggregate, and view the data. These methods are described under the DataCollection section\non this page.\n\n\nExample\n\u00b6\n\n\n// select all trials\n\n\nvar\n \nall_data\n \n=\n \njsPsych\n.\ndata\n.\nget\n();\n\n\n\n// get csv representation of data and log to console\n\n\nconsole\n.\nlog\n(\nall_data\n.\ncsv\n());\n\n\n\n\n\n\n\n\njsPsych.data.getDataByTimelineNode\n\u00b6\n\n\njsPsych.data.getDataByTimelineNode(node_id)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnode_id\n\n\nstring\n\n\nThe id of the TimelineNodes to get data from.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns a DataCollection of all of the data generated in a specified TimelineNode.\n\n\nDescription\n\u00b6\n\n\nGet all the data generated by a specified Timeline.\n\n\nExample\n\u00b6\n\n\nvar\n \ncurrent_node_id\n \n=\n \njsPsych\n.\ncurrentTimelineNodeID\n();\n\n\n\nvar\n \ndata_from_current_node\n \n=\n \njsPsych\n.\ndata\n.\ngetDataByTimelineNode\n(\ncurrent_node_id\n);\n\n\n\n\n\n\n\n\njsPsych.data.getInteractionData\n\u00b6\n\n\njsPsych.data.getInteractionData()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nReturns a DataCollection object with all of the interaction events.\n\n\nDescription\n\u00b6\n\n\njsPsych automatically records a few different kinds of user interaction events. \nblur\n events occur when the user clicks on another window or tab during the experiment, indicating that they are no longer interacting with the experiment. \nfocus\n events occur when the user clicks on the experiment window after having clicked somewhere else first (i.e., generated a \nblur\n event). \nfullscreenenter\n and \nfullscreenexit\n events are triggered by the browser entering and exiting fullscreen mode. However, \nfullscreenenter\n events only occur when the script switches the browser to fullscreen mode, e.g., with the jspsych-fullscreen plugin. Manually entering fullscreen mode does not trigger this event. \nfullscreenexit\n events occur whether the user manually exits fullscreen mode or the script exits fullscreen mode. This method returns the DataCollection containing all interaction events. This is useful for tracking whether the participant completed the task without diverting attention to other windows. Events are in the form:\n\n\n{\n\n    \ntype\n:\n \n'focus'\n \nor\n \n'blur'\n \nor\n \n'fullscreenenter'\n \nor\n \n'fullscreenexit'\n,\n\n    \ntrial\n:\n \n10\n,\n \n// the trial number when the event happened\n\n    \ntime\n:\n \n13042\n \n// total time elapsed since the start of the experiment\n\n\n}\n\n\n\n\n\n\nExample\n\u00b6\n\n\nvar\n \ninteraction_data\n \n=\n \njsPsych\n.\ndata\n.\ngetInteractionData\n();\n\n\n// log data to console in json format\n\n\nconsole\n.\nlog\n(\ninteraction_data\n.\njson\n());\n\n\n\n\n\n\n\n\njsPsych.data.getLastTimelineData\n\u00b6\n\n\njsPsych.data.getLastTimelineData()\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns a DataCollection.\n\n\nDescription\n\u00b6\n\n\nGets all of the data generated in the same timeline as the last trial.\n\n\nExample\n\u00b6\n\n\nvar\n \nlasttimelinedata\n \n=\n \njsPsych\n.\ndata\n.\ngetLastTimelineData\n();\n\n\n\n\n\n\n\n\njsPsych.data.getLastTrialData\n\u00b6\n\n\njsPsych.data.getLastTrialData()\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns a DataCollection\n\n\nDescription\n\u00b6\n\n\nGets the data collection containing all data generated by the last trial.\n\n\nExample\n\u00b6\n\n\nvar lasttrialdata = jsPsych.data.getLastTrialData();\n\n\n\n\n\n\n\njsPsych.data.getURLVariable\n\u00b6\n\n\njsPsych.data.getURLVariable(var_name)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvar_name\n\n\nstring\n\n\nWhich variable to get the value of.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns the value of a variable passed in through the query string.\n\n\nDescription\n\u00b6\n\n\nFor extracting a particular variable passed in through a URL query string.\n\n\nExamples\n\u00b6\n\n\n// if the URL of the page is: experiment.html?subject=1234&condition=test\n\n\n\nconsole\n.\nlog\n(\njsPsych\n.\ndata\n.\ngetURLVariable\n(\n'subject'\n))\n \n// logs \"1234\"\n\n\nconsole\n.\nlog\n(\njsPsych\n.\ndata\n.\ngetURLVariable\n(\n'condition'\n))\n \n// logs \"test\"\n\n\n\n\n\n\n\n\njsPsych.data.urlVariables\n\u00b6\n\n\njsPsych.data.urlVariables()\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns an object (associative array) of the variables in the URL query string.\n\n\nDescription\n\u00b6\n\n\nFor extracting variables passed in through a URL query string.\n\n\nExamples\n\u00b6\n\n\n// if the URL of the page is: experiment.html?subject=1234&condition=test\n\n\n\nvar\n \nurlvar\n \n=\n \njsPsych\n.\ndata\n.\nurlVariables\n();\n\n\nconsole\n.\nlog\n(\nurlvar\n.\nsubject\n)\n \n// logs \"1234\"\n\n\nconsole\n.\nlog\n(\nurlvar\n.\ncondition\n)\n \n// logs \"test\"\n\n\n\n\n\n\n\n\njsPsych.data.write\n\u00b6\n\n\njsPsych.data.write(data_object)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata_object\n\n\nobject\n\n\nObject of \nkey: value\n pairs to store in jsPsych's data storage as a trial.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nThis method is used by \njsPsych.finishTrial\n for writing data. You should probably not use it to add data. Instead use \njsPsych.data.addProperties\n.\n\n\nExamples\n\u00b6\n\n\n// don't use this! data should only be written once per trial. use jsPsych.finishTrial to save data.\n\n\n\nvar\n \ntrial_data\n \n=\n \n{\n\n    \ncorrect\n:\n \ntrue\n,\n\n    \nrt\n:\n \n487\n\n\n}\n\n\n\njsPsych\n.\ndata\n.\nwrite\n(\ntrial_data\n);\n\n\n\n\n\n\n\n\nDataCollection\n\u00b6\n\n\nAll data is stored in the DataCollection object. Using methods like \njsPsych.data.get()\n and \njsPsych.data.getLastTrialData()\n return DataCollections containing\nthe experiment data. This is a list of all of the methods that are available to call on a DataCollection object.\n\n\n.addToAll()\n\u00b6\n\n\nAdds a set of properties to all items in the DataCollection. Similar to \njsPsych.data.addProperties()\n, except that it can be applied to a subset of the whole DataCollection by filtering down to a smaller DataCollection first.\n\n\njsPsych\n.\ndata\n.\nget\n().\naddToAll\n({\nsubject_id\n:\n \n123\n,\n \ncondition\n:\n \n'control'\n});\n\n\n\n\n\n\n.addToLast()\n\u00b6\n\n\nAdds a set of properties to the last trial in the DataCollection.\n\n\njsPsych\n.\ndata\n.\nget\n().\naddToLast\n({\nsuccess\n:\n \ntrue\n});\n\n\n\n\n\n\n.count()\n\u00b6\n\n\nCounts the number of trials in the DataCollection.\n\n\njsPsych\n.\ndata\n.\nget\n().\ncount\n()\n\n\n\n\n\n\n.csv()\n\u00b6\n\n\nGenerates a CSV string representing all of the data in the DataCollection.\n\n\nconsole\n.\nlog\n(\njsPsych\n.\ndata\n.\nget\n().\ncsv\n());\n\n\n\n\n\n\n.filter()\n\u00b6\n\n\nReturns a subset of the DataCollection based on the filter. The filter is an object, and trials are only kept in the returned DataCollection if they contain the key: value pair(s) in the filter object. For example, the code below selects all of the trials with a correct response.\n\n\nvar\n \ncorrect_trials\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\ncorrect\n:\n \ntrue\n});\n\n\n\n\n\n\nThe object can have multiple key: value pairs, and the trials must match all of them in order to be included in the returned collection.\n\n\n// keep only correct trials from the practice phase\n\n\nvar\n \ncorrect_practice_trials\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\ncorrect\n:\ntrue\n,\n \nphase\n:\n \n'practice'\n});\n\n\n\n\n\n\nThe filter can also be an array of objects. In this case each object in the array acts as an OR filter. As long as the trial has all the key: value pairs of one of the objects in the array, it will appear in the returned collection.\n\n\n// select trials from block 1 and block 5.\n\n\nvar\n \ntrials\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n([{\nblock\n:\n \n1\n},\n \n{\nblock\n:\n5\n}]);\n\n\n\n\n\n\nThe filter method returns a DataCollection object, so methods can be chained onto a single statement.\n\n\n// count the number of correct trials in block 1\n\n\nvar\n \nblock_1_correct\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\nblock\n:\n1\n,\n \ncorrect\n:\ntrue\n}).\ncount\n();\n\n\n\n\n\n\n.filterCustom()\n\u00b6\n\n\nThis method is similar to the \n.filter()\n method, except that it accepts a function as the filter. The function is passed a single argument, containing the data for a trial. If the function returns \ntrue\n the trial is included in the returned DataCollection.\n\n\n// count the number of trials with a response time greater than 2000ms.\n\n\nvar\n \ntoo_long\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilterCustom\n(\nfunction\n(\ntrial\n){\n\n    \nreturn\n \ntrial\n.\nrt\n \n>\n \n2000\n;\n\n\n}).\ncount\n()\n\n\n\n\n\n\n.first() / .last()\n\u00b6\n\n\nReturns a DataCollection containing the first/last \nn\n trials.\n\n\nvar\n \nfirst_trial\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfirst\n(\n1\n);\n\n\nvar\n \nlast_trial_with_correct_response\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\ncorrect\n:\n \ntrue\n}).\nlast\n(\n1\n);\n\n\nvar\n \nlast_10_trials\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nlast\n(\n10\n);\n\n\n\n\n\n\n.ignore()\n\u00b6\n\n\nReturns a DataCollection with all instances of a particular key removed from the dataset.\n\n\n// log a csv file that does not contain the internal_node_id values for each trial\n\n\nconsole\n.\nlog\n(\njsPsych\n.\ndata\n.\nget\n().\nignore\n(\n'internal_node_id'\n).\ncsv\n());\n\n\n\n\n\n\n.join()\n\u00b6\n\n\nAppends one DataCollection onto another and returns the combined collection.\n\n\n// get a DataCollection with all trials that are either correct or\n\n\n// have a response time greater than 200ms.\n\n\nvar\n \ndc1\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\ncorrect\n:\n \ntrue\n});\n\n\nvar\n \ndc2\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nfilterCustom\n(\nfunction\n(\ntrial\n){\n \nreturn\n \ntrial\n.\nrt\n \n>\n \n200\n});\n\n\nvar\n \ndata\n \n=\n \ndc1\n.\njoin\n(\ndc2\n);\n\n\n\n\n\n\n.json()\n\u00b6\n\n\nGenerates a JSON string representing all of the data in the DataCollection.\n\n\nconsole\n.\nlog\n(\njsPsych\n.\ndata\n.\nget\n().\njson\n());\n\n\n\n\n\n\n.localSave()\n\u00b6\n\n\nSaves a CSV or JSON file on the computer running the experiment. If conducting an online experiment, this will download the file onto the subject's computer, and is therefore not a recommended data storage solution for online data collection.\n\n\nWarning:\n This function relies on features which are \ncurrently not supported by all major web browsers\n, though adoption rates are increasing rapidly. It will work on the most recent versions of Chrome, Firefox, and Internet Explorer. Safari has partial support. The file will render, but it will display in the browser window and will require using the Save As option manually.\n\n\n// first argument is the format, second is the filename.\n\n\n// the format can be either 'csv' or 'json'.\n\n\njsPsych\n.\ndata\n.\nget\n().\nlocalSave\n(\n'csv'\n,\n'mydata.csv'\n);\n\n\n\n\n\n\n.push()\n\u00b6\n\n\nAdd a new entry to the DataCollection. This method is mostly used internally, and you shouldn't need to call it under normal circumstances.\n\n\nvar\n \ndata\n \n=\n \n{\ncorrect\n:\n \ntrue\n,\n \nrt\n:\n \n500\n}\n\n\njsPsych\n.\ndata\n.\nget\n().\npush\n(\ndata\n);\n\n\n\n\n\n\n.readOnly()\n\u00b6\n\n\nCreates a copy of the DataCollection so that any modification of the values in the DataCollection will not affect the original.\n\n\n// this line edits the rt property of the first trial\n\n\njsPsych\n.\ndata\n.\nget\n().\nfirst\n(\n1\n).\nvalues\n()[\n0\n].\nrt\n \n=\n \n100\n;\n\n\n\n// readOnly creates a copy that can be modified without affecting the original\n\n\n\njsPsych\n.\ndata\n.\nget\n().\nfirst\n(\n1\n).\nvalues\n()[\n0\n].\nrt\n\n\n// outputs 100\n\n\n\njsPsych\n.\ndata\n.\nget\n().\nreadOnly\n().\nfirst\n(\n1\n).\nvalues\n()[\n0\n].\nrt\n \n=\n \n200\n\n\njsPsych\n.\ndata\n.\nget\n().\nfirst\n(\n1\n).\nvalues\n()[\n0\n].\nrt\n\n\n// still outputs 100\n\n\n\n\n\n\n.select()\n\u00b6\n\n\nReturns a DataColumn object (see documentation below) of a single property from a DataCollection object.\n\n\nvar\n \nrt_data\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n);\n\n\nrt_data\n.\nmean\n()\n\n\n\n\n\n\n.uniqueNames()\n\u00b6\n\n\nGenerates an array of all the unique key names in the set of trials contained in the DataCollection. This is especially useful when setting up a relational database (e.g., MySQL) where the column names need to be specified in advance.\n\n\nconsole\n.\nlog\n(\njsPsych\n.\ndata\n.\nget\n().\nuniqueNames\n());\n\n\n\n\n\n\n.values()\n\u00b6\n\n\nReturns the raw data array associated with the DataCollection. This array is modifiable, so changes to the array and values of objects in the array will change the DataCollection.\n\n\nvar\n \nraw_data\n \n=\n \njsPsych\n.\ndata\n.\nget\n().\nvalues\n();\n\n\n\n// was response in first trial correct?\n\n\nif\n(\nraw_data\n[\n0\n].\ncorrect\n){\n\n    \nconsole\n.\nlog\n(\n'correct!'\n);\n\n\n}\n \nelse\n \n{\n\n    \nconsole\n.\nlog\n(\n'incorrect.'\n);\n\n\n}\n\n\n\n\n\n\n\n\nDataColumn\n\u00b6\n\n\nDataColumn objects represent all the values of a single property in a DataCollection. They are generated by using the \n.select()\n method on a DataCollection. Once a DataColumn is generated, the following methods can be used.\n\n\n.all()\n\u00b6\n\n\nChecks if all values in the DataColumn return \ntrue\n when passed to a function. The function takes a single argument, which represents one value from the DataColumn.\n\n\n// check if all the response times in the practice phase were under 1000ms\n\n\njsPsych\n.\ndata\n.\nget\n().\nfilter\n({\nphase\n:\n \n'practice'\n}).\nselect\n(\n'correct'\n).\nall\n(\nfunction\n(\nx\n)\n \n{\n \nreturn\n \nx\n \n<\n \n1000\n;\n \n});\n\n\n\n\n\n\n.count()\n\u00b6\n\n\nCounts the number of values in the DataColumn.\n\n\n// count how many response times there are\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\ncount\n();\n\n\n\n\n\n\n.frequencies()\n\u00b6\n\n\nCounts the number of occurrences of each unique value in the DataColumn. Returns this value as an object, where each key is a unique value and the value of each key is the number of occurrences of that key.\n\n\n// get frequencies of correct and incorrect responses\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'correct'\n).\nfrequencies\n();\n\n\n\n\n\n\n.max() / .min()\n\u00b6\n\n\nReturns the maximum or minimum value in a DataColumn.\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nmax\n();\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nmin\n();\n\n\n\n\n\n\n.mean()\n\u00b6\n\n\nReturns the average of all the values in a DataColumn.\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nmean\n();\n\n\n\n\n\n\n.median()\n\u00b6\n\n\nReturns the median of all the values in a DataColumn.\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nmedian\n();\n\n\n\n\n\n\n.sd()\n\u00b6\n\n\nReturns the standard deviation of the values in a DataColumn.\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nsd\n();\n\n\n\n\n\n\n.subset()\n\u00b6\n\n\nFilters the DataColumn to include only values that return \ntrue\n when passed through the specified function.\n\n\n// below results will be less than 200.\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nsubset\n(\nfunction\n(\nx\n){\n \nreturn\n \nx\n \n<\n \n200\n;\n \n}).\nmax\n();\n\n\n\n\n\n\n.sum()\n\u00b6\n\n\nReturns the sum of the values in a DataColumn.\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nsum\n();\n\n\n\n\n\n\n.values\n\u00b6\n\n\nThe raw array of values in the DataColumn.\n\n\n// note that this is not a function call.\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nvalues\n;\n\n\n\n\n\n\n.variance()\n\u00b6\n\n\nReturns the variance of the values in a DataColumn.\n\n\njsPsych\n.\ndata\n.\nget\n().\nselect\n(\n'rt'\n).\nvariance\n();",
            "title": "jsPsych.data"
        },
        {
            "location": "/core_library/jspsych-data/#jspsychdata",
            "text": "The jsPsych.data module contains functions for interacting with the data generated by jsPsych plugins.",
            "title": "jsPsych.data"
        },
        {
            "location": "/core_library/jspsych-data/#jspsychdataaddproperties",
            "text": "jsPsych.data.addProperties(properties)",
            "title": "jsPsych.data.addProperties"
        },
        {
            "location": "/core_library/jspsych-data/#parameters",
            "text": "Parameter  Type  Description      properties  object  Object of key: value pairs to add to the data.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-data/#return-value",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-data/#description",
            "text": "This method appends a set of properties to every trial in the data object, including trials that have already occurred and trials that have yet to occur. You can use this to record things like the subject ID or condition assignment.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-data/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-data/#assigning-a-subject-id-and-condition-code",
            "text": "jsPsych . data . addProperties ({ subject :   1 ,   condition :   'control' });",
            "title": "Assigning a subject ID and condition code"
        },
        {
            "location": "/core_library/jspsych-data/#jspsychdatadisplaydata",
            "text": "jsPsych.data.displayData(format)",
            "title": "jsPsych.data.displayData"
        },
        {
            "location": "/core_library/jspsych-data/#parameters_1",
            "text": "Parameter  Type  Description      format  string  Specifies whether to display the data in  'csv'  or  'json'  format.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-data/#return-value_1",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-data/#description_1",
            "text": "Outputs all of the data collected in the experiment to the screen in either JSON or CSV format. This is a useful method for quick debugging when developing an experiment.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-data/#examples_1",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-data/#using-the-on_finish-callback-function-to-show-data-at-the-end-of-the-experiment",
            "text": "jsPsych . init ({ \n     experiment_structure :   exp , \n     on_finish :   function ()   { \n         jsPsych . data . displayData ( 'csv' ); \n     }  })",
            "title": "Using the on_finish callback function to show data at the end of the experiment"
        },
        {
            "location": "/core_library/jspsych-data/#jspsychdataget",
            "text": "jsPsych.data.get()",
            "title": "jsPsych.data.get"
        },
        {
            "location": "/core_library/jspsych-data/#parameters_2",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-data/#return-value_2",
            "text": "Returns the data collection of all data generated by the experiment.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-data/#description_2",
            "text": "This function is the standard starting point for accessing the data generated by the experiment. It returns a DataCollection object, which has\nseveral methods that can be used to further filter, aggregate, and view the data. These methods are described under the DataCollection section\non this page.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-data/#example",
            "text": "// select all trials  var   all_data   =   jsPsych . data . get ();  // get csv representation of data and log to console  console . log ( all_data . csv ());",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-data/#jspsychdatagetdatabytimelinenode",
            "text": "jsPsych.data.getDataByTimelineNode(node_id)",
            "title": "jsPsych.data.getDataByTimelineNode"
        },
        {
            "location": "/core_library/jspsych-data/#parameters_3",
            "text": "Parameter  Type  Description      node_id  string  The id of the TimelineNodes to get data from.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-data/#return-value_3",
            "text": "Returns a DataCollection of all of the data generated in a specified TimelineNode.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-data/#description_3",
            "text": "Get all the data generated by a specified Timeline.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-data/#example_1",
            "text": "var   current_node_id   =   jsPsych . currentTimelineNodeID ();  var   data_from_current_node   =   jsPsych . data . getDataByTimelineNode ( current_node_id );",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-data/#jspsychdatagetinteractiondata",
            "text": "jsPsych.data.getInteractionData()",
            "title": "jsPsych.data.getInteractionData"
        },
        {
            "location": "/core_library/jspsych-data/#parameters_4",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-data/#return-value_4",
            "text": "Returns a DataCollection object with all of the interaction events.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-data/#description_4",
            "text": "jsPsych automatically records a few different kinds of user interaction events.  blur  events occur when the user clicks on another window or tab during the experiment, indicating that they are no longer interacting with the experiment.  focus  events occur when the user clicks on the experiment window after having clicked somewhere else first (i.e., generated a  blur  event).  fullscreenenter  and  fullscreenexit  events are triggered by the browser entering and exiting fullscreen mode. However,  fullscreenenter  events only occur when the script switches the browser to fullscreen mode, e.g., with the jspsych-fullscreen plugin. Manually entering fullscreen mode does not trigger this event.  fullscreenexit  events occur whether the user manually exits fullscreen mode or the script exits fullscreen mode. This method returns the DataCollection containing all interaction events. This is useful for tracking whether the participant completed the task without diverting attention to other windows. Events are in the form:  { \n     type :   'focus'   or   'blur'   or   'fullscreenenter'   or   'fullscreenexit' , \n     trial :   10 ,   // the trial number when the event happened \n     time :   13042   // total time elapsed since the start of the experiment  }",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-data/#example_2",
            "text": "var   interaction_data   =   jsPsych . data . getInteractionData ();  // log data to console in json format  console . log ( interaction_data . json ());",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-data/#jspsychdatagetlasttimelinedata",
            "text": "jsPsych.data.getLastTimelineData()",
            "title": "jsPsych.data.getLastTimelineData"
        },
        {
            "location": "/core_library/jspsych-data/#return-value_5",
            "text": "Returns a DataCollection.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-data/#description_5",
            "text": "Gets all of the data generated in the same timeline as the last trial.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-data/#example_3",
            "text": "var   lasttimelinedata   =   jsPsych . data . getLastTimelineData ();",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-data/#jspsychdatagetlasttrialdata",
            "text": "jsPsych.data.getLastTrialData()",
            "title": "jsPsych.data.getLastTrialData"
        },
        {
            "location": "/core_library/jspsych-data/#return-value_6",
            "text": "Returns a DataCollection",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-data/#description_6",
            "text": "Gets the data collection containing all data generated by the last trial.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-data/#example_4",
            "text": "var lasttrialdata = jsPsych.data.getLastTrialData();",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-data/#jspsychdatageturlvariable",
            "text": "jsPsych.data.getURLVariable(var_name)",
            "title": "jsPsych.data.getURLVariable"
        },
        {
            "location": "/core_library/jspsych-data/#parameters_5",
            "text": "Parameter  Type  Description      var_name  string  Which variable to get the value of.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-data/#return-value_7",
            "text": "Returns the value of a variable passed in through the query string.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-data/#description_7",
            "text": "For extracting a particular variable passed in through a URL query string.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-data/#examples_2",
            "text": "// if the URL of the page is: experiment.html?subject=1234&condition=test  console . log ( jsPsych . data . getURLVariable ( 'subject' ))   // logs \"1234\"  console . log ( jsPsych . data . getURLVariable ( 'condition' ))   // logs \"test\"",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-data/#jspsychdataurlvariables",
            "text": "jsPsych.data.urlVariables()",
            "title": "jsPsych.data.urlVariables"
        },
        {
            "location": "/core_library/jspsych-data/#return-value_8",
            "text": "Returns an object (associative array) of the variables in the URL query string.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-data/#description_8",
            "text": "For extracting variables passed in through a URL query string.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-data/#examples_3",
            "text": "// if the URL of the page is: experiment.html?subject=1234&condition=test  var   urlvar   =   jsPsych . data . urlVariables ();  console . log ( urlvar . subject )   // logs \"1234\"  console . log ( urlvar . condition )   // logs \"test\"",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-data/#jspsychdatawrite",
            "text": "jsPsych.data.write(data_object)",
            "title": "jsPsych.data.write"
        },
        {
            "location": "/core_library/jspsych-data/#parameters_6",
            "text": "Parameter  Type  Description      data_object  object  Object of  key: value  pairs to store in jsPsych's data storage as a trial.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-data/#return-value_9",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-data/#description_9",
            "text": "This method is used by  jsPsych.finishTrial  for writing data. You should probably not use it to add data. Instead use  jsPsych.data.addProperties .",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-data/#examples_4",
            "text": "// don't use this! data should only be written once per trial. use jsPsych.finishTrial to save data.  var   trial_data   =   { \n     correct :   true , \n     rt :   487  }  jsPsych . data . write ( trial_data );",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-data/#datacollection",
            "text": "All data is stored in the DataCollection object. Using methods like  jsPsych.data.get()  and  jsPsych.data.getLastTrialData()  return DataCollections containing\nthe experiment data. This is a list of all of the methods that are available to call on a DataCollection object.",
            "title": "DataCollection"
        },
        {
            "location": "/core_library/jspsych-data/#addtoall",
            "text": "Adds a set of properties to all items in the DataCollection. Similar to  jsPsych.data.addProperties() , except that it can be applied to a subset of the whole DataCollection by filtering down to a smaller DataCollection first.  jsPsych . data . get (). addToAll ({ subject_id :   123 ,   condition :   'control' });",
            "title": ".addToAll()"
        },
        {
            "location": "/core_library/jspsych-data/#addtolast",
            "text": "Adds a set of properties to the last trial in the DataCollection.  jsPsych . data . get (). addToLast ({ success :   true });",
            "title": ".addToLast()"
        },
        {
            "location": "/core_library/jspsych-data/#count",
            "text": "Counts the number of trials in the DataCollection.  jsPsych . data . get (). count ()",
            "title": ".count()"
        },
        {
            "location": "/core_library/jspsych-data/#csv",
            "text": "Generates a CSV string representing all of the data in the DataCollection.  console . log ( jsPsych . data . get (). csv ());",
            "title": ".csv()"
        },
        {
            "location": "/core_library/jspsych-data/#filter",
            "text": "Returns a subset of the DataCollection based on the filter. The filter is an object, and trials are only kept in the returned DataCollection if they contain the key: value pair(s) in the filter object. For example, the code below selects all of the trials with a correct response.  var   correct_trials   =   jsPsych . data . get (). filter ({ correct :   true });   The object can have multiple key: value pairs, and the trials must match all of them in order to be included in the returned collection.  // keep only correct trials from the practice phase  var   correct_practice_trials   =   jsPsych . data . get (). filter ({ correct : true ,   phase :   'practice' });   The filter can also be an array of objects. In this case each object in the array acts as an OR filter. As long as the trial has all the key: value pairs of one of the objects in the array, it will appear in the returned collection.  // select trials from block 1 and block 5.  var   trials   =   jsPsych . data . get (). filter ([{ block :   1 },   { block : 5 }]);   The filter method returns a DataCollection object, so methods can be chained onto a single statement.  // count the number of correct trials in block 1  var   block_1_correct   =   jsPsych . data . get (). filter ({ block : 1 ,   correct : true }). count ();",
            "title": ".filter()"
        },
        {
            "location": "/core_library/jspsych-data/#filtercustom",
            "text": "This method is similar to the  .filter()  method, except that it accepts a function as the filter. The function is passed a single argument, containing the data for a trial. If the function returns  true  the trial is included in the returned DataCollection.  // count the number of trials with a response time greater than 2000ms.  var   too_long   =   jsPsych . data . get (). filterCustom ( function ( trial ){ \n     return   trial . rt   >   2000 ;  }). count ()",
            "title": ".filterCustom()"
        },
        {
            "location": "/core_library/jspsych-data/#first-last",
            "text": "Returns a DataCollection containing the first/last  n  trials.  var   first_trial   =   jsPsych . data . get (). first ( 1 );  var   last_trial_with_correct_response   =   jsPsych . data . get (). filter ({ correct :   true }). last ( 1 );  var   last_10_trials   =   jsPsych . data . get (). last ( 10 );",
            "title": ".first() / .last()"
        },
        {
            "location": "/core_library/jspsych-data/#ignore",
            "text": "Returns a DataCollection with all instances of a particular key removed from the dataset.  // log a csv file that does not contain the internal_node_id values for each trial  console . log ( jsPsych . data . get (). ignore ( 'internal_node_id' ). csv ());",
            "title": ".ignore()"
        },
        {
            "location": "/core_library/jspsych-data/#join",
            "text": "Appends one DataCollection onto another and returns the combined collection.  // get a DataCollection with all trials that are either correct or  // have a response time greater than 200ms.  var   dc1   =   jsPsych . data . get (). filter ({ correct :   true });  var   dc2   =   jsPsych . data . get (). filterCustom ( function ( trial ){   return   trial . rt   >   200 });  var   data   =   dc1 . join ( dc2 );",
            "title": ".join()"
        },
        {
            "location": "/core_library/jspsych-data/#json",
            "text": "Generates a JSON string representing all of the data in the DataCollection.  console . log ( jsPsych . data . get (). json ());",
            "title": ".json()"
        },
        {
            "location": "/core_library/jspsych-data/#localsave",
            "text": "Saves a CSV or JSON file on the computer running the experiment. If conducting an online experiment, this will download the file onto the subject's computer, and is therefore not a recommended data storage solution for online data collection.  Warning:  This function relies on features which are  currently not supported by all major web browsers , though adoption rates are increasing rapidly. It will work on the most recent versions of Chrome, Firefox, and Internet Explorer. Safari has partial support. The file will render, but it will display in the browser window and will require using the Save As option manually.  // first argument is the format, second is the filename.  // the format can be either 'csv' or 'json'.  jsPsych . data . get (). localSave ( 'csv' , 'mydata.csv' );",
            "title": ".localSave()"
        },
        {
            "location": "/core_library/jspsych-data/#push",
            "text": "Add a new entry to the DataCollection. This method is mostly used internally, and you shouldn't need to call it under normal circumstances.  var   data   =   { correct :   true ,   rt :   500 }  jsPsych . data . get (). push ( data );",
            "title": ".push()"
        },
        {
            "location": "/core_library/jspsych-data/#readonly",
            "text": "Creates a copy of the DataCollection so that any modification of the values in the DataCollection will not affect the original.  // this line edits the rt property of the first trial  jsPsych . data . get (). first ( 1 ). values ()[ 0 ]. rt   =   100 ;  // readOnly creates a copy that can be modified without affecting the original  jsPsych . data . get (). first ( 1 ). values ()[ 0 ]. rt  // outputs 100  jsPsych . data . get (). readOnly (). first ( 1 ). values ()[ 0 ]. rt   =   200  jsPsych . data . get (). first ( 1 ). values ()[ 0 ]. rt  // still outputs 100",
            "title": ".readOnly()"
        },
        {
            "location": "/core_library/jspsych-data/#select",
            "text": "Returns a DataColumn object (see documentation below) of a single property from a DataCollection object.  var   rt_data   =   jsPsych . data . get (). select ( 'rt' );  rt_data . mean ()",
            "title": ".select()"
        },
        {
            "location": "/core_library/jspsych-data/#uniquenames",
            "text": "Generates an array of all the unique key names in the set of trials contained in the DataCollection. This is especially useful when setting up a relational database (e.g., MySQL) where the column names need to be specified in advance.  console . log ( jsPsych . data . get (). uniqueNames ());",
            "title": ".uniqueNames()"
        },
        {
            "location": "/core_library/jspsych-data/#values",
            "text": "Returns the raw data array associated with the DataCollection. This array is modifiable, so changes to the array and values of objects in the array will change the DataCollection.  var   raw_data   =   jsPsych . data . get (). values ();  // was response in first trial correct?  if ( raw_data [ 0 ]. correct ){ \n     console . log ( 'correct!' );  }   else   { \n     console . log ( 'incorrect.' );  }",
            "title": ".values()"
        },
        {
            "location": "/core_library/jspsych-data/#datacolumn",
            "text": "DataColumn objects represent all the values of a single property in a DataCollection. They are generated by using the  .select()  method on a DataCollection. Once a DataColumn is generated, the following methods can be used.",
            "title": "DataColumn"
        },
        {
            "location": "/core_library/jspsych-data/#all",
            "text": "Checks if all values in the DataColumn return  true  when passed to a function. The function takes a single argument, which represents one value from the DataColumn.  // check if all the response times in the practice phase were under 1000ms  jsPsych . data . get (). filter ({ phase :   'practice' }). select ( 'correct' ). all ( function ( x )   {   return   x   <   1000 ;   });",
            "title": ".all()"
        },
        {
            "location": "/core_library/jspsych-data/#count_1",
            "text": "Counts the number of values in the DataColumn.  // count how many response times there are  jsPsych . data . get (). select ( 'rt' ). count ();",
            "title": ".count()"
        },
        {
            "location": "/core_library/jspsych-data/#frequencies",
            "text": "Counts the number of occurrences of each unique value in the DataColumn. Returns this value as an object, where each key is a unique value and the value of each key is the number of occurrences of that key.  // get frequencies of correct and incorrect responses  jsPsych . data . get (). select ( 'correct' ). frequencies ();",
            "title": ".frequencies()"
        },
        {
            "location": "/core_library/jspsych-data/#max-min",
            "text": "Returns the maximum or minimum value in a DataColumn.  jsPsych . data . get (). select ( 'rt' ). max ();  jsPsych . data . get (). select ( 'rt' ). min ();",
            "title": ".max() / .min()"
        },
        {
            "location": "/core_library/jspsych-data/#mean",
            "text": "Returns the average of all the values in a DataColumn.  jsPsych . data . get (). select ( 'rt' ). mean ();",
            "title": ".mean()"
        },
        {
            "location": "/core_library/jspsych-data/#median",
            "text": "Returns the median of all the values in a DataColumn.  jsPsych . data . get (). select ( 'rt' ). median ();",
            "title": ".median()"
        },
        {
            "location": "/core_library/jspsych-data/#sd",
            "text": "Returns the standard deviation of the values in a DataColumn.  jsPsych . data . get (). select ( 'rt' ). sd ();",
            "title": ".sd()"
        },
        {
            "location": "/core_library/jspsych-data/#subset",
            "text": "Filters the DataColumn to include only values that return  true  when passed through the specified function.  // below results will be less than 200.  jsPsych . data . get (). select ( 'rt' ). subset ( function ( x ){   return   x   <   200 ;   }). max ();",
            "title": ".subset()"
        },
        {
            "location": "/core_library/jspsych-data/#sum",
            "text": "Returns the sum of the values in a DataColumn.  jsPsych . data . get (). select ( 'rt' ). sum ();",
            "title": ".sum()"
        },
        {
            "location": "/core_library/jspsych-data/#values_1",
            "text": "The raw array of values in the DataColumn.  // note that this is not a function call.  jsPsych . data . get (). select ( 'rt' ). values ;",
            "title": ".values"
        },
        {
            "location": "/core_library/jspsych-data/#variance",
            "text": "Returns the variance of the values in a DataColumn.  jsPsych . data . get (). select ( 'rt' ). variance ();",
            "title": ".variance()"
        },
        {
            "location": "/core_library/jspsych-randomization/",
            "text": "jsPsych.randomization\n\u00b6\n\n\nThe jsPsych.randomization module contains methods that are useful for generating random lists of trial variables.\n\n\n\n\njsPsych.randomization.factorial\n\u00b6\n\n\njsPsych.randomization.factorial(factors, repetitions, unpack)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfactors\n\n\nobject\n\n\nThe \nfactors\n object should contain a property for each different factor. Each property-factor should have a value of an array, with each element of the array corresponding to a level of the factor.\n\n\n\n\n\n\nrepetitions\n\n\ninteger\n\n\nThe number of times to repeat each unique combination of the factors in the output sample.\n\n\n\n\n\n\nunpack\n\n\nboolean\n\n\nIf \ntrue\n then the output will be an object with a property for each factor in the original \nfactors\n object. The value of each property-factor will be an array containing the levels of the factor in a random order. The order will be consistent across each property-factor (e.g., the first element of each property-factor will specify one unique combination of the factors). If \nfalse\n, then the return value will be an array of objects where each property-factor contains only a single value.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nThe return value depends on the \nunpack\n parameter. See description of the parameter above, and examples below.\n\n\nDescription\n\u00b6\n\n\nThis method takes a list of factors and their levels, and creates a full factorial design by creating each unique combination of the factors. The returned set of combinations is in a random order.\n\n\nExamples\n\u00b6\n\n\nCreate full factorial design\n\u00b6\n\n\nvar\n \nfactors\n \n=\n \n{\n\n    \nstimulus\n:\n \n[\n'a.jpg'\n,\n \n'b.jpg'\n],\n\n    \nms_delay\n:\n \n[\n100\n,\n \n200\n]\n\n\n}\n\n\n\nvar\n \nfull_design\n \n=\n \njsPsych\n.\nrandomization\n.\nfactorial\n(\nfactors\n,\n \n1\n);\n\n\n\n/*\n\n\noutput:\n\n\nfull_design = [\n\n\n    {stimulus: 'a.jpg', ms_delay: 200},\n\n\n    {stimulus: 'b.jpg', ms_delay: 200},\n\n\n    {stimulus: 'b.jpg', ms_delay: 100},\n\n\n    {stimulus: 'a.jpg', ms_delay: 100},\n\n\n]\n\n\n*/\n\n\n\n\n\n\nCreate full factorial design with repeats\n\u00b6\n\n\nvar\n \nfactors\n \n=\n \n{\n\n    \nstimulus\n:\n \n[\n'a.jpg'\n,\n \n'b.jpg'\n],\n\n    \nms_delay\n:\n \n[\n100\n,\n \n200\n]\n\n\n}\n\n\n\nvar\n \nfull_design\n \n=\n \njsPsych\n.\nrandomization\n.\nfactorial\n(\nfactors\n,\n \n2\n);\n\n\n\n/*\n\n\noutput:\n\n\nfull_design = [\n\n\n    {stimulus: 'b.jpg', ms_delay: 200},\n\n\n    {stimulus: 'b.jpg', ms_delay: 100},\n\n\n    {stimulus: 'b.jpg', ms_delay: 100},\n\n\n    {stimulus: 'a.jpg', ms_delay: 100},\n\n\n    {stimulus: 'a.jpg', ms_delay: 200},\n\n\n    {stimulus: 'b.jpg', ms_delay: 200},\n\n\n    {stimulus: 'a.jpg', ms_delay: 100},\n\n\n    {stimulus: 'a.jpg', ms_delay: 200},\n\n\n]\n\n\n*/\n\n\n\n\n\n\nCreate full factorial design, unpacked\n\u00b6\n\n\nvar\n \nfactors\n \n=\n \n{\n\n    \nstimulus\n:\n \n[\n'a.jpg'\n,\n \n'b.jpg'\n],\n\n    \nms_delay\n:\n \n[\n100\n,\n \n200\n]\n\n\n}\n\n\n\nvar\n \nfull_design\n \n=\n \njsPsych\n.\nrandomization\n.\nfactorial\n(\nfactors\n,\n \n1\n,\n \ntrue\n);\n\n\n\n/*\n\n\noutput:\n\n\nfull_design = {\n\n\n    stimulus: ['a.jpg','b.jpg','b.jpg','a.jpg'],\n\n\n    ms_delay: [200, 100, 200, 100]\n\n\n]\n\n\n*/\n\n\n\n\n\n\n\n\njsPsych.randomization.randomID\n\u00b6\n\n\njsPsych.randomization.randomID(length)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlength\n\n\ninteger\n\n\nThe length of the randomly generated ID\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns a string of length \nlength\n where each character is randomly selected from the numbers 0-9 and all lowercase English letters a-z.\n\n\nDescription\n\u00b6\n\n\nGenerates a random string that is likely to be unique. If length is undefined, then the string length is 32.\n\n\nExample\n\u00b6\n\n\nconsole\n.\nlog\n(\njsPsych\n.\nrandomization\n.\nrandomID\n());\n\n\n// outputs: \"t7dwz0e713pc8juuaayyfvpkdd9un239\"\n\n\n\nconsole\n.\nlog\n(\njsPsych\n.\nrandomization\n.\nrandomID\n(\n8\n));\n\n\n// outputs: \"3xtpcbck\"\n\n\n\n\n\n\n\n\njsPsych.randomization.repeat\n\u00b6\n\n\njsPsych.randomization.repeat(array, repetitions, unpack)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\narray\n\n\nThe array of values to randomize & repeat.\n\n\n\n\n\n\nrepetitions\n\n\ninteger or array\n\n\nThe number of times to repeat each element of the \narray\n in the final sample. If this parameter is defined as an integer, then each element of \narray\n is repeated the same number of times. This parameter can also be an array of the same length as \narray\n, in which case each element of \narray\n will be repeated the number of times defined in the corresponding position of the \nrepetitions\n array.\n\n\n\n\n\n\nunpack\n\n\nboolean\n\n\nIf each element of \narray\n is an object with an equivalent set of properties, then setting \nunpack\n to \ntrue\n will make the return value an object with a property for each of the unique properties among the elements of the \narray\n. Each property in the output object will be an array containing the values for that property in the randomized order. The order will be consistent across properties. If this is \nfalse\n then the output is just an array containing a randomized order of the original \narray\n elements.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nThe return value depends on the \nunpack\n parameter. See description of the parameter above, and examples below.\n\n\nDescription\n\u00b6\n\n\nThis method takes an array of values and generates a new random order of the array, with the option of repeating each element of the array a specified number of times.\n\n\nIf the array elements are objects with the same set of properties, then this method can optionally return a single object where each property is a randomized order of the properties defined in the original set of objects. This is useful for randomizing sets of parameters that are used to define a jsPsych block.\n\n\nExamples\n\u00b6\n\n\nShuffle an array, no repeats\n\u00b6\n\n\nvar\n \nmyArray\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n];\n\n\nvar\n \nshuffledArray\n \n=\n \njsPsych\n.\nrandomization\n.\nrepeat\n(\nmyArray\n,\n \n1\n);\n\n\n\n// output: shuffledArray = [3,2,4,1,5]\n\n\n\n\n\n\nShuffle an array with repeats\n\u00b6\n\n\nvar\n \nmyArray\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n];\n\n\nvar\n \nshuffledArray\n \n=\n \njsPsych\n.\nrandomization\n.\nrepeat\n(\nmyArray\n,\n \n2\n);\n\n\n\n// output: shuffledArray = [1,3,4,2,2,4,5,1,5,3]\n\n\n\n\n\n\nShuffle an array of objects\n\u00b6\n\n\nvar\n \ntrial1\n \n=\n \n{\n\n    \nstimulus\n:\n \n'img/faceA.jpg'\n,\n\n    \ncorrect_key\n:\n \n80\n,\n\n    \nperson_name\n:\n \n'Joe'\n\n\n}\n\n\n\nvar\n \ntrial2\n \n=\n \n{\n\n    \nstimulus\n:\n \n'img/faceB.jpg'\n,\n\n    \ncorrect_key\n:\n \n80\n,\n\n    \nperson_name\n:\n \n'Fred'\n\n\n}\n\n\n\nvar\n \ntrial3\n \n=\n \n{\n\n    \nstimulus\n:\n \n'img/faceC.jpg'\n,\n\n    \ncorrect_key\n:\n \n81\n,\n\n    \nperson_name\n:\n \n'Mary'\n\n\n}\n\n\n\nvar\n \nmyArray\n \n=\n \n[\n \ntrial1\n,\n \ntrial2\n,\n \ntrial3\n \n];\n\n\nvar\n \nshuffledArray\n \n=\n \njsPsych\n.\nrandomization\n.\nrepeat\n(\nmyArray\n,\n \n2\n);\n\n\n\n// output: shuffledArray = [ trial1, trial3, trial3, trial2, trial1, trial2 ]\n\n\n\n\n\n\nShuffle an array of objects, with unpack\n\u00b6\n\n\nvar\n \ntrial1\n \n=\n \n{\n\n    \nstimulus\n:\n \n'img/faceA.jpg'\n,\n\n    \ncorrect_key\n:\n \n80\n,\n\n    \nperson_name\n:\n \n'Joe'\n\n\n}\n\n\n\nvar\n \ntrial2\n \n=\n \n{\n\n    \nstimulus\n:\n \n'img/faceB.jpg'\n,\n\n    \ncorrect_key\n:\n \n80\n,\n\n    \nperson_name\n:\n \n'Fred'\n\n\n}\n\n\n\nvar\n \ntrial3\n \n=\n \n{\n\n    \nstimulus\n:\n \n'img/faceC.jpg'\n,\n\n    \ncorrect_key\n:\n \n81\n,\n\n    \nperson_name\n:\n \n'Mary'\n\n\n}\n\n\n\nvar\n \nmyArray\n \n=\n \n[\n \ntrial1\n,\n \ntrial2\n,\n \ntrial3\n \n];\n\n\nvar\n \nshuffledArray\n \n=\n \njsPsych\n.\nrandomization\n.\nrepeat\n(\nmyArray\n,\n \n2\n,\n \ntrue\n);\n\n\n\n/*\n\n\noutput: shuffledArray = {\n\n\n    stimulus: ['img/faceB.jpg','img/faceA.jpg','img/faceC.jpg','img/faceA.jpg','img/faceC.jpg','img/faceB.jpg'],\n\n\n    correct_key: [80, 80, 81, 80, 81, 80],\n\n\n    person_name: ['Fred','Joe', 'Mary', 'Joe', 'Mary', 'Fred']\n\n\n}\n\n\n*/\n\n\n\n\n\n\n\n\njsPsych.randomization.sampleWithReplacement\n\u00b6\n\n\njsPsych.randomization.sampleWithReplacement(array, sampleSize, weights)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\narray\n\n\nThe array of values to sample from\n\n\n\n\n\n\nsampleSize\n\n\nnumeric\n\n\nThe number of samples to draw\n\n\n\n\n\n\nweights\n\n\narray\n\n\nThe relative weight of each element in \narray\n. This array is normalized, so the values do not need to sum to 1. The length must match the length of \narray\n.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nAn array containing the sample.\n\n\nDescription\n\u00b6\n\n\nThis method returns a sample drawn at random from a set of values with replacement. The relative probability of drawing each item can be controlled by specifying the \nweights\n.\n\n\nExamples\n\u00b6\n\n\nSample with equal probability\n\u00b6\n\n\nvar\n \nmyArray\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n];\n\n\nvar\n \nsample\n \n=\n \njsPsych\n.\nrandomization\n.\nsampleWithReplacement\n(\nmyArray\n,\n \n10\n);\n\n\n\n// output: sample = [3, 1, 2, 2, 5, 1, 4, 3, 1, 5];\n\n\n\n\n\n\nSample with unequal probability\n\u00b6\n\n\nvar\n \nmyArray\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n];\n\n\nvar\n \nsample\n \n=\n \njsPsych\n.\nrandomization\n.\nsampleWithReplacement\n(\nmyArray\n,\n \n10\n,\n \n[\n6\n,\n1\n,\n1\n,\n1\n,\n1\n]);\n\n\n\n// output: sample = [3, 4, 5, 1, 2, 1, 3, 1, 1, 1];\n\n\n\n\n\n\n\n\njsPsych.randomization.sampleWithoutReplacement\n\u00b6\n\n\njsPsych.randomization.sampleWithoutReplacement(array, sampleSize)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\narray\n\n\nThe array of values to sample from\n\n\n\n\n\n\nsampleSize\n\n\nnumeric\n\n\nThe number of samples to draw\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nAn array containing the sample.\n\n\nDescription\n\u00b6\n\n\nThis method returns a sample drawn at random from a set of values without replacement. The sample size must be less than or equal to the length of the array.\n\n\nExamples\n\u00b6\n\n\nSample without replacement\n\u00b6\n\n\nvar\n \nmyArray\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n];\n\n\nvar\n \nsample\n \n=\n \njsPsych\n.\nrandomization\n.\nsampleWithoutReplacement\n(\nmyArray\n,\n \n2\n);\n\n\n\n// output: sample = [3,2];\n\n\n\n\n\n\n\n\njsPsych.randomization.shuffle\n\u00b6\n\n\njsPsych.randomization.shuffle(array)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\narray\n\n\nThe array of values to shuffle\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns an array with the same elements as the input array in a random order.\n\n\nDescription\n\u00b6\n\n\nA simple method for shuffling the order of an array.\n\n\nExamples\n\u00b6\n\n\nShuffle an array\n\u00b6\n\n\nvar\n \nmyArray\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n];\n\n\nvar\n \nshuffledArray\n \n=\n \njsPsych\n.\nrandomization\n.\nshuffle\n(\nmyArray\n);\n\n\n\n// output: shuffledArray = [3,2,4,1,5]\n\n\n\n\n\n\n\n\njsPsych.randomization.shuffleNoRepeats\n\u00b6\n\n\njsPsych.randomization.shuffleNoRepeats(array, equalityTest)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\narray\n\n\nThe array of values to shuffle\n\n\n\n\n\n\nequalityTest\n\n\nfunction\n\n\nA function to use to evaluate the equality of neighbors in the array. The function should accept two parameters, which are the two elements to be tested. It should return \ntrue\n if they are equal and \nfalse\n if not. The default function, if none is specified, is to use the \n===\n operator. This will work for primitive values, but fail for Objects and Arrays. An example function is given below in the examples.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns an array with the same elements as the input array in a random order, with no repeating neighbors.\n\n\nDescription\n\u00b6\n\n\nShuffle an array, ensuring that neighboring elements in the array are different.\n\n\nWarning: if you provide an array that has very few valid permutations with no neighboring elements, then this method will fail and cause the browser to hang.\n\n\nExamples\n\u00b6\n\n\nBasic example\n\u00b6\n\n\nvar\n \nmyArray\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n1\n,\n2\n,\n3\n,\n4\n,\n5\n];\n\n\nvar\n \nshuffledArray\n \n=\n \njsPsych\n.\nrandomization\n.\nshuffleNoRepeats\n(\nmyArray\n);\n\n\n\n// output: shuffledArray = [2, 3, 5, 1, 2, 4, 1, 5, 4, 1, 3, 5, 4, 3, 2]\n\n\n\n\n\n\nCustom equalityTest\n\u00b6\n\n\nvar\n \nmyObjects\n \n=\n \n[\n\n  \n{\ncolor\n:\n\"blue\"\n},\n\n    \n{\ncolor\n:\n\"red\"\n},\n\n    \n{\ncolor\n:\n\"yellow\"\n},\n\n    \n{\ncolor\n:\n\"orange\"\n}\n\n\n];\n\n\n\nvar\n \nrepeatedSet\n \n=\n \njsPsych\n.\nrandomization\n.\nrepeat\n(\nmyObjects\n,\n3\n);\n\n\nvar\n \nshuffled\n \n=\n \njsPsych\n.\nrandomization\n.\nshuffleNoRepeats\n(\nrepeatedSet\n,\n \nfunction\n(\na\n,\nb\n)\n \n{\n \nreturn\n \na\n.\ncolor\n \n===\n \nb\n.\ncolor\n \n});\n\n\n\n// console.log(JSON.stringify(shuffled))\n\n\n// \"[{\"color\":\"red\"},{\"color\":\"yellow\"},{\"color\":\"blue\"},{\"color\":\"yellow\"},{\"color\":\"orange\"},{\"color\":\"red\"},{\"color\":\"yellow\"},{\"color\":\"orange\"},{\"color\":\"blue\"},{\"color\":\"orange\"},{\"color\":\"red\"},{\"color\":\"blue\"}]\"",
            "title": "jsPsych.randomization"
        },
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomization",
            "text": "The jsPsych.randomization module contains methods that are useful for generating random lists of trial variables.",
            "title": "jsPsych.randomization"
        },
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationfactorial",
            "text": "jsPsych.randomization.factorial(factors, repetitions, unpack)",
            "title": "jsPsych.randomization.factorial"
        },
        {
            "location": "/core_library/jspsych-randomization/#parameters",
            "text": "Parameter  Type  Description      factors  object  The  factors  object should contain a property for each different factor. Each property-factor should have a value of an array, with each element of the array corresponding to a level of the factor.    repetitions  integer  The number of times to repeat each unique combination of the factors in the output sample.    unpack  boolean  If  true  then the output will be an object with a property for each factor in the original  factors  object. The value of each property-factor will be an array containing the levels of the factor in a random order. The order will be consistent across each property-factor (e.g., the first element of each property-factor will specify one unique combination of the factors). If  false , then the return value will be an array of objects where each property-factor contains only a single value.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-randomization/#return-value",
            "text": "The return value depends on the  unpack  parameter. See description of the parameter above, and examples below.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-randomization/#description",
            "text": "This method takes a list of factors and their levels, and creates a full factorial design by creating each unique combination of the factors. The returned set of combinations is in a random order.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-randomization/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-randomization/#create-full-factorial-design",
            "text": "var   factors   =   { \n     stimulus :   [ 'a.jpg' ,   'b.jpg' ], \n     ms_delay :   [ 100 ,   200 ]  }  var   full_design   =   jsPsych . randomization . factorial ( factors ,   1 );  /*  output:  full_design = [      {stimulus: 'a.jpg', ms_delay: 200},      {stimulus: 'b.jpg', ms_delay: 200},      {stimulus: 'b.jpg', ms_delay: 100},      {stimulus: 'a.jpg', ms_delay: 100},  ]  */",
            "title": "Create full factorial design"
        },
        {
            "location": "/core_library/jspsych-randomization/#create-full-factorial-design-with-repeats",
            "text": "var   factors   =   { \n     stimulus :   [ 'a.jpg' ,   'b.jpg' ], \n     ms_delay :   [ 100 ,   200 ]  }  var   full_design   =   jsPsych . randomization . factorial ( factors ,   2 );  /*  output:  full_design = [      {stimulus: 'b.jpg', ms_delay: 200},      {stimulus: 'b.jpg', ms_delay: 100},      {stimulus: 'b.jpg', ms_delay: 100},      {stimulus: 'a.jpg', ms_delay: 100},      {stimulus: 'a.jpg', ms_delay: 200},      {stimulus: 'b.jpg', ms_delay: 200},      {stimulus: 'a.jpg', ms_delay: 100},      {stimulus: 'a.jpg', ms_delay: 200},  ]  */",
            "title": "Create full factorial design with repeats"
        },
        {
            "location": "/core_library/jspsych-randomization/#create-full-factorial-design-unpacked",
            "text": "var   factors   =   { \n     stimulus :   [ 'a.jpg' ,   'b.jpg' ], \n     ms_delay :   [ 100 ,   200 ]  }  var   full_design   =   jsPsych . randomization . factorial ( factors ,   1 ,   true );  /*  output:  full_design = {      stimulus: ['a.jpg','b.jpg','b.jpg','a.jpg'],      ms_delay: [200, 100, 200, 100]  ]  */",
            "title": "Create full factorial design, unpacked"
        },
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationrandomid",
            "text": "jsPsych.randomization.randomID(length)",
            "title": "jsPsych.randomization.randomID"
        },
        {
            "location": "/core_library/jspsych-randomization/#parameters_1",
            "text": "Parameter  Type  Description      length  integer  The length of the randomly generated ID",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-randomization/#return-value_1",
            "text": "Returns a string of length  length  where each character is randomly selected from the numbers 0-9 and all lowercase English letters a-z.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-randomization/#description_1",
            "text": "Generates a random string that is likely to be unique. If length is undefined, then the string length is 32.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-randomization/#example",
            "text": "console . log ( jsPsych . randomization . randomID ());  // outputs: \"t7dwz0e713pc8juuaayyfvpkdd9un239\"  console . log ( jsPsych . randomization . randomID ( 8 ));  // outputs: \"3xtpcbck\"",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationrepeat",
            "text": "jsPsych.randomization.repeat(array, repetitions, unpack)",
            "title": "jsPsych.randomization.repeat"
        },
        {
            "location": "/core_library/jspsych-randomization/#parameters_2",
            "text": "Parameter  Type  Description      array  array  The array of values to randomize & repeat.    repetitions  integer or array  The number of times to repeat each element of the  array  in the final sample. If this parameter is defined as an integer, then each element of  array  is repeated the same number of times. This parameter can also be an array of the same length as  array , in which case each element of  array  will be repeated the number of times defined in the corresponding position of the  repetitions  array.    unpack  boolean  If each element of  array  is an object with an equivalent set of properties, then setting  unpack  to  true  will make the return value an object with a property for each of the unique properties among the elements of the  array . Each property in the output object will be an array containing the values for that property in the randomized order. The order will be consistent across properties. If this is  false  then the output is just an array containing a randomized order of the original  array  elements.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-randomization/#return-value_2",
            "text": "The return value depends on the  unpack  parameter. See description of the parameter above, and examples below.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-randomization/#description_2",
            "text": "This method takes an array of values and generates a new random order of the array, with the option of repeating each element of the array a specified number of times.  If the array elements are objects with the same set of properties, then this method can optionally return a single object where each property is a randomized order of the properties defined in the original set of objects. This is useful for randomizing sets of parameters that are used to define a jsPsych block.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-randomization/#examples_1",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-randomization/#shuffle-an-array-no-repeats",
            "text": "var   myArray   =   [ 1 , 2 , 3 , 4 , 5 ];  var   shuffledArray   =   jsPsych . randomization . repeat ( myArray ,   1 );  // output: shuffledArray = [3,2,4,1,5]",
            "title": "Shuffle an array, no repeats"
        },
        {
            "location": "/core_library/jspsych-randomization/#shuffle-an-array-with-repeats",
            "text": "var   myArray   =   [ 1 , 2 , 3 , 4 , 5 ];  var   shuffledArray   =   jsPsych . randomization . repeat ( myArray ,   2 );  // output: shuffledArray = [1,3,4,2,2,4,5,1,5,3]",
            "title": "Shuffle an array with repeats"
        },
        {
            "location": "/core_library/jspsych-randomization/#shuffle-an-array-of-objects",
            "text": "var   trial1   =   { \n     stimulus :   'img/faceA.jpg' , \n     correct_key :   80 , \n     person_name :   'Joe'  }  var   trial2   =   { \n     stimulus :   'img/faceB.jpg' , \n     correct_key :   80 , \n     person_name :   'Fred'  }  var   trial3   =   { \n     stimulus :   'img/faceC.jpg' , \n     correct_key :   81 , \n     person_name :   'Mary'  }  var   myArray   =   [   trial1 ,   trial2 ,   trial3   ];  var   shuffledArray   =   jsPsych . randomization . repeat ( myArray ,   2 );  // output: shuffledArray = [ trial1, trial3, trial3, trial2, trial1, trial2 ]",
            "title": "Shuffle an array of objects"
        },
        {
            "location": "/core_library/jspsych-randomization/#shuffle-an-array-of-objects-with-unpack",
            "text": "var   trial1   =   { \n     stimulus :   'img/faceA.jpg' , \n     correct_key :   80 , \n     person_name :   'Joe'  }  var   trial2   =   { \n     stimulus :   'img/faceB.jpg' , \n     correct_key :   80 , \n     person_name :   'Fred'  }  var   trial3   =   { \n     stimulus :   'img/faceC.jpg' , \n     correct_key :   81 , \n     person_name :   'Mary'  }  var   myArray   =   [   trial1 ,   trial2 ,   trial3   ];  var   shuffledArray   =   jsPsych . randomization . repeat ( myArray ,   2 ,   true );  /*  output: shuffledArray = {      stimulus: ['img/faceB.jpg','img/faceA.jpg','img/faceC.jpg','img/faceA.jpg','img/faceC.jpg','img/faceB.jpg'],      correct_key: [80, 80, 81, 80, 81, 80],      person_name: ['Fred','Joe', 'Mary', 'Joe', 'Mary', 'Fred']  }  */",
            "title": "Shuffle an array of objects, with unpack"
        },
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationsamplewithreplacement",
            "text": "jsPsych.randomization.sampleWithReplacement(array, sampleSize, weights)",
            "title": "jsPsych.randomization.sampleWithReplacement"
        },
        {
            "location": "/core_library/jspsych-randomization/#parameters_3",
            "text": "Parameter  Type  Description      array  array  The array of values to sample from    sampleSize  numeric  The number of samples to draw    weights  array  The relative weight of each element in  array . This array is normalized, so the values do not need to sum to 1. The length must match the length of  array .",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-randomization/#return-value_3",
            "text": "An array containing the sample.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-randomization/#description_3",
            "text": "This method returns a sample drawn at random from a set of values with replacement. The relative probability of drawing each item can be controlled by specifying the  weights .",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-randomization/#examples_2",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-randomization/#sample-with-equal-probability",
            "text": "var   myArray   =   [ 1 , 2 , 3 , 4 , 5 ];  var   sample   =   jsPsych . randomization . sampleWithReplacement ( myArray ,   10 );  // output: sample = [3, 1, 2, 2, 5, 1, 4, 3, 1, 5];",
            "title": "Sample with equal probability"
        },
        {
            "location": "/core_library/jspsych-randomization/#sample-with-unequal-probability",
            "text": "var   myArray   =   [ 1 , 2 , 3 , 4 , 5 ];  var   sample   =   jsPsych . randomization . sampleWithReplacement ( myArray ,   10 ,   [ 6 , 1 , 1 , 1 , 1 ]);  // output: sample = [3, 4, 5, 1, 2, 1, 3, 1, 1, 1];",
            "title": "Sample with unequal probability"
        },
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationsamplewithoutreplacement",
            "text": "jsPsych.randomization.sampleWithoutReplacement(array, sampleSize)",
            "title": "jsPsych.randomization.sampleWithoutReplacement"
        },
        {
            "location": "/core_library/jspsych-randomization/#parameters_4",
            "text": "Parameter  Type  Description      array  array  The array of values to sample from    sampleSize  numeric  The number of samples to draw",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-randomization/#return-value_4",
            "text": "An array containing the sample.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-randomization/#description_4",
            "text": "This method returns a sample drawn at random from a set of values without replacement. The sample size must be less than or equal to the length of the array.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-randomization/#examples_3",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-randomization/#sample-without-replacement",
            "text": "var   myArray   =   [ 1 , 2 , 3 , 4 , 5 ];  var   sample   =   jsPsych . randomization . sampleWithoutReplacement ( myArray ,   2 );  // output: sample = [3,2];",
            "title": "Sample without replacement"
        },
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationshuffle",
            "text": "jsPsych.randomization.shuffle(array)",
            "title": "jsPsych.randomization.shuffle"
        },
        {
            "location": "/core_library/jspsych-randomization/#parameters_5",
            "text": "Parameter  Type  Description      array  array  The array of values to shuffle",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-randomization/#return-value_5",
            "text": "Returns an array with the same elements as the input array in a random order.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-randomization/#description_5",
            "text": "A simple method for shuffling the order of an array.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-randomization/#examples_4",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-randomization/#shuffle-an-array",
            "text": "var   myArray   =   [ 1 , 2 , 3 , 4 , 5 ];  var   shuffledArray   =   jsPsych . randomization . shuffle ( myArray );  // output: shuffledArray = [3,2,4,1,5]",
            "title": "Shuffle an array"
        },
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationshufflenorepeats",
            "text": "jsPsych.randomization.shuffleNoRepeats(array, equalityTest)",
            "title": "jsPsych.randomization.shuffleNoRepeats"
        },
        {
            "location": "/core_library/jspsych-randomization/#parameters_6",
            "text": "Parameter  Type  Description      array  array  The array of values to shuffle    equalityTest  function  A function to use to evaluate the equality of neighbors in the array. The function should accept two parameters, which are the two elements to be tested. It should return  true  if they are equal and  false  if not. The default function, if none is specified, is to use the  ===  operator. This will work for primitive values, but fail for Objects and Arrays. An example function is given below in the examples.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-randomization/#return-value_6",
            "text": "Returns an array with the same elements as the input array in a random order, with no repeating neighbors.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-randomization/#description_6",
            "text": "Shuffle an array, ensuring that neighboring elements in the array are different.  Warning: if you provide an array that has very few valid permutations with no neighboring elements, then this method will fail and cause the browser to hang.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-randomization/#examples_5",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-randomization/#basic-example",
            "text": "var   myArray   =   [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 ];  var   shuffledArray   =   jsPsych . randomization . shuffleNoRepeats ( myArray );  // output: shuffledArray = [2, 3, 5, 1, 2, 4, 1, 5, 4, 1, 3, 5, 4, 3, 2]",
            "title": "Basic example"
        },
        {
            "location": "/core_library/jspsych-randomization/#custom-equalitytest",
            "text": "var   myObjects   =   [ \n   { color : \"blue\" }, \n     { color : \"red\" }, \n     { color : \"yellow\" }, \n     { color : \"orange\" }  ];  var   repeatedSet   =   jsPsych . randomization . repeat ( myObjects , 3 );  var   shuffled   =   jsPsych . randomization . shuffleNoRepeats ( repeatedSet ,   function ( a , b )   {   return   a . color   ===   b . color   });  // console.log(JSON.stringify(shuffled))  // \"[{\"color\":\"red\"},{\"color\":\"yellow\"},{\"color\":\"blue\"},{\"color\":\"yellow\"},{\"color\":\"orange\"},{\"color\":\"red\"},{\"color\":\"yellow\"},{\"color\":\"orange\"},{\"color\":\"blue\"},{\"color\":\"orange\"},{\"color\":\"red\"},{\"color\":\"blue\"}]\"",
            "title": "Custom equalityTest"
        },
        {
            "location": "/core_library/jspsych-turk/",
            "text": "jsPsych.turk\n\u00b6\n\n\nThe jsPsych.turk module contains functions for interacting with Mechanical Turk. \n\n\n\n\njsPsych.turk.submitToTurk\n\u00b6\n\n\njsPsych.turk.submitToTurk(data)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nobject\n\n\nThe \ndata\n parameter is an object of \nkey: value\n pairs. Any pairs in the \ndata\n parameter will be saved by Mechanical Turk, and can be downloaded in a CSV file through the Mechanical Turk interface.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nThis method will submit a HIT to Mechanical Turk, causing the HIT to finish. \n\n\nThis method will only work when called from within the mechanical turk website. If you are using an external HIT to send workers to your own server, this method will not work on an externally hosted page. It will work if your external content is loaded in the iframe on the Mechanical Turk website.\n\n\nExample\n\u00b6\n\n\n<\np\n>\nEnter the code you were given:\n</\np\n>\n\n\n<\ninput\n \ntype\n=\n\"text\"\n \nid\n=\n\"code\"\n></\ninput\n>\n\n\n<\nbutton\n \nonclick\n=\n\"sendData();\"\n>\nSubmit HIT\n</\nbutton\n>\n\n\n\n<\nscript\n>\n\n\n// this content must be loaded in the iframe on the mechanical turk website.\n\n\n// usually, this means that the content is part of your 'recruitment ad', the\n\n\n// page the workers can see when they are deciding whether or not to accept a HIT.\n\n\n// one option is to include a simple form on this page that workers submit, with a\n\n\n// special code that they get at the end of the experiment.\n\n\n\nfunction\n \nsendData\n()\n \n{\n\n  \njsPsych\n.\nturk\n.\nsubmitToTurk\n({\n\n    \ncode\n:\n \ndocument\n.\ngetElementById\n(\n'code'\n).\nvalue\n\n  \n});\n\n\n}\n\n\n</\nscript\n>\n\n\n\n\n\n\n\n\njsPsych.turk.turkInfo\n\u00b6\n\n\njsPsych.turk.turkInfo()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nReturns an object with six properties:\n\n\n\n\n.assignmentId\n contains the assignment ID string of the HIT.\n\n\n.hitId\n contains the HIT ID.\n\n\n.workerId\n contains the worker ID of the worker completing the HIT.\n\n\n.turkSubmitTo\n contains the URL for submitting the HIT. This parameter is used in the \njsPsych.turk.submitToTurk\n method, and is probably not useful outside of that context.\n\n\n.previewMode\n is a boolean value indicating whether or not the worker has accepted the HIT yet. If the page is viewed inside Mechancial Turk and the worker has not clicked 'Accept HIT' then this will be true. If the page is viewed outside Mechanical Turk or the worker has acccepted the HIT, then it will be false.\n\n\n.outsideTurk\n is a boolean value indicating if the page is being viewed within Mechanical Turk, or if it is being viewed from another source (e.g., someone directly going to the page URL instead of going through mturk).\n\n\n\n\nDescription\n\u00b6\n\n\nThis method returns basic information about the current Mechanical Turk session, including the worker ID, assignment ID, and HIT ID.\n\n\nExample\n\u00b6\n\n\nvar\n \nturkInfo\n \n=\n \njsPsych\n.\nturk\n.\nturkInfo\n();\n\n\n\nalert\n(\n'Worker ID is: '\n \n+\n \nturkInfo\n.\nworkerId\n);\n\n\n\nalert\n(\n'Assignment ID is: '\n \n+\n \nturkInfo\n.\nassignmentId\n);\n\n\n\nalert\n(\n'HIT ID is: '\n \n+\n \nturkInfo\n.\nhitId\n);\n\n\n\n// true if the page is viewed within Mechanical Turk, \n\n\n// but worker has not accepted the HIT yet.\n\n\n// false if the page is viewed outside Mechanical Turk,\n\n\n// OR the worker has accepted the HIT.\n\n\nalert\n(\n'Preview mode? '\n \n+\n \nturkInfo\n.\npreviewMode\n);\n \n\n\n// true if the page is viewed outside mechanical turk,\n\n\n// false otherwise.\n\n\nalert\n(\n'Outside turk? '\n \n+\n \nturkInfo\n.\noutsideTurk\n);",
            "title": "jsPsych.turk"
        },
        {
            "location": "/core_library/jspsych-turk/#jspsychturk",
            "text": "The jsPsych.turk module contains functions for interacting with Mechanical Turk.",
            "title": "jsPsych.turk"
        },
        {
            "location": "/core_library/jspsych-turk/#jspsychturksubmittoturk",
            "text": "jsPsych.turk.submitToTurk(data)",
            "title": "jsPsych.turk.submitToTurk"
        },
        {
            "location": "/core_library/jspsych-turk/#parameters",
            "text": "Parameter  Type  Description      data  object  The  data  parameter is an object of  key: value  pairs. Any pairs in the  data  parameter will be saved by Mechanical Turk, and can be downloaded in a CSV file through the Mechanical Turk interface.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-turk/#return-value",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-turk/#description",
            "text": "This method will submit a HIT to Mechanical Turk, causing the HIT to finish.   This method will only work when called from within the mechanical turk website. If you are using an external HIT to send workers to your own server, this method will not work on an externally hosted page. It will work if your external content is loaded in the iframe on the Mechanical Turk website.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-turk/#example",
            "text": "< p > Enter the code you were given: </ p >  < input   type = \"text\"   id = \"code\" ></ input >  < button   onclick = \"sendData();\" > Submit HIT </ button >  < script >  // this content must be loaded in the iframe on the mechanical turk website.  // usually, this means that the content is part of your 'recruitment ad', the  // page the workers can see when they are deciding whether or not to accept a HIT.  // one option is to include a simple form on this page that workers submit, with a  // special code that they get at the end of the experiment.  function   sendData ()   { \n   jsPsych . turk . submitToTurk ({ \n     code :   document . getElementById ( 'code' ). value \n   });  }  </ script >",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-turk/#jspsychturkturkinfo",
            "text": "jsPsych.turk.turkInfo()",
            "title": "jsPsych.turk.turkInfo"
        },
        {
            "location": "/core_library/jspsych-turk/#parameters_1",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-turk/#return-value_1",
            "text": "Returns an object with six properties:   .assignmentId  contains the assignment ID string of the HIT.  .hitId  contains the HIT ID.  .workerId  contains the worker ID of the worker completing the HIT.  .turkSubmitTo  contains the URL for submitting the HIT. This parameter is used in the  jsPsych.turk.submitToTurk  method, and is probably not useful outside of that context.  .previewMode  is a boolean value indicating whether or not the worker has accepted the HIT yet. If the page is viewed inside Mechancial Turk and the worker has not clicked 'Accept HIT' then this will be true. If the page is viewed outside Mechanical Turk or the worker has acccepted the HIT, then it will be false.  .outsideTurk  is a boolean value indicating if the page is being viewed within Mechanical Turk, or if it is being viewed from another source (e.g., someone directly going to the page URL instead of going through mturk).",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-turk/#description_1",
            "text": "This method returns basic information about the current Mechanical Turk session, including the worker ID, assignment ID, and HIT ID.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-turk/#example_1",
            "text": "var   turkInfo   =   jsPsych . turk . turkInfo ();  alert ( 'Worker ID is: '   +   turkInfo . workerId );  alert ( 'Assignment ID is: '   +   turkInfo . assignmentId );  alert ( 'HIT ID is: '   +   turkInfo . hitId );  // true if the page is viewed within Mechanical Turk,   // but worker has not accepted the HIT yet.  // false if the page is viewed outside Mechanical Turk,  // OR the worker has accepted the HIT.  alert ( 'Preview mode? '   +   turkInfo . previewMode );   // true if the page is viewed outside mechanical turk,  // false otherwise.  alert ( 'Outside turk? '   +   turkInfo . outsideTurk );",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/",
            "text": "jsPsych.pluginAPI\n\u00b6\n\n\nThe pluginAPI module contains functions that are useful when developing new plugins.\n\n\n\n\njsPsych.pluginAPI.autoPreload\n\u00b6\n\n\njsPsych.pluginAPI.autoPreload(timeline, callback)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimeline\n\n\nTimelineNode object\n\n\nA TimelineNode object that contains an arbitrary set of trials.\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nA function to execute when loading is complete\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nAttempts to preload all image files and audio files that will be used to run the trials on the timeline. Content will only preload from plugins that have used the \nregisterPreload\n method to define the media types of their parameters.\n\n\nThe callback function executes once all of the files are preloaded.\n\n\nThis method is used internally by the core jsPsych code. It is not recommended that you call it manually.\n\n\nExamples\n\u00b6\n\n\n// you probably shouldn't use this method\n\n\n\n\n\n\n\n\njsPsych.pluginAPI.cancelAllKeyboardResponses\n\u00b6\n\n\njsPsych.pluginAPI.cancelAllKeyboardResponses()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nCancels all currently active keyboard listeners created by \njsPsych.pluginAPI.getKeyboardResponse\n.\n\n\nExamples\n\u00b6\n\n\njsPsych\n.\npluginAPI\n.\ncancelAllKeyboardResponses\n();\n\n\n\n\n\n\n\n\njsPsych.pluginAPI.cancelKeyboardResponse\n\u00b6\n\n\njsPsych.pluginAPI.cancelKeyboardResponse(listener_id)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlistener_id\n\n\nobject\n\n\nThe listener_id object generated by the call to \njsPsych.pluginAPI.getKeyboardResponse\n.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nCancels a specific keyboard listener created by \njsPsych.pluginAPI.getKeyboardResponse\n.\n\n\nExamples\n\u00b6\n\n\n// create a persistent keyboard listener\n\n\nvar\n \nlistener_id\n \n=\n \njsPsych\n.\npluginAPI\n.\ngetKeyboardResponse\n(\nafter_response\n,\n \n[\n'p'\n,\n'q'\n],\n \n'date'\n,\n \ntrue\n);\n\n\n\n// cancel keyboard listener\n\n\njsPsych\n.\npluginAPI\n.\ncancelKeyboardResponse\n(\nlistener_id\n);\n\n\n\n\n\n\n\n\njsPsych.pluginAPI.clearAllTimeouts\n\u00b6\n\n\njsPsych.pluginAPI.clearAllTimeouts()\n\n\n\n\n\nParameters\n\u00b6\n\n\nNone.\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nClears any pending timeouts that were set using jsPsych.pluginAPI.setTimeout()\n\n\n\n\njsPsych.pluginAPI.compareKeys\n\u00b6\n\n\njsPsych.pluginAPI.compareKeys(key1, key2)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey1\n\n\nstring or numeric\n\n\nThe representation of a key, either string or keycode\n\n\n\n\n\n\nkey2\n\n\nstring or numeric\n\n\nThe representation of a key, either string or keycode\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns true if keycodes or strings refer to the same key, regardless of type.\n\n\nDescription\n\u00b6\n\n\nCompares two keys to see if they are the same, ignoring differences in representational type.\n\n\nExamples\n\u00b6\n\n\njsPsych\n.\npluginAPI\n.\ncompareKeys\n(\n'a'\n,\n \n65\n);\n\n\n// returns true\n\n\n\njsPsych\n.\npluginAPI\n.\nconvertKeyCharacterToKeyCode\n(\n'space'\n,\n \n31\n)\n\n\n// returns false\n\n\n\n\n\n\n\n\njsPsych.pluginAPI.convertKeyCharacterToKeyCode\n\u00b6\n\n\njsPsych.pluginAPI.convertKeyCharacterToKeyCode(character)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nstring\n\n\nThe string representation of keyboard key.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns the numeric keycode associated with the \ncharacter\n parameter.\n\n\nDescription\n\u00b6\n\n\nConverts between the string representation of a key and the numeric key code associated with that key.\n\n\nExamples\n\u00b6\n\n\nvar\n \nkeycode\n \n=\n \njsPsych\n.\npluginAPI\n.\nconvertKeyCharacterToKeyCode\n(\n'a'\n)\n\n\n// keycode is 65\n\n\n\nkeycode\n \n=\n \njsPsych\n.\npluginAPI\n.\nconvertKeyCharacterToKeyCode\n(\n'space'\n)\n\n\n// keycode is 32\n\n\n\n\n\n\n\n\njsPsych.pluginAPI.convertKeyCodeToKeyCharacter\n\u00b6\n\n\njsPsych.pluginAPI.convertKeyCodeToKeyCharacter(character)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncode\n\n\nnumeric\n\n\nThe numeric representation of keyboard key.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns the string representation of the key associated with the \ncode\n parameter.\n\n\nDescription\n\u00b6\n\n\nConverts between the numeric key code of a key and the string representation associated with that key.\n\n\nExamples\n\u00b6\n\n\nvar\n \nkeycode\n \n=\n \njsPsych\n.\npluginAPI\n.\nconvertKeyCharacterToKeyCode\n(\n65\n)\n\n\n// key is 'a'\n\n\n\nkeycode\n \n=\n \njsPsych\n.\npluginAPI\n.\nconvertKeyCharacterToKeyCode\n(\n32\n)\n\n\n// keycode is 'space'\n\n\n\n\n\n\n\n\njsPsych.pluginAPI.getAudioBuffer\n\u00b6\n\n\njsPsych.pluginAPI.getAudioBuffer(filepath)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilepath\n\n\nstring\n\n\nThe path to the audio file that was preloaded.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns buffered audio file for playback. If the browser supports it the buffer will be playable with the WebAudio API. Otherwise, the returned buffer will be an HTML5 Audio object.\n\n\nDescription\n\u00b6\n\n\nGets an AudioBuffer that can be played with the WebAudio API or an Audio object that can be played with HTML5 Audio. The file must be preloaded with \npreloadAudioFiles\n or the automatic preload (\nautoPreload\n).\n\n\nExamples\n\u00b6\n\n\n// the code below is used to play audio in the audio-keyboard-response plugin\n\n\nvar\n \nsource\n \n=\n \ncontext\n.\ncreateBufferSource\n();\n\n\nsource\n.\nbuffer\n \n=\n \njsPsych\n.\npluginAPI\n.\ngetAudioBuffer\n(\ntrial\n.\nstimulus\n);\n\n\nsource\n.\nconnect\n(\ncontext\n.\ndestination\n);\n\n\nstartTime\n \n=\n \ncontext\n.\ncurrentTime\n;\n\n\nsource\n.\nstart\n(\nstartTime\n);\n\n\n\n\n\n\n\n\njsPsych.pluginAPI.getKeyboardResponse\n\u00b6\n\n\njsPsych.pluginAPI.getKeyboardResponse(parameters)\n\n\n\n\n\nParameters\n\u00b6\n\n\nThe method accepts an object of parameter values (see example below). The valid keys for this object are listed in the table below.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncallback_function\n\n\nfunction\n\n\nThe function to execute whenever a valid keyboard response is generated.\n\n\n\n\n\n\nvalid_responses\n\n\narray\n\n\nAn array of key codes or character strings representing valid responses. Responses not on the list will be ignored. An empty array indicates that all responses are acceptable.\n\n\n\n\n\n\nrt_method\n\n\nstring\n\n\nIndicates which method of recording time to use. The \n'date'\n method uses calls to \n(new Date()).getTime()\n to record timing information. The \n'performance'\n method uses calls to \nperformance.now()\n, which is a more modern JavaScript feature. The \n'performance'\n approach is \nnot supported by all the major browsers yet\n, but adoption rates are increasing. The \naudio\n method is used in conjuction with an \naudio_context\n (set as an additional parameter). This uses the clock time of the \naudio_context\n when audio stimuli are being played.\n\n\n\n\n\n\naudio_context\n\n\nAudioContext object\n\n\nThe AudioContext of the audio file that is being played.\n\n\n\n\n\n\naudio_context_start_time\n\n\nnumeric\n\n\nThe scheduled time of the sound file in the AudioContext. This will be used as the start time.\n\n\n\n\n\n\nallow_held_key\n\n\nboolean\n\n\nIf \ntrue\n, then responses will be registered from keys that are being held down. If \nfalse\n, then a held key can only register a response the first time that \ngetKeyboardResponse\n is called for that key. For example, if a participant holds down the \nA\n key before the experiment starts, then the first time \ngetKeyboardResponse\n is called, the \nA\n will register as a key press. However, any future calls to \ngetKeyboardResponse\n will not register the \nA\n until the participant releases the key and presses it again.\n\n\n\n\n\n\npersist\n\n\nboolean\n\n\nIf false, then the keyboard listener will only trigger the first time a valid key is pressed. If true, then it will trigger every time a valid key is pressed until it is explicitly cancelled by \njsPsych.pluginAPI.cancelKeyboardResponse\n or \njsPsych.pluginAPI.cancelAllKeyboardResponses\n.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturn an object that uniquely identifies the keyboard listener. This object can be passed to \njsPsych.pluginAPI.cancelKeyboardResponse\n to cancel the keyboard listener.\n\n\nDescription\n\u00b6\n\n\nGets a keyboard response from the subject, recording the response time from when the function is first called until a valid response is generated.\n\n\nA valid response triggers the \ncallback_function\n specified in the parameters. A single argument is passed to the callback function. The argument contains an object with the properties \nkey\n and \nrt\n. \nkey\n contains the numeric key code of the response, and \nrt\n contains the response time.\n\n\nExamples\n\u00b6\n\n\nGet a single response from any key\n\u00b6\n\n\nvar\n \nafter_response\n \n=\n \nfunction\n(\ninfo\n){\n\n    \nalert\n(\n'You pressed key '\n+\ninfo\n.\nkey\n+\n' after '\n+\ninfo\n.\nrt\n+\n'ms'\n);\n\n\n}\n\n\n\njsPsych\n.\npluginAPI\n.\ngetKeyboardResponse\n({\n\n  \ncallback_function\n:\nafter_response\n,\n\n  \nvalid_responses\n:\n \n[],\n\n  \nrt_method\n:\n \n'date'\n,\n\n  \npersist\n:\n \nfalse\n\n\n});\n\n\n\n\n\n\nGet a responses from a key until the letter Q is pressed\n\u00b6\n\n\nvar\n \nafter_response\n \n=\n \nfunction\n(\ninfo\n){\n\n    \nalert\n(\n'You pressed key '\n+\ninfo\n.\nkey\n+\n' after '\n+\ninfo\n.\nrt\n+\n'ms'\n);\n\n\n    \nif\n(\ninfo\n.\nkey\n \n==\n \n81\n){\n \n// the key code for 'Q' is 81.\n\n        \njsPsych\n.\npluginAPI\n.\ncancelKeyboardResponse\n(\nlistener\n);\n\n    \n}\n\n\n}\n\n\n\nvar\n \nlistener\n \n=\n \njsPsych\n.\npluginAPI\n.\ngetKeyboardResponse\n({\n\n  \ncallback_function\n:\nafter_response\n,\n\n  \nvalid_responses\n:\n \n[],\n\n  \nrt_method\n:\n \n'date'\n,\n\n  \npersist\n:\n \ntrue\n\n\n});\n\n\n\n\n\n\n\n\njsPsych.pluginAPI.preloadAudioFiles\n\u00b6\n\n\njsPsych.pluginAPI.preloadAudioFiles(files, callback_complete, callback_load)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfiles\n\n\narray\n\n\nAn array of audio file paths to load. The array can be nested (e.g., if images are in multiple arrays to help sort by condition or task).\n\n\n\n\n\n\ncallback_complete\n\n\nfunction\n\n\nA function to execute when all the files have been loaded.\n\n\n\n\n\n\ncallback_load\n\n\nfunction\n\n\nA function to execute after each file has been loaded. A single parameter is passed to this function which contains the number of files that have been loaded so far.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nUse this function to preload audio files that are not part of a plugin with automatic preloading. Audio files in official plugins will automatically preload. See \nMedia Preloading\n for more information.\n\n\nIt is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the files are loaded. Thus, it is possible that an audio file would be required for playing before it is done preloading. The \ncallback_complete\n function will only execute after all the audio files are loaded, and can be used to control the flow of the experiment (e.g., by starting the experiment in the \ncallback_complete\n function).\n\n\nThe \ncallback_load\n function can be used to indicate progress. See example below.\n\n\nExamples\n\u00b6\n\n\nBasic use\n\u00b6\n\n\nvar\n \nsounds\n \n=\n \n[\n'file1.mp3'\n,\n \n'file2.mp3'\n,\n \n'file3.mp3'\n];\n\n\n\njsPsych\n.\npluginAPI\n.\npreloadAudioFiles\n(\nsounds\n,\n \nfunction\n(){\n \nstartExperiment\n();\n \n});\n\n\n\nfunction\n \nstartExperiment\n(){\n\n    \njsPsych\n.\ninit\n({\n\n        \ntimeline\n:\n \nexp\n\n    \n});\n\n\n}\n\n\n\n\n\n\nShow progress of loading\n\u00b6\n\n\nvar\n \nsounds\n \n=\n \n[\n'file1.mp3'\n,\n \n'file2.mp3'\n,\n \n'file3.mp3'\n];\n\n\n\njsPsych\n.\npluginAPI\n.\npreloadAudioFiles\n(\nsounds\n,\n \nfunction\n(){\n \nstartExperiment\n();\n \n},\n \nfunction\n(\nnLoaded\n)\n \n{\n \nupdateLoadedCount\n(\nnLoaded\n);\n \n});\n\n\n\nfunction\n \nupdateLoadedCount\n(\nnLoaded\n){\n\n    \nvar\n \npercentcomplete\n \n=\n \nnLoaded\n \n/\n \nsounds\n.\nlength\n \n*\n \n100\n;\n\n\n    \n// could put something fancier here, like a progress bar\n\n    \n// or updating text in the DOM.\n\n    \nconsole\n.\nlog\n(\n'Loaded '\n+\npercentcomplete\n+\n'% of audio files'\n);\n\n\n}\n\n\n\nfunction\n \nstartExperiment\n(){\n\n    \njsPsych\n.\ninit\n({\n\n        \ntimeline\n:\n \nexp\n\n    \n});\n\n\n}\n\n\n\n\n\n\n\n\njsPsych.pluginAPI.preloadImages\n\u00b6\n\n\njsPsych.pluginAPI.preloadImages(images, callback_complete, callback_load)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimages\n\n\narray\n\n\nAn array of image paths to load. The array can be nested (e.g., if images are in multiple arrays to help sort by condition or task).\n\n\n\n\n\n\ncallback_complete\n\n\nfunction\n\n\nA function to execute when all the images have been loaded.\n\n\n\n\n\n\ncallback_load\n\n\nfunction\n\n\nA function to execute after each image has been loaded. A single parameter is passed to this function which contains the number of images that have been loaded so far.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns nothing.\n\n\nDescription\n\u00b6\n\n\nUse this function to preload image files that are not part of a plugin with automatic preloading. Image files in official plugins will automatically preload. See \nMedia Preloading\n for more information.\n\n\nIt is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the images are loaded. Thus, it is possible that an image would be required for display before it is done preloading. The \ncallback_complete\n function will only execute after all the images are loaded, and can be used to control the flow of the experiment (e.g., by starting the experiment in the \ncallback_complete\n function).\n\n\nThe \ncallback_load\n function can be used to indicate progress, if the number of images to be loaded is known ahead of time. See example below.\n\n\nExamples\n\u00b6\n\n\nBasic use\n\u00b6\n\n\nvar\n \nimages\n \n=\n \n[\n'img/file1.png'\n,\n \n'img/file2.png'\n,\n \n'img/file3.png'\n];\n\n\n\njsPsych\n.\npluginAPI\n.\npreloadImages\n(\nimages\n,\n \nfunction\n(){\n \nstartExperiment\n();\n \n});\n\n\n\nfunction\n \nstartExperiment\n(){\n\n    \njsPsych\n.\ninit\n({\n\n        \ntimeline\n:\n \nexp\n\n    \n});\n\n\n}\n\n\n\n\n\n\nShow progress of loading\n\u00b6\n\n\nvar\n \nimages\n \n=\n \n[\n'img/file1.png'\n,\n \n'img/file2.png'\n,\n \n'img/file3.png'\n];\n\n\n\njsPsych\n.\npluginAPI\n.\npreloadImages\n(\nimages\n,\n \nfunction\n(){\n \nstartExperiment\n();\n \n},\n \nfunction\n(\nnLoaded\n)\n \n{\n \nupdateLoadedCount\n(\nnLoaded\n);\n \n});\n\n\n\nfunction\n \nupdateLoadedCount\n(\nnLoaded\n){\n\n    \nvar\n \npercentcomplete\n \n=\n \nnLoaded\n \n/\n \nimages\n.\nlength\n \n*\n \n100\n;\n\n\n    \n// could put something fancier here, like a progress bar\n\n    \n// or updating text in the DOM.\n\n    \nconsole\n.\nlog\n(\n'Loaded '\n+\npercentcomplete\n+\n'% of images'\n);\n\n\n}\n\n\n\nfunction\n \nstartExperiment\n(){\n\n    \njsPsych\n.\ninit\n({\n\n        \ntimeline\n:\n \nexp\n\n    \n});\n\n\n}\n\n\n\n\n\n\n\n\njsPsych.pluginAPI.registerPreload\n\u00b6\n\n\njsPsych.pluginAPI.registerPreload(plugin_name, parameter, media_type, conditional_function)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplugin_name\n\n\nstring\n\n\nThe name of the plugin. e.g., 'image-keyboard-response'.\n\n\n\n\n\n\nparameter\n\n\nstring\n\n\nThe name of the parameter that is a media file. e.g., 'stimulus'\n\n\n\n\n\n\nmedia_type\n\n\nstring\n\n\nThe type of media, either 'image' or 'audio'.\n\n\n\n\n\n\nconditional_function\n\n\nfunction\n\n\nOnly run the preload for a trial if this function returns true, or if this function does not exist.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nNothing.\n\n\nDescription\n\u00b6\n\n\nUse this method in a plugin file to mark a parameter as containing an element that should be preloaded. The method should be called in the plugin file such that it gets called when the file is loaded.\n\n\nThe \nconditional_function\n function is passed a single argument containing the trial object.\n\n\nExample\n\u00b6\n\n\nFor an example, see the \nimage-keyboard-response\n and \naudio-keyboard-response\n plugins.\n\n\n\n\njsPsych.pluginAPI.setTimeout\n\u00b6\n\n\njsPsych.pluginAPI.setTimeout(callback, delay)\n\n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nA function to execute after waiting for delay.\n\n\n\n\n\n\ndelay\n\n\ninteger\n\n\nTime to wait in milliseconds.\n\n\n\n\n\n\n\n\nReturn value\n\u00b6\n\n\nReturns the ID of the setTimeout handle.\n\n\nDescription\n\u00b6\n\n\nThis is simply a call to the standard setTimeout function in JavaScript with the added benefit of registering the setTimeout call in a central list. This is useful for scenarios where some other event (the trial ending, aborting the experiment) should stop the execution of queued timeouts.\n\n\nExamples\n\u00b6\n\n\n// print the time\n\n\nconsole\n.\nlog\n(\nDate\n.\nnow\n())\n\n\n\n// print the time 1s later\n\n\njsPsych\n.\npluginAPI\n.\nsetTimeout\n(\nfunction\n(){\n\n    \nconsole\n.\nlog\n(\nDate\n.\nnow\n())\n\n\n},\n \n1000\n);",
            "title": "jsPsych.pluginAPI"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapi",
            "text": "The pluginAPI module contains functions that are useful when developing new plugins.",
            "title": "jsPsych.pluginAPI"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapiautopreload",
            "text": "jsPsych.pluginAPI.autoPreload(timeline, callback)",
            "title": "jsPsych.pluginAPI.autoPreload"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters",
            "text": "Parameter  Type  Description      timeline  TimelineNode object  A TimelineNode object that contains an arbitrary set of trials.    callback  function  A function to execute when loading is complete",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description",
            "text": "Attempts to preload all image files and audio files that will be used to run the trials on the timeline. Content will only preload from plugins that have used the  registerPreload  method to define the media types of their parameters.  The callback function executes once all of the files are preloaded.  This method is used internally by the core jsPsych code. It is not recommended that you call it manually.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#examples",
            "text": "// you probably shouldn't use this method",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapicancelallkeyboardresponses",
            "text": "jsPsych.pluginAPI.cancelAllKeyboardResponses()",
            "title": "jsPsych.pluginAPI.cancelAllKeyboardResponses"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_1",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_1",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_1",
            "text": "Cancels all currently active keyboard listeners created by  jsPsych.pluginAPI.getKeyboardResponse .",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#examples_1",
            "text": "jsPsych . pluginAPI . cancelAllKeyboardResponses ();",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapicancelkeyboardresponse",
            "text": "jsPsych.pluginAPI.cancelKeyboardResponse(listener_id)",
            "title": "jsPsych.pluginAPI.cancelKeyboardResponse"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_2",
            "text": "Parameter  Type  Description      listener_id  object  The listener_id object generated by the call to  jsPsych.pluginAPI.getKeyboardResponse .",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_2",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_2",
            "text": "Cancels a specific keyboard listener created by  jsPsych.pluginAPI.getKeyboardResponse .",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#examples_2",
            "text": "// create a persistent keyboard listener  var   listener_id   =   jsPsych . pluginAPI . getKeyboardResponse ( after_response ,   [ 'p' , 'q' ],   'date' ,   true );  // cancel keyboard listener  jsPsych . pluginAPI . cancelKeyboardResponse ( listener_id );",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapiclearalltimeouts",
            "text": "jsPsych.pluginAPI.clearAllTimeouts()",
            "title": "jsPsych.pluginAPI.clearAllTimeouts"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_3",
            "text": "None.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_3",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_3",
            "text": "Clears any pending timeouts that were set using jsPsych.pluginAPI.setTimeout()",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapicomparekeys",
            "text": "jsPsych.pluginAPI.compareKeys(key1, key2)",
            "title": "jsPsych.pluginAPI.compareKeys"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_4",
            "text": "Parameter  Type  Description      key1  string or numeric  The representation of a key, either string or keycode    key2  string or numeric  The representation of a key, either string or keycode",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_4",
            "text": "Returns true if keycodes or strings refer to the same key, regardless of type.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_4",
            "text": "Compares two keys to see if they are the same, ignoring differences in representational type.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#examples_3",
            "text": "jsPsych . pluginAPI . compareKeys ( 'a' ,   65 );  // returns true  jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'space' ,   31 )  // returns false",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapiconvertkeycharactertokeycode",
            "text": "jsPsych.pluginAPI.convertKeyCharacterToKeyCode(character)",
            "title": "jsPsych.pluginAPI.convertKeyCharacterToKeyCode"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_5",
            "text": "Parameter  Type  Description      character  string  The string representation of keyboard key.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_5",
            "text": "Returns the numeric keycode associated with the  character  parameter.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_5",
            "text": "Converts between the string representation of a key and the numeric key code associated with that key.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#examples_4",
            "text": "var   keycode   =   jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'a' )  // keycode is 65  keycode   =   jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'space' )  // keycode is 32",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapiconvertkeycodetokeycharacter",
            "text": "jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(character)",
            "title": "jsPsych.pluginAPI.convertKeyCodeToKeyCharacter"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_6",
            "text": "Parameter  Type  Description      code  numeric  The numeric representation of keyboard key.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_6",
            "text": "Returns the string representation of the key associated with the  code  parameter.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_6",
            "text": "Converts between the numeric key code of a key and the string representation associated with that key.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#examples_5",
            "text": "var   keycode   =   jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 65 )  // key is 'a'  keycode   =   jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 32 )  // keycode is 'space'",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapigetaudiobuffer",
            "text": "jsPsych.pluginAPI.getAudioBuffer(filepath)",
            "title": "jsPsych.pluginAPI.getAudioBuffer"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_7",
            "text": "Parameter  Type  Description      filepath  string  The path to the audio file that was preloaded.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_7",
            "text": "Returns buffered audio file for playback. If the browser supports it the buffer will be playable with the WebAudio API. Otherwise, the returned buffer will be an HTML5 Audio object.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_7",
            "text": "Gets an AudioBuffer that can be played with the WebAudio API or an Audio object that can be played with HTML5 Audio. The file must be preloaded with  preloadAudioFiles  or the automatic preload ( autoPreload ).",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#examples_6",
            "text": "// the code below is used to play audio in the audio-keyboard-response plugin  var   source   =   context . createBufferSource ();  source . buffer   =   jsPsych . pluginAPI . getAudioBuffer ( trial . stimulus );  source . connect ( context . destination );  startTime   =   context . currentTime ;  source . start ( startTime );",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapigetkeyboardresponse",
            "text": "jsPsych.pluginAPI.getKeyboardResponse(parameters)",
            "title": "jsPsych.pluginAPI.getKeyboardResponse"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_8",
            "text": "The method accepts an object of parameter values (see example below). The valid keys for this object are listed in the table below.     Parameter  Type  Description      callback_function  function  The function to execute whenever a valid keyboard response is generated.    valid_responses  array  An array of key codes or character strings representing valid responses. Responses not on the list will be ignored. An empty array indicates that all responses are acceptable.    rt_method  string  Indicates which method of recording time to use. The  'date'  method uses calls to  (new Date()).getTime()  to record timing information. The  'performance'  method uses calls to  performance.now() , which is a more modern JavaScript feature. The  'performance'  approach is  not supported by all the major browsers yet , but adoption rates are increasing. The  audio  method is used in conjuction with an  audio_context  (set as an additional parameter). This uses the clock time of the  audio_context  when audio stimuli are being played.    audio_context  AudioContext object  The AudioContext of the audio file that is being played.    audio_context_start_time  numeric  The scheduled time of the sound file in the AudioContext. This will be used as the start time.    allow_held_key  boolean  If  true , then responses will be registered from keys that are being held down. If  false , then a held key can only register a response the first time that  getKeyboardResponse  is called for that key. For example, if a participant holds down the  A  key before the experiment starts, then the first time  getKeyboardResponse  is called, the  A  will register as a key press. However, any future calls to  getKeyboardResponse  will not register the  A  until the participant releases the key and presses it again.    persist  boolean  If false, then the keyboard listener will only trigger the first time a valid key is pressed. If true, then it will trigger every time a valid key is pressed until it is explicitly cancelled by  jsPsych.pluginAPI.cancelKeyboardResponse  or  jsPsych.pluginAPI.cancelAllKeyboardResponses .",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_8",
            "text": "Return an object that uniquely identifies the keyboard listener. This object can be passed to  jsPsych.pluginAPI.cancelKeyboardResponse  to cancel the keyboard listener.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_8",
            "text": "Gets a keyboard response from the subject, recording the response time from when the function is first called until a valid response is generated.  A valid response triggers the  callback_function  specified in the parameters. A single argument is passed to the callback function. The argument contains an object with the properties  key  and  rt .  key  contains the numeric key code of the response, and  rt  contains the response time.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#examples_7",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#get-a-single-response-from-any-key",
            "text": "var   after_response   =   function ( info ){ \n     alert ( 'You pressed key ' + info . key + ' after ' + info . rt + 'ms' );  }  jsPsych . pluginAPI . getKeyboardResponse ({ \n   callback_function : after_response , \n   valid_responses :   [], \n   rt_method :   'date' , \n   persist :   false  });",
            "title": "Get a single response from any key"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#get-a-responses-from-a-key-until-the-letter-q-is-pressed",
            "text": "var   after_response   =   function ( info ){ \n     alert ( 'You pressed key ' + info . key + ' after ' + info . rt + 'ms' ); \n\n     if ( info . key   ==   81 ){   // the key code for 'Q' is 81. \n         jsPsych . pluginAPI . cancelKeyboardResponse ( listener ); \n     }  }  var   listener   =   jsPsych . pluginAPI . getKeyboardResponse ({ \n   callback_function : after_response , \n   valid_responses :   [], \n   rt_method :   'date' , \n   persist :   true  });",
            "title": "Get a responses from a key until the letter Q is pressed"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapipreloadaudiofiles",
            "text": "jsPsych.pluginAPI.preloadAudioFiles(files, callback_complete, callback_load)",
            "title": "jsPsych.pluginAPI.preloadAudioFiles"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_9",
            "text": "Parameter  Type  Description      files  array  An array of audio file paths to load. The array can be nested (e.g., if images are in multiple arrays to help sort by condition or task).    callback_complete  function  A function to execute when all the files have been loaded.    callback_load  function  A function to execute after each file has been loaded. A single parameter is passed to this function which contains the number of files that have been loaded so far.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_9",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_9",
            "text": "Use this function to preload audio files that are not part of a plugin with automatic preloading. Audio files in official plugins will automatically preload. See  Media Preloading  for more information.  It is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the files are loaded. Thus, it is possible that an audio file would be required for playing before it is done preloading. The  callback_complete  function will only execute after all the audio files are loaded, and can be used to control the flow of the experiment (e.g., by starting the experiment in the  callback_complete  function).  The  callback_load  function can be used to indicate progress. See example below.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#examples_8",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#basic-use",
            "text": "var   sounds   =   [ 'file1.mp3' ,   'file2.mp3' ,   'file3.mp3' ];  jsPsych . pluginAPI . preloadAudioFiles ( sounds ,   function (){   startExperiment ();   });  function   startExperiment (){ \n     jsPsych . init ({ \n         timeline :   exp \n     });  }",
            "title": "Basic use"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#show-progress-of-loading",
            "text": "var   sounds   =   [ 'file1.mp3' ,   'file2.mp3' ,   'file3.mp3' ];  jsPsych . pluginAPI . preloadAudioFiles ( sounds ,   function (){   startExperiment ();   },   function ( nLoaded )   {   updateLoadedCount ( nLoaded );   });  function   updateLoadedCount ( nLoaded ){ \n     var   percentcomplete   =   nLoaded   /   sounds . length   *   100 ; \n\n     // could put something fancier here, like a progress bar \n     // or updating text in the DOM. \n     console . log ( 'Loaded ' + percentcomplete + '% of audio files' );  }  function   startExperiment (){ \n     jsPsych . init ({ \n         timeline :   exp \n     });  }",
            "title": "Show progress of loading"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapipreloadimages",
            "text": "jsPsych.pluginAPI.preloadImages(images, callback_complete, callback_load)",
            "title": "jsPsych.pluginAPI.preloadImages"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_10",
            "text": "Parameter  Type  Description      images  array  An array of image paths to load. The array can be nested (e.g., if images are in multiple arrays to help sort by condition or task).    callback_complete  function  A function to execute when all the images have been loaded.    callback_load  function  A function to execute after each image has been loaded. A single parameter is passed to this function which contains the number of images that have been loaded so far.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_10",
            "text": "Returns nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_10",
            "text": "Use this function to preload image files that are not part of a plugin with automatic preloading. Image files in official plugins will automatically preload. See  Media Preloading  for more information.  It is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the images are loaded. Thus, it is possible that an image would be required for display before it is done preloading. The  callback_complete  function will only execute after all the images are loaded, and can be used to control the flow of the experiment (e.g., by starting the experiment in the  callback_complete  function).  The  callback_load  function can be used to indicate progress, if the number of images to be loaded is known ahead of time. See example below.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#examples_9",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#basic-use_1",
            "text": "var   images   =   [ 'img/file1.png' ,   'img/file2.png' ,   'img/file3.png' ];  jsPsych . pluginAPI . preloadImages ( images ,   function (){   startExperiment ();   });  function   startExperiment (){ \n     jsPsych . init ({ \n         timeline :   exp \n     });  }",
            "title": "Basic use"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#show-progress-of-loading_1",
            "text": "var   images   =   [ 'img/file1.png' ,   'img/file2.png' ,   'img/file3.png' ];  jsPsych . pluginAPI . preloadImages ( images ,   function (){   startExperiment ();   },   function ( nLoaded )   {   updateLoadedCount ( nLoaded );   });  function   updateLoadedCount ( nLoaded ){ \n     var   percentcomplete   =   nLoaded   /   images . length   *   100 ; \n\n     // could put something fancier here, like a progress bar \n     // or updating text in the DOM. \n     console . log ( 'Loaded ' + percentcomplete + '% of images' );  }  function   startExperiment (){ \n     jsPsych . init ({ \n         timeline :   exp \n     });  }",
            "title": "Show progress of loading"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapiregisterpreload",
            "text": "jsPsych.pluginAPI.registerPreload(plugin_name, parameter, media_type, conditional_function)",
            "title": "jsPsych.pluginAPI.registerPreload"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_11",
            "text": "Parameter  Type  Description      plugin_name  string  The name of the plugin. e.g., 'image-keyboard-response'.    parameter  string  The name of the parameter that is a media file. e.g., 'stimulus'    media_type  string  The type of media, either 'image' or 'audio'.    conditional_function  function  Only run the preload for a trial if this function returns true, or if this function does not exist.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_11",
            "text": "Nothing.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_11",
            "text": "Use this method in a plugin file to mark a parameter as containing an element that should be preloaded. The method should be called in the plugin file such that it gets called when the file is loaded.  The  conditional_function  function is passed a single argument containing the trial object.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#example",
            "text": "For an example, see the  image-keyboard-response  and  audio-keyboard-response  plugins.",
            "title": "Example"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapisettimeout",
            "text": "jsPsych.pluginAPI.setTimeout(callback, delay)",
            "title": "jsPsych.pluginAPI.setTimeout"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#parameters_12",
            "text": "Parameter  Type  Description      callback  function  A function to execute after waiting for delay.    delay  integer  Time to wait in milliseconds.",
            "title": "Parameters"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#return-value_12",
            "text": "Returns the ID of the setTimeout handle.",
            "title": "Return value"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#description_12",
            "text": "This is simply a call to the standard setTimeout function in JavaScript with the added benefit of registering the setTimeout call in a central list. This is useful for scenarios where some other event (the trial ending, aborting the experiment) should stop the execution of queued timeouts.",
            "title": "Description"
        },
        {
            "location": "/core_library/jspsych-pluginAPI/#examples_10",
            "text": "// print the time  console . log ( Date . now ())  // print the time 1s later  jsPsych . pluginAPI . setTimeout ( function (){ \n     console . log ( Date . now ())  },   1000 );",
            "title": "Examples"
        },
        {
            "location": "/plugins/overview/",
            "text": "Plugins\n\u00b6\n\n\nIn jsPsych, plugins define the kinds of tasks that subjects perform in experiments. Some plugins define very general tasks, like displaying instructions or displaying a visual stimulus and getting a keyboard response. Other plugins are more specific, displaying particular kinds of interactive stimuli, or running a specific version of particular kind of task. Creating an experiment with jsPsych involves figuring out which plugins are needed for the kinds of tasks you want to have your subjects perform.\n\n\nPlugins provide a structure for a particular task, but often allow for significant customization and flexibility. For example, the \njspsych-image-keyboard-response\n plugin defines a simple structure for showing an image and collecting a keyboard response. You can specify the what the stimulus is, what keys the subject is allowed to press, and how long the stimulus should be on the screen, how long the subject has to respond, and so on. Many of these content options have reasonable default values; even though the \njspsych-image-keyboard-response\n plugin has many different options, you only \nneed\n to specify the stimulus in order to use it. Each plugin has its own documentation page, which describes what the plugin does and what options are available.\n\n\nUsing a plugin\n\u00b6\n\n\nTo use a plugin, you'll need to load the plugin's JavaScript file on your experiment page:\n\n\n<\nhead\n>\n\n\n<\nscript\n \nsrc\n=\n\"jspsych/plugins/jspsych-image-keyboard-response.js\"\n \ntype\n=\n\"text/javascript\"\n></\nscript\n>\n\n\n</\nhead\n>\n\n\n\n\n\n\nOnce a plugin is loaded, you can define a trial that uses that plugin. The following JavaScript code defines a trial using the \njspsych-image-keyboard-response\n plugin to display an image file ('images/happy_face.jpg'). This trial uses the default values for valid keys, length of display, and other parameters. You could override these values by adding them to the object.\n\n\nvar\n \nsingle_stim_trial\n \n=\n \n{\n\n    \ntype\n:\n \n'image-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'images/happy_face.jpg'\n\n\n}\n\n\n\n\n\n\nHere's an exampe of overriding the default value for \npost_trial_gap\n:\n\n\nvar\n \nsingle_stim_trial\n \n=\n \n{\n\n    \ntype\n:\n \n'image-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'images/happy_face.jpg'\n,\n\n    \npost_trial_gap\n:\n \n2000\n\n\n}\n\n\n\n\n\n\nParameters available in all plugins\n\u00b6\n\n\nEach plugin specifies its own set of parameters. Check the documentation for a plugin to see what parameters are available and what they do.\n\n\nIn addition, there is a set of parameters that can be specified for any plugin.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npost_trial_gap\n\n\nnumeric\n\n\nnull\n\n\nSets the time, in milliseconds, between the current trial and the next trial. If null, there will be no gap.\n\n\n\n\n\n\non_finish\n\n\nfunction\n\n\nfunction(){ return; }\n\n\nA callback function to execute when the trial finishes. See \nthis page\n for more details.\n\n\n\n\n\n\non_start\n\n\nfunction\n\n\nfunction(){ return; }\n\n\nA callback function to execute when the trial begins, before any loading has occurred. See \nthis page\n for more details.\n\n\n\n\n\n\non_load\n\n\nfunction\n\n\nfunction(){ return; }\n\n\nA callback function to execute when the trial has loaded, which typically happens after the initial display of the plugin has loaded. See \nthis page\n for more details.\n\n\n\n\n\n\ndata\n\n\nobject\n\n\nundefined\n\n\nAn object containing additional data to store for the trial. See \nthis page\n for more details.\n\n\n\n\n\n\n\n\nData collected by plugins\n\u00b6\n\n\nEach plugin defines what data is collected on the trial. The documentation for each plugin specifies what data is collected by that plugin.\n\n\nIn addition to the data collected by a plugin, there is a default set of data that is collected on every trial. The collected data are:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ntrial_type\n\n\nstring\n\n\nThe name of the plugin used to run the trial.\n\n\n\n\n\n\ntrial_index\n\n\nnumeric\n\n\nThe index of the current trial across the whole experiment.\n\n\n\n\n\n\ntime_elapsed\n\n\nnumeric\n\n\nThe number of milliseconds since the start of the experiment when the trial ended.\n\n\n\n\n\n\ninternal_node_id\n\n\nstring\n\n\nA string identifier for the current TimelineNode.\n\n\n\n\n\n\n\n\nList of available plugins\n\u00b6\n\n\nThis table is a description of all plugins that are distributed with jsPsych. Click on the name of a plugin to view its documentation page.\n\n\n\n\n\n\n\n\nPlugin\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\njspsych\u2011animation\n\n\nShows a sequence of images at a specified frame rate. Records key presses (including timing information) made by the subject while they are viewing the animation.\n\n\n\n\n\n\njspsych\u2011audio\u2011button\u2011response\n\n\nPlay an audio file and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons.\n\n\n\n\n\n\njspsych\u2011audio\u2011keyboard\u2011response\n\n\nPlay an audio file and allow the subject to respond by pressing a key.\n\n\n\n\n\n\njspsych\u2011audio\u2011slider\u2011response\n\n\nPlay an audio file and allow the subject to respond by moving a slider to indicate a value.\n\n\n\n\n\n\njspsych\u2011call\u2011function\n\n\nExecutes an arbitrary function call. Doesn't display anything to the subject, and the subject is usually unaware that this plugin has even executed. It's useful for performing tasks at specified times in the experiment, such as saving data.\n\n\n\n\n\n\njspsych\u2011categorize\u2011animation\n\n\nThe subject responds to an animation and can be given feedback about their response.\n\n\n\n\n\n\njspsych\u2011categorize\u2011html\n\n\nThe subject responds to an HTML-formatted stimulus using the keyboard and can be given feedback about the correctness of their response.\n\n\n\n\n\n\njspsych\u2011categorize\u2011image\n\n\nThe subject responds to an image using the keyboard and can be given feedback about the correctness of their response.\n\n\n\n\n\n\njspsych\u2011external\u2011html\n\n\nDisplays an external HTML page (such as a consent form) and lets the subject respond by clicking a button or pressing a key. Plugin can validate their response, which is useful for making sure that a subject has granted consent before starting the experiment.\n\n\n\n\n\n\njspsych\u2011free\u2011sort\n\n\nDisplays a set of images on the screen in random locations. Subjects can click and drag the images to move them around the screen. Records all the moves made by the subject, so the sequence of moves can be recovered from the data.\n\n\n\n\n\n\njspsych\u2011fullscreen\n\n\nToggles the experiment in and out of fullscreen mode.\n\n\n\n\n\n\njspsych\u2011html\u2011button\u2011response\n\n\nDisplay an HTML-formatted stimulus and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons.\n\n\n\n\n\n\njspsych\u2011html\u2011keyboard\u2011response\n\n\nDisplay an HTML-formatted stimulus and allow the subject to respond by pressing a key.\n\n\n\n\n\n\njspsych\u2011html\u2011slider\u2011response\n\n\nDisplay an HTML-formatted stimulus and allow the subject to respond by moving a slider to indicate a value.\n\n\n\n\n\n\njspsych\u2011iat\u2011html\n\n\nThe implicit association task, using HTML-formatted stimuli.\n\n\n\n\n\n\njspsych\u2011iat\u2011image\n\n\nThe implicit association task, using images as stimuli.\n\n\n\n\n\n\njspsych\u2011image\u2011button\u2011response\n\n\nDisplay an image and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons.\n\n\n\n\n\n\njspsych\u2011image\u2011keyboard\u2011response\n\n\nDisplay an image and allow the subject to respond by pressing a key.\n\n\n\n\n\n\njspsych\u2011image\u2011slider\u2011response\n\n\nDisplay an image and allow the subject to respond by moving a slider to indicate a value.\n\n\n\n\n\n\njspsych\u2011instructions\n\n\nFor displaying instructions to the subject. Allows the subject to navigate between pages of instructions using keys or buttons.\n\n\n\n\n\n\njspsych\u2011reconstruction\n\n\nThe subject interacts with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time.\n\n\n\n\n\n\njspsych\u2011resize\n\n\nCalibrate the display so that materials display with a known physical size.\n\n\n\n\n\n\njspsych\u2011same\u2011different\u2011html\n\n\nA same-different judgment task. An HTML-formatted stimulus is shown, followed by a brief gap, and then another stimulus is shown. The subject indicates whether the stimuli are the same or different.\n\n\n\n\n\n\njspsych\u2011same\u2011different\u2011image\n\n\nA same-different judgment task. An image is shown, followed by a brief gap, and then another stimulus is shown. The subject indicates whether the stimuli are the same or different.\n\n\n\n\n\n\njspsych\u2011serial\u2011reaction\u2011time\n\n\nA set of boxes are displayed on the screen and one of them changes color. The subject presses a key that corresponds to the different color box as fast as possible.\n\n\n\n\n\n\njspsych\u2011serial\u2011reaction\u2011time\u2011mouse\n\n\nA set of boxes are displayed on the screen and one of them changes color. The subjects clicks the box that changed color as fast as possible.\n\n\n\n\n\n\njspsych\u2011survey\u2011likert\n\n\nDisplays likert-style questions.\n\n\n\n\n\n\njspsych\u2011survey\u2011multi\u2011choice\n\n\nDisplays multiple choice questions with one answer allowed per question.\n\n\n\n\n\n\njspsych\u2011survey\u2011multi\u2011select\n\n\nDisplays multiple choice questions with multiple answes allowed per question.\n\n\n\n\n\n\njspsych\u2011survey\u2011text\n\n\nShows a prompt with a text box. The subject writes a response and then submits by clicking a button.\n\n\n\n\n\n\njspsych\u2011video\n\n\nDisplays a video file and autoadvances to the next trial when the video is complete.\n\n\n\n\n\n\njspsych\u2011visual\u2011search\u2011circle\n\n\nA customizable visual-search task modelled after \nWang, Cavanagh, & Green (1994)\n. The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point.\n\n\n\n\n\n\njspsych\u2011vsl\u2011animate\u2011occlusion\n\n\nA visual statistical learning paradigm based on \nFiser & Aslin (2002)\n. A sequence of stimuli are shown in an oscillatory motion. An occluding rectangle is in the center of the display, and the stimuli change when they are behind the rectangle.\n\n\n\n\n\n\njspsych\u2011vsl\u2011grid\u2011scene\n\n\nA visual statistical learning paradigm based on \nFiser & Aslin (2001)\n. A scene made up of individual stimuli arranged in a grid is shown. This plugin can also generate the HTML code to render the stimuli for use in other plugins.",
            "title": "Overview"
        },
        {
            "location": "/plugins/overview/#plugins",
            "text": "In jsPsych, plugins define the kinds of tasks that subjects perform in experiments. Some plugins define very general tasks, like displaying instructions or displaying a visual stimulus and getting a keyboard response. Other plugins are more specific, displaying particular kinds of interactive stimuli, or running a specific version of particular kind of task. Creating an experiment with jsPsych involves figuring out which plugins are needed for the kinds of tasks you want to have your subjects perform.  Plugins provide a structure for a particular task, but often allow for significant customization and flexibility. For example, the  jspsych-image-keyboard-response  plugin defines a simple structure for showing an image and collecting a keyboard response. You can specify the what the stimulus is, what keys the subject is allowed to press, and how long the stimulus should be on the screen, how long the subject has to respond, and so on. Many of these content options have reasonable default values; even though the  jspsych-image-keyboard-response  plugin has many different options, you only  need  to specify the stimulus in order to use it. Each plugin has its own documentation page, which describes what the plugin does and what options are available.",
            "title": "Plugins"
        },
        {
            "location": "/plugins/overview/#using-a-plugin",
            "text": "To use a plugin, you'll need to load the plugin's JavaScript file on your experiment page:  < head >  < script   src = \"jspsych/plugins/jspsych-image-keyboard-response.js\"   type = \"text/javascript\" ></ script >  </ head >   Once a plugin is loaded, you can define a trial that uses that plugin. The following JavaScript code defines a trial using the  jspsych-image-keyboard-response  plugin to display an image file ('images/happy_face.jpg'). This trial uses the default values for valid keys, length of display, and other parameters. You could override these values by adding them to the object.  var   single_stim_trial   =   { \n     type :   'image-keyboard-response' , \n     stimulus :   'images/happy_face.jpg'  }   Here's an exampe of overriding the default value for  post_trial_gap :  var   single_stim_trial   =   { \n     type :   'image-keyboard-response' , \n     stimulus :   'images/happy_face.jpg' , \n     post_trial_gap :   2000  }",
            "title": "Using a plugin"
        },
        {
            "location": "/plugins/overview/#parameters-available-in-all-plugins",
            "text": "Each plugin specifies its own set of parameters. Check the documentation for a plugin to see what parameters are available and what they do.  In addition, there is a set of parameters that can be specified for any plugin.     Parameter  Type  Default Value  Description      post_trial_gap  numeric  null  Sets the time, in milliseconds, between the current trial and the next trial. If null, there will be no gap.    on_finish  function  function(){ return; }  A callback function to execute when the trial finishes. See  this page  for more details.    on_start  function  function(){ return; }  A callback function to execute when the trial begins, before any loading has occurred. See  this page  for more details.    on_load  function  function(){ return; }  A callback function to execute when the trial has loaded, which typically happens after the initial display of the plugin has loaded. See  this page  for more details.    data  object  undefined  An object containing additional data to store for the trial. See  this page  for more details.",
            "title": "Parameters available in all plugins"
        },
        {
            "location": "/plugins/overview/#data-collected-by-plugins",
            "text": "Each plugin defines what data is collected on the trial. The documentation for each plugin specifies what data is collected by that plugin.  In addition to the data collected by a plugin, there is a default set of data that is collected on every trial. The collected data are:     Name  Type  Value      trial_type  string  The name of the plugin used to run the trial.    trial_index  numeric  The index of the current trial across the whole experiment.    time_elapsed  numeric  The number of milliseconds since the start of the experiment when the trial ended.    internal_node_id  string  A string identifier for the current TimelineNode.",
            "title": "Data collected by plugins"
        },
        {
            "location": "/plugins/overview/#list-of-available-plugins",
            "text": "This table is a description of all plugins that are distributed with jsPsych. Click on the name of a plugin to view its documentation page.     Plugin  Description      jspsych\u2011animation  Shows a sequence of images at a specified frame rate. Records key presses (including timing information) made by the subject while they are viewing the animation.    jspsych\u2011audio\u2011button\u2011response  Play an audio file and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons.    jspsych\u2011audio\u2011keyboard\u2011response  Play an audio file and allow the subject to respond by pressing a key.    jspsych\u2011audio\u2011slider\u2011response  Play an audio file and allow the subject to respond by moving a slider to indicate a value.    jspsych\u2011call\u2011function  Executes an arbitrary function call. Doesn't display anything to the subject, and the subject is usually unaware that this plugin has even executed. It's useful for performing tasks at specified times in the experiment, such as saving data.    jspsych\u2011categorize\u2011animation  The subject responds to an animation and can be given feedback about their response.    jspsych\u2011categorize\u2011html  The subject responds to an HTML-formatted stimulus using the keyboard and can be given feedback about the correctness of their response.    jspsych\u2011categorize\u2011image  The subject responds to an image using the keyboard and can be given feedback about the correctness of their response.    jspsych\u2011external\u2011html  Displays an external HTML page (such as a consent form) and lets the subject respond by clicking a button or pressing a key. Plugin can validate their response, which is useful for making sure that a subject has granted consent before starting the experiment.    jspsych\u2011free\u2011sort  Displays a set of images on the screen in random locations. Subjects can click and drag the images to move them around the screen. Records all the moves made by the subject, so the sequence of moves can be recovered from the data.    jspsych\u2011fullscreen  Toggles the experiment in and out of fullscreen mode.    jspsych\u2011html\u2011button\u2011response  Display an HTML-formatted stimulus and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons.    jspsych\u2011html\u2011keyboard\u2011response  Display an HTML-formatted stimulus and allow the subject to respond by pressing a key.    jspsych\u2011html\u2011slider\u2011response  Display an HTML-formatted stimulus and allow the subject to respond by moving a slider to indicate a value.    jspsych\u2011iat\u2011html  The implicit association task, using HTML-formatted stimuli.    jspsych\u2011iat\u2011image  The implicit association task, using images as stimuli.    jspsych\u2011image\u2011button\u2011response  Display an image and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons.    jspsych\u2011image\u2011keyboard\u2011response  Display an image and allow the subject to respond by pressing a key.    jspsych\u2011image\u2011slider\u2011response  Display an image and allow the subject to respond by moving a slider to indicate a value.    jspsych\u2011instructions  For displaying instructions to the subject. Allows the subject to navigate between pages of instructions using keys or buttons.    jspsych\u2011reconstruction  The subject interacts with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time.    jspsych\u2011resize  Calibrate the display so that materials display with a known physical size.    jspsych\u2011same\u2011different\u2011html  A same-different judgment task. An HTML-formatted stimulus is shown, followed by a brief gap, and then another stimulus is shown. The subject indicates whether the stimuli are the same or different.    jspsych\u2011same\u2011different\u2011image  A same-different judgment task. An image is shown, followed by a brief gap, and then another stimulus is shown. The subject indicates whether the stimuli are the same or different.    jspsych\u2011serial\u2011reaction\u2011time  A set of boxes are displayed on the screen and one of them changes color. The subject presses a key that corresponds to the different color box as fast as possible.    jspsych\u2011serial\u2011reaction\u2011time\u2011mouse  A set of boxes are displayed on the screen and one of them changes color. The subjects clicks the box that changed color as fast as possible.    jspsych\u2011survey\u2011likert  Displays likert-style questions.    jspsych\u2011survey\u2011multi\u2011choice  Displays multiple choice questions with one answer allowed per question.    jspsych\u2011survey\u2011multi\u2011select  Displays multiple choice questions with multiple answes allowed per question.    jspsych\u2011survey\u2011text  Shows a prompt with a text box. The subject writes a response and then submits by clicking a button.    jspsych\u2011video  Displays a video file and autoadvances to the next trial when the video is complete.    jspsych\u2011visual\u2011search\u2011circle  A customizable visual-search task modelled after  Wang, Cavanagh, & Green (1994) . The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point.    jspsych\u2011vsl\u2011animate\u2011occlusion  A visual statistical learning paradigm based on  Fiser & Aslin (2002) . A sequence of stimuli are shown in an oscillatory motion. An occluding rectangle is in the center of the display, and the stimuli change when they are behind the rectangle.    jspsych\u2011vsl\u2011grid\u2011scene  A visual statistical learning paradigm based on  Fiser & Aslin (2001) . A scene made up of individual stimuli arranged in a grid is shown. This plugin can also generate the HTML code to render the stimuli for use in other plugins.",
            "title": "List of available plugins"
        },
        {
            "location": "/plugins/creating-a-plugin/",
            "text": "Creating a new plugin\n\u00b6\n\n\nCreating new plugins is the way to add new kinds of tasks to jsPsych. A task can be virtually any kind of activity. If it can be implemented in JavaScript, then it almost certainly can be turned into a plugin.\n\n\nWhat's in a plugin file?\n\u00b6\n\n\nPlugin files follow a specific template. Adherence to the template is what allows jsPsych to run a plugin without knowing anything about what the plugin is doing. What makes plugins so flexible is that the template imposes very few requirements on the code. Here's what an empty plugin template looks like:\n\n\njsPsych.plugins['plugin-name'] = (function(){\n\n  var plugin = {};\n\n  plugin.info = {\n    name: 'plugin-name',\n    parameters: {\n    }\n  }\n\n  plugin.trial = function(display_element, trial){\n    jsPsych.finishTrial();\n  }\n\n  return plugin;\n\n})();\n\n\n\n\n\nThis plugin will work! It defines a plugin called 'plugin-name', and it does absolutely nothing. However, it won't break the experiment, and jsPsych will understand that this is a valid plugin.\n\n\nLet's examine it in more detail.\n\n\nThe overall structure of the plugin is defined using a module JavaScript design pattern. This pattern uses a technique called an anonymous closure. This is why the first line has \n(function(){\n and the last line is \n})();\n. The details aren't important, but if you want to learn more about it, \nthis is a nice overview\n. The reason this pattern is useful is because it allows for persistent state and private scope. In other words, the plugin is isolated and can't be altered by other plugins.\n\n\nThe module, created by the \n(function(){\n  \n})();\n expressions, contains an object called \nplugin\n that has two properties, \ninfo\n and \ntrial\n. The \nplugin\n object is returned at the end of the module, which is what assigns the defined properties of \nplugin\n to \njsPsych['plugin-name']\n.\n\n\nplugin.trial\n\u00b6\n\n\nThe \ntrial\n method is responsible for running a single trial. There are two parameters that are passed into the trial method. The first, \ndisplay_element\n, is the DOM element where jsPsych content is being rendered. This parameter will be an \nHTMLElement\n. Generally, you don't need to worry about this parameter being in the correct format, and can assume that it is an \nHMTLElement\n and use methods of that class. The second, \ntrial\n, is an object containing all of the parameters specified in the corresponding TimelineNode.\n\n\nThe only requirement for the \ntrial\n method is that it calls \njsPsych.finishTrial()\n when it is done. This is how jsPsych knows to advance to the next trial in the experiment (or end the experiment if it is the last trial). The plugin can do whatever it needs to do before that point.\n\n\nOf course, there are other things that you will probably want the plugin to do besides just end. Here are some examples:\n\n\nChange the content of the display\n\u00b6\n\n\nThere are a few ways to change the content of the display. The \ndisplay_element\n parameter of the trial method contains the DOM element for displaying content, so you can use various JavaScript methods for interaction with the display element. A common one is to change the \ninnerHTML\n.\n\n\nvar\n \nhtml_content\n \n=\n \n'<p>This is the first paragraph</p>'\n;\n\n\nhtml_content\n \n+=\n \n'<p>This is the second paragraph</p>'\n;\n\n\n\ndisplay_element\n.\ninnerHTML\n \n=\n \nhtml_content\n;\n\n\n\n\n\n\nIt is often appropriate to use \ninnerHTML\n to clear the display at the end of a trial:\n\n\n// clear the display\n\n\ndisplay_element\n.\ninnerHTML\n \n=\n \n''\n;\n\n\n\n\n\n\nWrite data\n\u00b6\n\n\nPlugins exist to collect data, so saving data is obviously a crucial thing to do. You can pass an object of data as the parameter to \njsPsych.finishTrial()\n:\n\n\nvar\n \ndata\n \n=\n \n{\n\n  \ncorrect\n:\n \ntrue\n,\n\n  \nrt\n:\n \n350\n\n\n}\n\n\n\njsPsych\n.\nfinishTrial\n(\ndata\n)\n\n\n\n\n\n\nThe data recorded will be that \ncorrect\n is \ntrue\n and that \nrt\n is \n350\n. Additional data for the trial will also be collected automatically by the jsPsych library.\n\n\nThe plugin template\n\u00b6\n\n\nAn empty plugin template is included in the \nplugins/template\n folder.",
            "title": "Creating a New Plugin"
        },
        {
            "location": "/plugins/creating-a-plugin/#creating-a-new-plugin",
            "text": "Creating new plugins is the way to add new kinds of tasks to jsPsych. A task can be virtually any kind of activity. If it can be implemented in JavaScript, then it almost certainly can be turned into a plugin.",
            "title": "Creating a new plugin"
        },
        {
            "location": "/plugins/creating-a-plugin/#whats-in-a-plugin-file",
            "text": "Plugin files follow a specific template. Adherence to the template is what allows jsPsych to run a plugin without knowing anything about what the plugin is doing. What makes plugins so flexible is that the template imposes very few requirements on the code. Here's what an empty plugin template looks like:  jsPsych.plugins['plugin-name'] = (function(){\n\n  var plugin = {};\n\n  plugin.info = {\n    name: 'plugin-name',\n    parameters: {\n    }\n  }\n\n  plugin.trial = function(display_element, trial){\n    jsPsych.finishTrial();\n  }\n\n  return plugin;\n\n})();  This plugin will work! It defines a plugin called 'plugin-name', and it does absolutely nothing. However, it won't break the experiment, and jsPsych will understand that this is a valid plugin.  Let's examine it in more detail.  The overall structure of the plugin is defined using a module JavaScript design pattern. This pattern uses a technique called an anonymous closure. This is why the first line has  (function(){  and the last line is  })(); . The details aren't important, but if you want to learn more about it,  this is a nice overview . The reason this pattern is useful is because it allows for persistent state and private scope. In other words, the plugin is isolated and can't be altered by other plugins.  The module, created by the  (function(){    })();  expressions, contains an object called  plugin  that has two properties,  info  and  trial . The  plugin  object is returned at the end of the module, which is what assigns the defined properties of  plugin  to  jsPsych['plugin-name'] .",
            "title": "What's in a plugin file?"
        },
        {
            "location": "/plugins/creating-a-plugin/#plugintrial",
            "text": "The  trial  method is responsible for running a single trial. There are two parameters that are passed into the trial method. The first,  display_element , is the DOM element where jsPsych content is being rendered. This parameter will be an  HTMLElement . Generally, you don't need to worry about this parameter being in the correct format, and can assume that it is an  HMTLElement  and use methods of that class. The second,  trial , is an object containing all of the parameters specified in the corresponding TimelineNode.  The only requirement for the  trial  method is that it calls  jsPsych.finishTrial()  when it is done. This is how jsPsych knows to advance to the next trial in the experiment (or end the experiment if it is the last trial). The plugin can do whatever it needs to do before that point.  Of course, there are other things that you will probably want the plugin to do besides just end. Here are some examples:",
            "title": "plugin.trial"
        },
        {
            "location": "/plugins/creating-a-plugin/#change-the-content-of-the-display",
            "text": "There are a few ways to change the content of the display. The  display_element  parameter of the trial method contains the DOM element for displaying content, so you can use various JavaScript methods for interaction with the display element. A common one is to change the  innerHTML .  var   html_content   =   '<p>This is the first paragraph</p>' ;  html_content   +=   '<p>This is the second paragraph</p>' ;  display_element . innerHTML   =   html_content ;   It is often appropriate to use  innerHTML  to clear the display at the end of a trial:  // clear the display  display_element . innerHTML   =   '' ;",
            "title": "Change the content of the display"
        },
        {
            "location": "/plugins/creating-a-plugin/#write-data",
            "text": "Plugins exist to collect data, so saving data is obviously a crucial thing to do. You can pass an object of data as the parameter to  jsPsych.finishTrial() :  var   data   =   { \n   correct :   true , \n   rt :   350  }  jsPsych . finishTrial ( data )   The data recorded will be that  correct  is  true  and that  rt  is  350 . Additional data for the trial will also be collected automatically by the jsPsych library.",
            "title": "Write data"
        },
        {
            "location": "/plugins/creating-a-plugin/#the-plugin-template",
            "text": "An empty plugin template is included in the  plugins/template  folder.",
            "title": "The plugin template"
        },
        {
            "location": "/plugins/jspsych-animation/",
            "text": "jspsych-animation\n\u00b6\n\n\nThis plugin displays a sequence of images at a fixed frame rate. The sequence can be looped a specified number of times. The subject is free to respond at any point during the animation, and the time of the response is recorded.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nEach element of the array is a path to an image file.\n\n\n\n\n\n\nframe_time\n\n\nnumeric\n\n\n250\n\n\nHow long to display each image (in milliseconds).\n\n\n\n\n\n\nframe_isi\n\n\nnumeric\n\n\n0\n\n\nIf greater than 0, then a gap will be shown between each image in the sequence. This parameter specifies the length of the gap.\n\n\n\n\n\n\nsequence_reps\n\n\nnumeric\n\n\n1\n\n\nHow many times to show the entire sequence. There will be no gap (other than the gap specified by \nframe_isi\n) between repetitions.\n\n\n\n\n\n\nchoices\n\n\narray of keycodes\n\n\njsPsych.ALL_KEYS\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g., \n'a'\n, \n'q'\n). The default value of \njsPsych.ALL_KEYS\n means that all keys will be accepted as valid responses. Specifying \njsPsych.NO_KEYS\n will mean that no responses are allowed.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key(s) to press).\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nanimation_sequence\n\n\nJSON\n\n\nAn array, encoded in JSON format. Each element of the array is an object that represents a stimulus in the animation sequence. Each object has a \nstimulus\n property, which is the image that was displayed, and a \ntime\n property, which is the time in ms, measured from when the sequence began, that the stimulus was displayed.\n\n\n\n\n\n\nresponses\n\n\nJSON\n\n\nAn array, encoded in JSON format. Each element of the array is an object representing a response given by the subject. Each object has a \nstimulus\n property, indicating which image was displayed when the key was pressed, an \nrt\n property, indicating the time of the key press relative to the start of the animation, and a \nkey_press\n property, indicating which key was pressed.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nDisplaying a single sequence multiple times\n\u00b6\n\n\nvar\n \nanimation_sequence\n \n=\n \n[\n\"img/face_1.jpg\"\n,\n \n\"img/face_2.jpg\"\n,\n \n\"img/face_3.jpg\"\n,\n \n\"img/face_4.jpg\"\n,\n \n\"img/face_3.jpg\"\n,\n \n\"img/face_2.jpg\"\n];\n\n\n\nvar\n \nanimation_trial\n \n=\n \n{\n\n    \ntype\n:\n \n'animation'\n,\n\n    \nstimuli\n:\n \nanimation_sequence\n,\n\n    \nsequence_reps\n:\n \n3\n\n\n};",
            "title": "jspsych-animation"
        },
        {
            "location": "/plugins/jspsych-animation/#jspsych-animation",
            "text": "This plugin displays a sequence of images at a fixed frame rate. The sequence can be looped a specified number of times. The subject is free to respond at any point during the animation, and the time of the response is recorded.",
            "title": "jspsych-animation"
        },
        {
            "location": "/plugins/jspsych-animation/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  Each element of the array is a path to an image file.    frame_time  numeric  250  How long to display each image (in milliseconds).    frame_isi  numeric  0  If greater than 0, then a gap will be shown between each image in the sequence. This parameter specifies the length of the gap.    sequence_reps  numeric  1  How many times to show the entire sequence. There will be no gap (other than the gap specified by  frame_isi ) between repetitions.    choices  array of keycodes  jsPsych.ALL_KEYS  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.,  'a' ,  'q' ). The default value of  jsPsych.ALL_KEYS  means that all keys will be accepted as valid responses. Specifying  jsPsych.NO_KEYS  will mean that no responses are allowed.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key(s) to press).",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-animation/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      animation_sequence  JSON  An array, encoded in JSON format. Each element of the array is an object that represents a stimulus in the animation sequence. Each object has a  stimulus  property, which is the image that was displayed, and a  time  property, which is the time in ms, measured from when the sequence began, that the stimulus was displayed.    responses  JSON  An array, encoded in JSON format. Each element of the array is an object representing a response given by the subject. Each object has a  stimulus  property, indicating which image was displayed when the key was pressed, an  rt  property, indicating the time of the key press relative to the start of the animation, and a  key_press  property, indicating which key was pressed.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-animation/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-animation/#displaying-a-single-sequence-multiple-times",
            "text": "var   animation_sequence   =   [ \"img/face_1.jpg\" ,   \"img/face_2.jpg\" ,   \"img/face_3.jpg\" ,   \"img/face_4.jpg\" ,   \"img/face_3.jpg\" ,   \"img/face_2.jpg\" ];  var   animation_trial   =   { \n     type :   'animation' , \n     stimuli :   animation_sequence , \n     sequence_reps :   3  };",
            "title": "Displaying a single sequence multiple times"
        },
        {
            "location": "/plugins/jspsych-audio-button-response/",
            "text": "jspsych-audio-button-response\n\u00b6\n\n\nThis plugin plays audio files and records responses generated with a button click.\n\n\nIf the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych.\n\n\nThe trial can end when the subject responds, when the audio file has finished playing, or if the subject has failed to respond within a fixed length of time.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\naudio file\n\n\nundefined\n\n\nPath to audio file to be played.\n\n\n\n\n\n\nchoices\n\n\narray of strings\n\n\n[]\n\n\nLabels for the buttons. Each different string in the array will generate a different button.\n\n\n\n\n\n\nbutton_html\n\n\nHTML string\n\n\n'<button class=\"jspsych-btn\">%choice%</button>'\n\n\nA template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string \n%choice%\n will be changed to the corresponding element of the \nchoices\n array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the \nchoices\n array and this array must have the same length. The HTML from position 0 in the \nbutton_html\n array will be used to create the button for element 0 in the \nchoices\n array, and so on.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely.\n\n\n\n\n\n\nmargin_vertical\n\n\nstring\n\n\n'0px'\n\n\nVertical margin of the button(s).\n\n\n\n\n\n\nmargin_horizontal\n\n\nstring\n\n\n'8px'\n\n\nHorizontal margin of the button(s).\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntrial_duration\n parameter). If false, then the trial will continue until the value for \ntiming_response\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\ntrial_ends_after_audio\n\n\nboolean\n\n\nfalse\n\n\nIf true, then the trial will end as soon as the audio file finishes playing.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\nbutton_pressed\n\n\nnumeric\n\n\nIndicates which button the subject pressed. The first button in the \nchoices\n array is 0, the second is 1, and so on.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nDisplaying question until subject gives a response\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'audio-button-response'\n,\n\n    \nstimulus\n:\n \n'sound/tone.mp3'\n,\n\n    \nchoices\n:\n \n[\n'Low'\n,\n \n'High'\n],\n\n    \nprompt\n:\n \n\"<p>Is the pitch high or low?</p>\"\n\n\n};\n\n\n\n\n\n\nUsing custom button HTML to use images as buttons\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'audio-button-response'\n,\n\n    \nstimulus\n:\n \n'sound/roar.mp3'\n,\n\n    \nchoices\n:\n \n[\n'lion.png'\n,\n \n'elephant.png'\n,\n \n'monkey.png'\n],\n\n    \nprompt\n:\n \n\"<p>Which animal made the sound?</p>\"\n,\n\n    \nbutton_html\n:\n \n'<img src=\"%choice%\" />'\n\n\n};",
            "title": "jspsych-audio-button-response"
        },
        {
            "location": "/plugins/jspsych-audio-button-response/#jspsych-audio-button-response",
            "text": "This plugin plays audio files and records responses generated with a button click.  If the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych.  The trial can end when the subject responds, when the audio file has finished playing, or if the subject has failed to respond within a fixed length of time.",
            "title": "jspsych-audio-button-response"
        },
        {
            "location": "/plugins/jspsych-audio-button-response/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  audio file  undefined  Path to audio file to be played.    choices  array of strings  []  Labels for the buttons. Each different string in the array will generate a different button.    button_html  HTML string  '<button class=\"jspsych-btn\">%choice%</button>'  A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string  %choice%  will be changed to the corresponding element of the  choices  array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the  choices  array and this array must have the same length. The HTML from position 0 in the  button_html  array will be used to create the button for element 0 in the  choices  array, and so on.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    trial_duration  numeric  null  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely.    margin_vertical  string  '0px'  Vertical margin of the button(s).    margin_horizontal  string  '8px'  Horizontal margin of the button(s).    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  trial_duration  parameter). If false, then the trial will continue until the value for  timing_response  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.    trial_ends_after_audio  boolean  false  If true, then the trial will end as soon as the audio file finishes playing.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-audio-button-response/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    button_pressed  numeric  Indicates which button the subject pressed. The first button in the  choices  array is 0, the second is 1, and so on.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-audio-button-response/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-audio-button-response/#displaying-question-until-subject-gives-a-response",
            "text": "var   trial   =   { \n     type :   'audio-button-response' , \n     stimulus :   'sound/tone.mp3' , \n     choices :   [ 'Low' ,   'High' ], \n     prompt :   \"<p>Is the pitch high or low?</p>\"  };",
            "title": "Displaying question until subject gives a response"
        },
        {
            "location": "/plugins/jspsych-audio-button-response/#using-custom-button-html-to-use-images-as-buttons",
            "text": "var   trial   =   { \n     type :   'audio-button-response' , \n     stimulus :   'sound/roar.mp3' , \n     choices :   [ 'lion.png' ,   'elephant.png' ,   'monkey.png' ], \n     prompt :   \"<p>Which animal made the sound?</p>\" , \n     button_html :   '<img src=\"%choice%\" />'  };",
            "title": "Using custom button HTML to use images as buttons"
        },
        {
            "location": "/plugins/jspsych-audio-keyboard-response/",
            "text": "jspsych-audio-keyboard-response\n\u00b6\n\n\nThis plugin plays audio files and records responses generated with the keyboard.\n\n\nIf the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych.\n\n\nThe trial can end when the subject responds, when the audio file has finished playing, or if the subject has failed to respond within a fixed length of time.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\naudio file\n\n\nundefined\n\n\nPath to audio file to be played.\n\n\n\n\n\n\nchoices\n\n\narray of keycodes\n\n\njsPsych.ALL_KEYS\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g., \n'a'\n, \n'q'\n). The default value of \njsPsych.ALL_KEYS\n means that all keys will be accepted as valid responses. Specifying \njsPsych.NO_KEYS\n will mean that no responses are allowed.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntrial_duration\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\ntrial_ends_after_audio\n\n\nboolean\n\n\nfalse\n\n\nIf true, then the trial will end as soon as the audio file finishes playing.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nPath to the audio file that played during the trial.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nDisplaying trial until subject gives a response\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'audio-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'sound/tone.mp3'\n,\n\n    \nchoices\n:\n \n[\n'e'\n,\n \n'i'\n],\n\n    \nprompt\n:\n \n\"<p>Is the pitch high or low? Press 'e' for low and 'i' for high.</p>\"\n,\n\n  \nresponse_ends_trial\n:\n \nfalse\n\n\n};\n\n\n\n\n\n\nPlay a sound with no user response; trial ends after sound plays\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'audio-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'sound/tone.mp3'\n,\n\n    \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n    \ntrial_ends_after_audio\n:\n \ntrue\n\n\n};",
            "title": "jspsych-audio-keyboard-response"
        },
        {
            "location": "/plugins/jspsych-audio-keyboard-response/#jspsych-audio-keyboard-response",
            "text": "This plugin plays audio files and records responses generated with the keyboard.  If the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych.  The trial can end when the subject responds, when the audio file has finished playing, or if the subject has failed to respond within a fixed length of time.",
            "title": "jspsych-audio-keyboard-response"
        },
        {
            "location": "/plugins/jspsych-audio-keyboard-response/#parameters",
            "text": "Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  audio file  undefined  Path to audio file to be played.    choices  array of keycodes  jsPsych.ALL_KEYS  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.,  'a' ,  'q' ). The default value of  jsPsych.ALL_KEYS  means that all keys will be accepted as valid responses. Specifying  jsPsych.NO_KEYS  will mean that no responses are allowed.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    trial_duration  numeric  null  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  trial_duration  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.    trial_ends_after_audio  boolean  false  If true, then the trial will end as soon as the audio file finishes playing.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-audio-keyboard-response/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    stimulus  string  Path to the audio file that played during the trial.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-audio-keyboard-response/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-audio-keyboard-response/#displaying-trial-until-subject-gives-a-response",
            "text": "var   trial   =   { \n     type :   'audio-keyboard-response' , \n     stimulus :   'sound/tone.mp3' , \n     choices :   [ 'e' ,   'i' ], \n     prompt :   \"<p>Is the pitch high or low? Press 'e' for low and 'i' for high.</p>\" , \n   response_ends_trial :   false  };",
            "title": "Displaying trial until subject gives a response"
        },
        {
            "location": "/plugins/jspsych-audio-keyboard-response/#play-a-sound-with-no-user-response-trial-ends-after-sound-plays",
            "text": "var   trial   =   { \n     type :   'audio-keyboard-response' , \n     stimulus :   'sound/tone.mp3' , \n     choices :   jsPsych . NO_KEYS , \n     trial_ends_after_audio :   true  };",
            "title": "Play a sound with no user response; trial ends after sound plays"
        },
        {
            "location": "/plugins/jspsych-audio-slider-response/",
            "text": "jspsych-audio-slider-response\n\u00b6\n\n\nThis plugin plays audio files and records responses generated with a button click.\n\n\nIf the browser supports it, audio files are played using the WebAudio API.This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych.\n\n\nThe trial can end when the subject responds, or if the subject has failed to respond within a fixed length of time.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\naudio file\n\n\nundefined\n\n\nAudio file to be played\n\n\n\n\n\n\nlabels\n\n\narray of strings\n\n\nLabels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width.\n\n\n\n\n\n\n\n\nbutton_label\n\n\nstring\n\n\n'Continue'\n\n\nLabel of the button to end the trial.\n\n\n\n\n\n\nmin\n\n\ninteger\n\n\n0\n\n\nSets the minimum value of the slider\n\n\n\n\n\n\nmax\n\n\ninteger\n\n\n100\n\n\nSets the maximum value of the slider\n\n\n\n\n\n\nstart\n\n\ninteger\n\n\n50\n\n\nSets the starting value of the slider\n\n\n\n\n\n\nstep\n\n\ninteger\n\n\n1\n\n\nSets the step of the slider. This is the smallest amount by which the slider can change.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntrial_duration\n is reached. You can use this parameter to force the subject to listen to the stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nresponse\n\n\nnumeric\n\n\nThe numeric value of the slider.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nThe path of the audio file that was played.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nA simple rating scale\n\u00b6\n\n\nvar\n \ntrial_1\n \n=\n \n{\n\n    \ntype\n:\n \n'audio-slider-response'\n,\n\n    \nstimulus\n:\n \n'sound/speech_joke.mp3'\n,\n\n    \nlabels\n:\n \n[\n'Not Funny'\n,\n \n'Funny'\n],\n\n    \nprompt\n:\n \n'<p>How funny is the joke?</p>'\n\n\n}",
            "title": "jspsych-audio-slider-response"
        },
        {
            "location": "/plugins/jspsych-audio-slider-response/#jspsych-audio-slider-response",
            "text": "This plugin plays audio files and records responses generated with a button click.  If the browser supports it, audio files are played using the WebAudio API.This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych.  The trial can end when the subject responds, or if the subject has failed to respond within a fixed length of time.",
            "title": "jspsych-audio-slider-response"
        },
        {
            "location": "/plugins/jspsych-audio-slider-response/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  audio file  undefined  Audio file to be played    labels  array of strings  Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width.     button_label  string  'Continue'  Label of the button to end the trial.    min  integer  0  Sets the minimum value of the slider    max  integer  100  Sets the maximum value of the slider    start  integer  50  Sets the starting value of the slider    step  integer  1  Sets the step of the slider. This is the smallest amount by which the slider can change.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    trial_duration  numeric  null  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  trial_duration  is reached. You can use this parameter to force the subject to listen to the stimulus for a fixed amount of time, even if they respond before the time is complete.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-audio-slider-response/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      response  numeric  The numeric value of the slider.    rt  numeric  The time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    stimulus  string  The path of the audio file that was played.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-audio-slider-response/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-audio-slider-response/#a-simple-rating-scale",
            "text": "var   trial_1   =   { \n     type :   'audio-slider-response' , \n     stimulus :   'sound/speech_joke.mp3' , \n     labels :   [ 'Not Funny' ,   'Funny' ], \n     prompt :   '<p>How funny is the joke?</p>'  }",
            "title": "A simple rating scale"
        },
        {
            "location": "/plugins/jspsych-call-function/",
            "text": "jspsych-call-function\n\u00b6\n\n\nThis plugin executes a specified function. This allows the experimenter to run arbitrary code at any point during the experiment.\n\n\nThe function cannot take any arguments. If arguments are needed, then an anonymous function should be used to wrap the function call (see examples below).\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfunc\n\n\nfunction\n\n\nundefined\n\n\nThe function to call.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nany\n\n\nThe return value of the called function.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nCalling a simple function\n\u00b6\n\n\nvar\n \nmyfunc\n \n=\n \nfunction\n()\n \n{\n\n    \nreturn\n \n'you called?'\n;\n\n\n}\n\n\n\nvar\n \nblock\n \n=\n \n{\n\n    \ntype\n:\n \n'call-function'\n,\n\n    \nfunc\n:\n \nmyfunc\n\n\n}\n\n\n\n\n\n\nUsing an anonymous function to pass variables\n\u00b6\n\n\nvar\n \nmyfunc\n \n=\n \nfunction\n(\ndata\n){\n\n    \n// data contains all the experiment data so far,\n\n    \n// so this function could implement code to write\n\n    \n// the data to a database.\n\n\n}\n\n\n\nvar\n \nblock\n \n=\n \n{\n\n    \ntype\n:\n \n'call-function'\n,\n\n    \nfunc\n:\n \nfunction\n(){\n \nmyfunc\n(\njsPsych\n.\ndata\n.\nget\n())}\n\n\n}",
            "title": "jspsych-call-function"
        },
        {
            "location": "/plugins/jspsych-call-function/#jspsych-call-function",
            "text": "This plugin executes a specified function. This allows the experimenter to run arbitrary code at any point during the experiment.  The function cannot take any arguments. If arguments are needed, then an anonymous function should be used to wrap the function call (see examples below).",
            "title": "jspsych-call-function"
        },
        {
            "location": "/plugins/jspsych-call-function/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      func  function  undefined  The function to call.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-call-function/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      value  any  The return value of the called function.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-call-function/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-call-function/#calling-a-simple-function",
            "text": "var   myfunc   =   function ()   { \n     return   'you called?' ;  }  var   block   =   { \n     type :   'call-function' , \n     func :   myfunc  }",
            "title": "Calling a simple function"
        },
        {
            "location": "/plugins/jspsych-call-function/#using-an-anonymous-function-to-pass-variables",
            "text": "var   myfunc   =   function ( data ){ \n     // data contains all the experiment data so far, \n     // so this function could implement code to write \n     // the data to a database.  }  var   block   =   { \n     type :   'call-function' , \n     func :   function (){   myfunc ( jsPsych . data . get ())}  }",
            "title": "Using an anonymous function to pass variables"
        },
        {
            "location": "/plugins/jspsych-categorize-animation/",
            "text": "jspsych-categorize-animation\n\u00b6\n\n\nThe categorize animation plugin shows a sequence of images at a specified frame rate. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nEach element of the array is a path to an image file.\n\n\n\n\n\n\nchoices\n\n\narray of keycodes\n\n\njsPsych.ALL_KEYS\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g., \n'a'\n, \n'q'\n). The default value of \njsPsych.ALL_KEYS\n means that all keys will be accepted as valid responses. Specifying \njsPsych.NO_KEYS\n will mean that no responses are allowed.\n\n\n\n\n\n\nkey_answer\n\n\nnumeric\n\n\nundefined\n\n\nA \nnumeric key code\n indicating the correct response.\n\n\n\n\n\n\ntext_answer\n\n\nstring\n\n\n\"\"\n\n\nA text label that describes the correct answer. Used in conjunction with the \ncorrect_text\n and \nincorrect_text\n parameters.\n\n\n\n\n\n\ncorrect_text\n\n\nstring\n\n\n\"Correct.\"\n\n\nString to show when the correct answer is given. Can contain HTML formatting. The special string \n%ANS%\n can be used within the string. If present, the plugin will put the \ntext_answer\n for the trial in place of the %ANS% string (see example below).\n\n\n\n\n\n\nincorrect_text\n\n\nstring\n\n\n\"Wrong.\"\n\n\nString to show when the wrong answer is given. Can contain HTML formatting. The special string \n%ANS%\n can be used within the string. If present, the plugin will put the \ntext_answer\n for the trial in place of the %ANS% string (see example below).\n\n\n\n\n\n\nframe_time\n\n\nnumeric\n\n\n500\n\n\nHow long to display each image (in milliseconds).\n\n\n\n\n\n\nsequence_reps\n\n\nnumeric\n\n\n1\n\n\nHow many times to show the entire sequence.\n\n\n\n\n\n\nallow_response_before_complete\n\n\nboolean\n\n\nfalse\n\n\nIf true, the subject can respond before the animation sequence finishes.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\nfeedback_duration\n\n\nnumeric\n\n\n2000\n\n\nHow long to show the feedback (milliseconds).\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nJSON\n\n\nJSON encoded representation of the array of stimuli displayed in the trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\ntrue\n if the subject got the correct answer, \nfalse\n otherwise.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nBasic example\n\u00b6\n\n\nvar\n \nanimation_trial\n \n=\n \n{\n\n  \ntype\n:\n \n'categorize-animation'\n,\n\n  \nstimuli\n:\n \n[\n\"img/face_3.jpg\"\n,\n \n\"img/face_2.jpg\"\n,\n \n\"img/face_4.jpg\"\n,\n \n\"img/face_1.jpg\"\n],\n\n    \nchoices\n:\n \n[\n80\n,\n \n81\n],\n \n// 80 = 'p', 81 = 'q'\n\n    \nkey_answer\n:\n \n81\n,\n \n// correct answer is 'q' for both trials\n\n\n};\n\n\n\n\n\n\nGiving feedback with \n%ANS%\n string\n\u00b6\n\n\nvar\n \nanimation_trial\n \n=\n \n{\n\n  \ntype\n:\n \n'categorize-animation'\n,\n\n  \nstimuli\n:\n \n[\n\"img/face_3.jpg\"\n,\n \n\"img/face_2.jpg\"\n,\n \n\"img/face_4.jpg\"\n,\n \n\"img/face_1.jpg\"\n],\n\n  \nchoices\n:\n \n[\n80\n,\n \n81\n],\n \n// 80 = 'p', 81 = 'q'\n\n  \nkey_answer\n:\n \n81\n,\n \n// correct answer is 'q' for both trials\n\n    \ntext_answer\n:\n \n'Dax'\n,\n \n// the label for the sequence is 'Dax'\n\n    \ncorrect_text\n:\n \n'Correct! This was a %ANS%.'\n,\n\n    \nincorrect_text\n:\n \n'Incorrect. This was a %ANS%.'\n\n\n};",
            "title": "jspsych-categorize-animation"
        },
        {
            "location": "/plugins/jspsych-categorize-animation/#jspsych-categorize-animation",
            "text": "The categorize animation plugin shows a sequence of images at a specified frame rate. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.",
            "title": "jspsych-categorize-animation"
        },
        {
            "location": "/plugins/jspsych-categorize-animation/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  Each element of the array is a path to an image file.    choices  array of keycodes  jsPsych.ALL_KEYS  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.,  'a' ,  'q' ). The default value of  jsPsych.ALL_KEYS  means that all keys will be accepted as valid responses. Specifying  jsPsych.NO_KEYS  will mean that no responses are allowed.    key_answer  numeric  undefined  A  numeric key code  indicating the correct response.    text_answer  string  \"\"  A text label that describes the correct answer. Used in conjunction with the  correct_text  and  incorrect_text  parameters.    correct_text  string  \"Correct.\"  String to show when the correct answer is given. Can contain HTML formatting. The special string  %ANS%  can be used within the string. If present, the plugin will put the  text_answer  for the trial in place of the %ANS% string (see example below).    incorrect_text  string  \"Wrong.\"  String to show when the wrong answer is given. Can contain HTML formatting. The special string  %ANS%  can be used within the string. If present, the plugin will put the  text_answer  for the trial in place of the %ANS% string (see example below).    frame_time  numeric  500  How long to display each image (in milliseconds).    sequence_reps  numeric  1  How many times to show the entire sequence.    allow_response_before_complete  boolean  false  If true, the subject can respond before the animation sequence finishes.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    feedback_duration  numeric  2000  How long to show the feedback (milliseconds).",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-categorize-animation/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  JSON  JSON encoded representation of the array of stimuli displayed in the trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    correct  boolean  true  if the subject got the correct answer,  false  otherwise.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-categorize-animation/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-categorize-animation/#basic-example",
            "text": "var   animation_trial   =   { \n   type :   'categorize-animation' , \n   stimuli :   [ \"img/face_3.jpg\" ,   \"img/face_2.jpg\" ,   \"img/face_4.jpg\" ,   \"img/face_1.jpg\" ], \n     choices :   [ 80 ,   81 ],   // 80 = 'p', 81 = 'q' \n     key_answer :   81 ,   // correct answer is 'q' for both trials  };",
            "title": "Basic example"
        },
        {
            "location": "/plugins/jspsych-categorize-animation/#giving-feedback-with-ans-string",
            "text": "var   animation_trial   =   { \n   type :   'categorize-animation' , \n   stimuli :   [ \"img/face_3.jpg\" ,   \"img/face_2.jpg\" ,   \"img/face_4.jpg\" ,   \"img/face_1.jpg\" ], \n   choices :   [ 80 ,   81 ],   // 80 = 'p', 81 = 'q' \n   key_answer :   81 ,   // correct answer is 'q' for both trials \n     text_answer :   'Dax' ,   // the label for the sequence is 'Dax' \n     correct_text :   'Correct! This was a %ANS%.' , \n     incorrect_text :   'Incorrect. This was a %ANS%.'  };",
            "title": "Giving feedback with %ANS% string"
        },
        {
            "location": "/plugins/jspsych-categorize-html/",
            "text": "jspsych-categorize-html\n\u00b6\n\n\nThe categorize html plugin shows an HTML object on the screen. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nhtml string\n\n\nundefined\n\n\nThe HTML stimulus to display.\n\n\n\n\n\n\nchoices\n\n\narray of keycodes\n\n\njsPsych.ALL_KEYS\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g., \n'a'\n, \n'q'\n). The default value of \njsPsych.ALL_KEYS\n means that all keys will be accepted as valid responses. Specifying \njsPsych.NO_KEYS\n will mean that no responses are allowed.\n\n\n\n\n\n\nkey_answer\n\n\nnumeric\n\n\nundefined\n\n\nThe \nnumeric key code\n indicating the correct response.\n\n\n\n\n\n\ntext_answer\n\n\nstring\n\n\n\"\"\n\n\nA label that is associated with the correct answer. Used in conjunction with the \ncorrect_text\n and \nincorrect_text\n parameters.\n\n\n\n\n\n\ncorrect_text\n\n\nstring\n\n\n\"Correct.\"\n\n\nString to show when the correct answer is given. Can contain HTML formatting. The special string \n%ANS%\n can be used within the string. If present, the plugin will put the \ntext_answer\n for the trial in place of the \n%ANS%\n string (see example below).\n\n\n\n\n\n\nincorrect_text\n\n\nstring\n\n\n\"Wrong.\"\n\n\nString to show when the wrong answer is given. Can contain HTML formatting. The special string \n%ANS%\n can be used within the string. If present, the plugin will put the \ntext_answer\n for the trial in place of the \n%ANS%\n string (see example below).\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\nforce_correct_button_press\n\n\nboolean\n\n\nfalse\n\n\nIf set to true, then the subject must press the correct response key after feedback is given in order to advance to the next trial.\n\n\n\n\n\n\nshow_stim_with_feedback\n\n\nboolean\n\n\ntrue\n\n\nIf set to true, then the stimulus will be shown during feedback. If false, then only the text feedback will display during feedback.\n\n\n\n\n\n\nshow_feedback_on_timeout\n\n\nboolean\n\n\nfalse\n\n\nIf true, then category feedback will be displayed for an incorrect response after a timeout (timing_response is exceeded). If false, then a timeout message will be shown.\n\n\n\n\n\n\ntimeout_message\n\n\nstring\n\n\n\"Please respond faster.\"\n\n\nThe message to show on a timeout non-response.\n\n\n\n\n\n\nstimulus_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to show the stimulus for (milliseconds). If null, then the stimulus is shown until a response is given.\n\n\n\n\n\n\nfeedback_duration\n\n\nnumeric\n\n\n2000\n\n\nHow long to show the feedback for (milliseconds).\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nThe maximum time allowed for a response. If null, then the experiment will wait indefinitely for a response.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nEither the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\ntrue\n if the subject got the correct answer, \nfalse\n otherwise.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nCategorizing HTML content\n\u00b6\n\n\nvar\n \ncategorization_trial\n \n=\n \n{\n\n    \ntype\n:\n \n'categorize'\n,\n\n    \nstimulus\n:\n \n'<p>B</p>'\n,\n\n    \nkey_answer\n:\n \n80\n,\n\n    \ntext_answer\n:\n \n'letter'\n,\n\n    \nchoices\n:\n \n[\n80\n,\n \n81\n],\n\n    \ncorrect_text\n:\n \n\"<p class='prompt'>Correct, this is a %ANS%.</p>\"\n,\n\n    \nincorrect_text\n:\n \n\"<p class='prompt'>Incorrect, this is a %ANS%.</p>\"\n,\n\n    \nprompt\n:\n \n\"<p>Press P for letter. Press Q for number.</p>\"\n\n\n};",
            "title": "jspsych-categorize-html"
        },
        {
            "location": "/plugins/jspsych-categorize-html/#jspsych-categorize-html",
            "text": "The categorize html plugin shows an HTML object on the screen. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.",
            "title": "jspsych-categorize-html"
        },
        {
            "location": "/plugins/jspsych-categorize-html/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  html string  undefined  The HTML stimulus to display.    choices  array of keycodes  jsPsych.ALL_KEYS  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.,  'a' ,  'q' ). The default value of  jsPsych.ALL_KEYS  means that all keys will be accepted as valid responses. Specifying  jsPsych.NO_KEYS  will mean that no responses are allowed.    key_answer  numeric  undefined  The  numeric key code  indicating the correct response.    text_answer  string  \"\"  A label that is associated with the correct answer. Used in conjunction with the  correct_text  and  incorrect_text  parameters.    correct_text  string  \"Correct.\"  String to show when the correct answer is given. Can contain HTML formatting. The special string  %ANS%  can be used within the string. If present, the plugin will put the  text_answer  for the trial in place of the  %ANS%  string (see example below).    incorrect_text  string  \"Wrong.\"  String to show when the wrong answer is given. Can contain HTML formatting. The special string  %ANS%  can be used within the string. If present, the plugin will put the  text_answer  for the trial in place of the  %ANS%  string (see example below).    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    force_correct_button_press  boolean  false  If set to true, then the subject must press the correct response key after feedback is given in order to advance to the next trial.    show_stim_with_feedback  boolean  true  If set to true, then the stimulus will be shown during feedback. If false, then only the text feedback will display during feedback.    show_feedback_on_timeout  boolean  false  If true, then category feedback will be displayed for an incorrect response after a timeout (timing_response is exceeded). If false, then a timeout message will be shown.    timeout_message  string  \"Please respond faster.\"  The message to show on a timeout non-response.    stimulus_duration  numeric  null  How long to show the stimulus for (milliseconds). If null, then the stimulus is shown until a response is given.    feedback_duration  numeric  2000  How long to show the feedback for (milliseconds).    trial_duration  numeric  null  The maximum time allowed for a response. If null, then the experiment will wait indefinitely for a response.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-categorize-html/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    correct  boolean  true  if the subject got the correct answer,  false  otherwise.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-categorize-html/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-categorize-html/#categorizing-html-content",
            "text": "var   categorization_trial   =   { \n     type :   'categorize' , \n     stimulus :   '<p>B</p>' , \n     key_answer :   80 , \n     text_answer :   'letter' , \n     choices :   [ 80 ,   81 ], \n     correct_text :   \"<p class='prompt'>Correct, this is a %ANS%.</p>\" , \n     incorrect_text :   \"<p class='prompt'>Incorrect, this is a %ANS%.</p>\" , \n     prompt :   \"<p>Press P for letter. Press Q for number.</p>\"  };",
            "title": "Categorizing HTML content"
        },
        {
            "location": "/plugins/jspsych-categorize-image/",
            "text": "jspsych-categorize-html\n\u00b6\n\n\nThe categorize image plugin shows an image object on the screen. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nundefined\n\n\nThe path to the image file.\n\n\n\n\n\n\nkey_answer\n\n\nnumeric\n\n\nundefined\n\n\nThe \nnumeric key code\n indicating the correct response.\n\n\n\n\n\n\nchoices\n\n\narray of keycodes\n\n\njsPsych.ALL_KEYS\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g., \n'a'\n, \n'q'\n). The default value of \njsPsych.ALL_KEYS\n means that all keys will be accepted as valid responses. Specifying \njsPsych.NO_KEYS\n will mean that no responses are allowed.\n\n\n\n\n\n\ntext_answer\n\n\nstring\n\n\n\"\"\n\n\nA label that is associated with the correct answer. Used in conjunction with the \ncorrect_text\n and \nincorrect_text\n parameters.\n\n\n\n\n\n\ncorrect_text\n\n\nstring\n\n\n\"Correct.\"\n\n\nString to show when the correct answer is given. Can contain HTML formatting. The special string \n%ANS%\n can be used within the string. If present, the plugin will put the \ntext_answer\n for the trial in place of the %ANS% string (see example below).\n\n\n\n\n\n\nincorrect_text\n\n\nstring\n\n\n\"Wrong.\"\n\n\nString to show when the wrong answer is given. Can contain HTML formatting. The special string \n%ANS%\n can be used within the string. If present, the plugin will put the \ntext_answer\n for the trial in place of the %ANS% string (see example below).\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\nforce_correct_button_press\n\n\nboolean\n\n\nfalse\n\n\nIf set to true, then the subject must press the correct response key after feedback is given in order to advance to the next trial.\n\n\n\n\n\n\nshow_stim_with_feedback\n\n\nboolean\n\n\ntrue\n\n\nIf set to true, then the stimulus will be shown during feedback. If false, then only the text feedback will display during feedback.\n\n\n\n\n\n\nshow_feedback_on_timeout\n\n\nboolean\n\n\nfalse\n\n\nIf true, then category feedback will be displayed for an incorrect response after a timeout (timing_response is exceeded). If false, then a timeout message will be shown.\n\n\n\n\n\n\ntimeout_message\n\n\nstring\n\n\n\"Please respond faster.\"\n\n\nThe message to show on a timeout non-response.\n\n\n\n\n\n\nstimulus_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to show the stimulus for (milliseconds). If null, then the stimulus is shown until a response is given.\n\n\n\n\n\n\nfeedback_duration\n\n\nnumeric\n\n\n2000\n\n\nHow long to show the feedback for (milliseconds).\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nThe maximum time allowed for a response. If null, then the experiment will wait indefinitely for a response.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nEither the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\ntrue\n if the subject got the correct answer, \nfalse\n otherwise.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nCategorizing an image\n\u00b6\n\n\nvar\n \ncategorization_trial\n \n=\n \n{\n\n    \ntype\n:\n \n'categorize'\n,\n\n    \nstimulus\n:\n \n'img/harrypotter.png'\n,\n\n    \nkey_answer\n:\n \n71\n,\n\n    \ntext_answer\n:\n \n'Gryffindor'\n,\n\n    \nchoices\n:\n \n[\n71\n,\n \n72\n,\n \n82\n,\n \n83\n],\n\n    \ncorrect_text\n:\n \n\"<p class='prompt'>Correct! This person is a %ANS%.</p>\"\n,\n\n    \nincorrect_text\n:\n \n\"<p class='prompt'>Incorrect. This person is a %ANS%.</p>\"\n,\n\n    \nprompt\n:\n \n\"<p>Is this person a (G)ryffindor, (H)ufflepuff, (R)avenclaw, or (S)lytherin?</p>\"\n\n\n};",
            "title": "jspsych-categorize-image"
        },
        {
            "location": "/plugins/jspsych-categorize-image/#jspsych-categorize-html",
            "text": "The categorize image plugin shows an image object on the screen. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.",
            "title": "jspsych-categorize-html"
        },
        {
            "location": "/plugins/jspsych-categorize-image/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  string  undefined  The path to the image file.    key_answer  numeric  undefined  The  numeric key code  indicating the correct response.    choices  array of keycodes  jsPsych.ALL_KEYS  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.,  'a' ,  'q' ). The default value of  jsPsych.ALL_KEYS  means that all keys will be accepted as valid responses. Specifying  jsPsych.NO_KEYS  will mean that no responses are allowed.    text_answer  string  \"\"  A label that is associated with the correct answer. Used in conjunction with the  correct_text  and  incorrect_text  parameters.    correct_text  string  \"Correct.\"  String to show when the correct answer is given. Can contain HTML formatting. The special string  %ANS%  can be used within the string. If present, the plugin will put the  text_answer  for the trial in place of the %ANS% string (see example below).    incorrect_text  string  \"Wrong.\"  String to show when the wrong answer is given. Can contain HTML formatting. The special string  %ANS%  can be used within the string. If present, the plugin will put the  text_answer  for the trial in place of the %ANS% string (see example below).    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    force_correct_button_press  boolean  false  If set to true, then the subject must press the correct response key after feedback is given in order to advance to the next trial.    show_stim_with_feedback  boolean  true  If set to true, then the stimulus will be shown during feedback. If false, then only the text feedback will display during feedback.    show_feedback_on_timeout  boolean  false  If true, then category feedback will be displayed for an incorrect response after a timeout (timing_response is exceeded). If false, then a timeout message will be shown.    timeout_message  string  \"Please respond faster.\"  The message to show on a timeout non-response.    stimulus_duration  numeric  null  How long to show the stimulus for (milliseconds). If null, then the stimulus is shown until a response is given.    feedback_duration  numeric  2000  How long to show the feedback for (milliseconds).    trial_duration  numeric  null  The maximum time allowed for a response. If null, then the experiment will wait indefinitely for a response.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-categorize-image/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    correct  boolean  true  if the subject got the correct answer,  false  otherwise.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-categorize-image/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-categorize-image/#categorizing-an-image",
            "text": "var   categorization_trial   =   { \n     type :   'categorize' , \n     stimulus :   'img/harrypotter.png' , \n     key_answer :   71 , \n     text_answer :   'Gryffindor' , \n     choices :   [ 71 ,   72 ,   82 ,   83 ], \n     correct_text :   \"<p class='prompt'>Correct! This person is a %ANS%.</p>\" , \n     incorrect_text :   \"<p class='prompt'>Incorrect. This person is a %ANS%.</p>\" , \n     prompt :   \"<p>Is this person a (G)ryffindor, (H)ufflepuff, (R)avenclaw, or (S)lytherin?</p>\"  };",
            "title": "Categorizing an image"
        },
        {
            "location": "/plugins/jspsych-external-html/",
            "text": "jspsych-external-html plugin\n\u00b6\n\n\nThe HTML plugin displays an external HTML document (often a consent form). Either a keyboard response or a button press can be used to continue to the next trial. It allows the experimenter to check if conditions are met (such as indicating informed consent) before continuing.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nundefined\n\n\nThe URL of the page to display.\n\n\n\n\n\n\ncont_key\n\n\nnumeric\n\n\nnull\n\n\nThe key code a key to advance to the next trial. If left as null, then the subject will not be able to advance trials using the keyboard.\n\n\n\n\n\n\ncont_btn\n\n\nstring\n\n\nnull\n\n\nThe ID of a clickable element on the page. When the element is clicked, the trial will advance.\n\n\n\n\n\n\ncheck_fn\n\n\nfunction\n\n\nfunction(){ return true; }\n\n\nThis function is called with the jsPsych \ndisplay_element\n as the only argument when the subject attempts to advance the trial. The trial will only advance if the function return \ntrue\n. This can be used to verify that the subject has correctly filled out a form before continuing, for example.\n\n\n\n\n\n\nforce_refresh\n\n\nboolean\n\n\nfalse\n\n\nIf \ntrue\n, then the plugin will avoid using the cached version of the HTML page to load if one exists.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nThe URL of the page.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to finish the trial.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nLoading a consent form\n\u00b6\n\n\nThis content would be in a file called 'external_page.html'\n\u00b6\n\n\n<\ndiv\n \nid\n=\n\"consent\"\n>\n\n  \n<\np\n>\n\n    This is a demo experiment, with this minimal consent form being loaded\n    as an external html document. To continue, click the checkbox below\n    and hit \"Start Experiment\".\n  \n</\np\n>\n\n  \n<\np\n>\n\n    \n<\ninput\n \ntype\n=\n\"checkbox\"\n \nid\n=\n\"consent_checkbox\"\n \n/>\n\n    I agree to take part in this study.\n  \n</\np\n>\n\n  \n<\nbutton\n \ntype\n=\n\"button\"\n \nid\n=\n\"start\"\n>\nStart Experiment\n</\nbutton\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\njsPsych code to load above page.\n\u00b6\n\n\n// sample function that might be used to check if a subject has given\n\n\n// consent to participate.\n\n\nvar\n \ncheck_consent\n \n=\n \nfunction\n(\nelem\n)\n \n{\n\n  \nif\n \n(\n$\n(\n'#consent_checkbox'\n).\nis\n(\n':checked'\n))\n \n{\n\n    \nreturn\n \ntrue\n;\n\n  \n}\n\n  \nelse\n \n{\n\n    \nalert\n(\n\"If you wish to participate, you must check the box next to the statement 'I agree to participate in this study.'\"\n);\n\n    \nreturn\n \nfalse\n;\n\n  \n}\n\n  \nreturn\n \nfalse\n;\n\n\n};\n\n\n\n\n// declare the block.\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n'external-html'\n,\n\n  \nurl\n:\n \n\"external_page.html\"\n,\n\n  \ncont_btn\n:\n \n\"start\"\n,\n\n  \ncheck_fn\n:\n \ncheck_consent\n\n\n};",
            "title": "jspsych-external-html"
        },
        {
            "location": "/plugins/jspsych-external-html/#jspsych-external-html-plugin",
            "text": "The HTML plugin displays an external HTML document (often a consent form). Either a keyboard response or a button press can be used to continue to the next trial. It allows the experimenter to check if conditions are met (such as indicating informed consent) before continuing.",
            "title": "jspsych-external-html plugin"
        },
        {
            "location": "/plugins/jspsych-external-html/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      url  string  undefined  The URL of the page to display.    cont_key  numeric  null  The key code a key to advance to the next trial. If left as null, then the subject will not be able to advance trials using the keyboard.    cont_btn  string  null  The ID of a clickable element on the page. When the element is clicked, the trial will advance.    check_fn  function  function(){ return true; }  This function is called with the jsPsych  display_element  as the only argument when the subject attempts to advance the trial. The trial will only advance if the function return  true . This can be used to verify that the subject has correctly filled out a form before continuing, for example.    force_refresh  boolean  false  If  true , then the plugin will avoid using the cached version of the HTML page to load if one exists.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-external-html/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      url  string  The URL of the page.    rt  numeric  The response time in milliseconds for the subject to finish the trial.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-external-html/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-external-html/#loading-a-consent-form",
            "text": "",
            "title": "Loading a consent form"
        },
        {
            "location": "/plugins/jspsych-external-html/#this-content-would-be-in-a-file-called-external_pagehtml",
            "text": "< div   id = \"consent\" > \n   < p > \n    This is a demo experiment, with this minimal consent form being loaded\n    as an external html document. To continue, click the checkbox below\n    and hit \"Start Experiment\".\n   </ p > \n   < p > \n     < input   type = \"checkbox\"   id = \"consent_checkbox\"   /> \n    I agree to take part in this study.\n   </ p > \n   < button   type = \"button\"   id = \"start\" > Start Experiment </ button >  </ div >",
            "title": "This content would be in a file called 'external_page.html'"
        },
        {
            "location": "/plugins/jspsych-external-html/#jspsych-code-to-load-above-page",
            "text": "// sample function that might be used to check if a subject has given  // consent to participate.  var   check_consent   =   function ( elem )   { \n   if   ( $ ( '#consent_checkbox' ). is ( ':checked' ))   { \n     return   true ; \n   } \n   else   { \n     alert ( \"If you wish to participate, you must check the box next to the statement 'I agree to participate in this study.'\" ); \n     return   false ; \n   } \n   return   false ;  };  // declare the block.  var   trial   =   { \n   type : 'external-html' , \n   url :   \"external_page.html\" , \n   cont_btn :   \"start\" , \n   check_fn :   check_consent  };",
            "title": "jsPsych code to load above page."
        },
        {
            "location": "/plugins/jspsych-free-sort/",
            "text": "jspsych-free-sort plugin\n\u00b6\n\n\nThe free-sort plugin displays a collection of images on the screen that the subject can interact with by clicking and dragging. All of the moves that the subject performs are recorded.\n\n\nDependency\n\u00b6\n\n\nThis plugin requires the jQuery UI library, available at \nhttps://jqueryui.com/\n. You must include the library in the \n<head>\n section of your experiment page. You can use the \nGoogle-hosted version of the library\n.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nEach element of this array is an image path.\n\n\n\n\n\n\nstim_height\n\n\nnumeric\n\n\n100\n\n\nThe height of the images in pixels.\n\n\n\n\n\n\nstim_width\n\n\nnumeric\n\n\n100\n\n\nThe width of the images in pixels.\n\n\n\n\n\n\nsort_area_height\n\n\nnumeric\n\n\n800\n\n\nThe height of the container that subjects can move the stimuli in. Stimuli will be constrained to this area.\n\n\n\n\n\n\nsort_area_width\n\n\nnumeric\n\n\n800\n\n\nThe width of the container that subjects can move the stimuli in. Stimuli will be constrained to this area.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\nprompt_location\n\n\nstring\n\n\n\"above\"\n\n\nIndicates whether to show the prompt \n\"above\"\n or \n\"below\"\n the sorting area.\n\n\n\n\n\n\nbutton_label\n\n\nstring\n\n\n'Continue'\n\n\nThe text that appears on the button to continue to the next trial.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ninit_locations\n\n\nJSON string\n\n\nA JSON-encoded object representing the initial locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location.\n\n\n\n\n\n\nmoves\n\n\nJSON string\n\n\nA JSON-encoded object representing all of the moves the participant made when sorting. The object is an array with each element representing a move. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location after the move.\n\n\n\n\n\n\nfinal_locations\n\n\nJSON string\n\n\nA JSON-encoded object representing the final locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to finish all sorting.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nBasic example\n\u00b6\n\n\nvar\n \nsorting_stimuli\n \n=\n \n[];\n\n\nfor\n \n(\nvar\n \ni\n \n=\n \n1\n;\n \ni\n \n<=\n \n12\n;\n \ni\n++\n)\n \n{\n\n    \nsorting_stimuli\n.\npush\n(\n\"img/cell_img_\"\n \n+\n \ni\n \n+\n \n\".jpg\"\n);\n\n\n}\n\n\n\nvar\n \nsort_trial\n \n=\n \n{\n\n    \ntype\n:\n \n'free-sort'\n,\n\n    \nstimuli\n:\n \nsorting_stimuli\n,\n\n    \nprompt\n:\n \n\"<p>Click and drag the images below to sort them so that similar items are close together.</p>\"\n\n\n};",
            "title": "jspsych-free-sort"
        },
        {
            "location": "/plugins/jspsych-free-sort/#jspsych-free-sort-plugin",
            "text": "The free-sort plugin displays a collection of images on the screen that the subject can interact with by clicking and dragging. All of the moves that the subject performs are recorded.",
            "title": "jspsych-free-sort plugin"
        },
        {
            "location": "/plugins/jspsych-free-sort/#dependency",
            "text": "This plugin requires the jQuery UI library, available at  https://jqueryui.com/ . You must include the library in the  <head>  section of your experiment page. You can use the  Google-hosted version of the library .",
            "title": "Dependency"
        },
        {
            "location": "/plugins/jspsych-free-sort/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  Each element of this array is an image path.    stim_height  numeric  100  The height of the images in pixels.    stim_width  numeric  100  The width of the images in pixels.    sort_area_height  numeric  800  The height of the container that subjects can move the stimuli in. Stimuli will be constrained to this area.    sort_area_width  numeric  800  The width of the container that subjects can move the stimuli in. Stimuli will be constrained to this area.    prompt  string  null  This string can contain HTML markup. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    prompt_location  string  \"above\"  Indicates whether to show the prompt  \"above\"  or  \"below\"  the sorting area.    button_label  string  'Continue'  The text that appears on the button to continue to the next trial.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-free-sort/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      init_locations  JSON string  A JSON-encoded object representing the initial locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location.    moves  JSON string  A JSON-encoded object representing all of the moves the participant made when sorting. The object is an array with each element representing a move. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location after the move.    final_locations  JSON string  A JSON-encoded object representing the final locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location.    rt  numeric  The response time in milliseconds for the subject to finish all sorting.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-free-sort/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-free-sort/#basic-example",
            "text": "var   sorting_stimuli   =   [];  for   ( var   i   =   1 ;   i   <=   12 ;   i ++ )   { \n     sorting_stimuli . push ( \"img/cell_img_\"   +   i   +   \".jpg\" );  }  var   sort_trial   =   { \n     type :   'free-sort' , \n     stimuli :   sorting_stimuli , \n     prompt :   \"<p>Click and drag the images below to sort them so that similar items are close together.</p>\"  };",
            "title": "Basic example"
        },
        {
            "location": "/plugins/jspsych-fullscreen/",
            "text": "jspsych-fullscreen plugin\n\u00b6\n\n\nThe fullscreen plugin allows the experiment to enter or exit fullscreen mode. For security reasons, all browsers require that entry into fullscreen mode is triggered by a user action. To enter fullscreen mode, this plugin has the user click a button. Exiting fullscreen mode can be done without user input.\n\n\nSafari does not support keyboard input when the browser is in fullscreen mode. Therefore, the function will not launch fullscreen mode on Safari. The experiment will ignore any trials using the fullscreen plugin in Safari.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfullscreen_mode\n\n\nboolean\n\n\ntrue\n\n\nA value of \ntrue\n causes the experiment to enter fullscreen mode. A value of \nfalse\n causes the browser to exit fullscreen mode.\n\n\n\n\n\n\nmessage\n\n\nstring\n\n\n<p>The experiment will switch to full screen mode when you press the button below</p>\n\n\nThe HTML content to display above the button to enter fullscreen mode.\n\n\n\n\n\n\nbutton_label\n\n\nstring\n\n\n'Continue'\n\n\nThe text that appears on the button to enter fullscreen mode.\n\n\n\n\n\n\ndelay_after\n\n\nnumeric\n\n\n1000\n\n\nThe length of time to delay after entering fullscreen mode before ending the trial. This can be useful because entering fullscreen is jarring and most browsers display some kind of message that the browser has entered fullscreen mode.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nsuccess\n\n\nboolean\n\n\ntrue if the browser supports fullscreen mode (i.e., is not Safari)\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nEntering and exiting fullscreen\n\u00b6\n\n\nvar\n \ntimeline\n \n=\n \n[];\n\n\n\ntimeline\n.\npush\n({\n\n  \ntype\n:\n \n'fullscreen'\n,\n\n  \nfullscreen_mode\n:\n \ntrue\n\n\n});\n\n\n\ntimeline\n.\npush\n({\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'This trial will be in fullscreen mode.'\n\n\n});\n\n\n\n// exit fullscreen mode\n\n\ntimeline\n.\npush\n({\n\n  \ntype\n:\n \n'fullscreen'\n,\n\n  \nfullscreen_mode\n:\n \nfalse\n\n\n});\n\n\n\ntimeline\n.\npush\n({\n\n  \ntype\n:\n \n'html-keyboard-response'\n,\n\n  \nstimulus\n:\n \n'This trial will NOT be in fullscreen mode.'\n\n\n});\n\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \ntimeline\n\n\n});",
            "title": "jspsych-fullscreen"
        },
        {
            "location": "/plugins/jspsych-fullscreen/#jspsych-fullscreen-plugin",
            "text": "The fullscreen plugin allows the experiment to enter or exit fullscreen mode. For security reasons, all browsers require that entry into fullscreen mode is triggered by a user action. To enter fullscreen mode, this plugin has the user click a button. Exiting fullscreen mode can be done without user input.  Safari does not support keyboard input when the browser is in fullscreen mode. Therefore, the function will not launch fullscreen mode on Safari. The experiment will ignore any trials using the fullscreen plugin in Safari.",
            "title": "jspsych-fullscreen plugin"
        },
        {
            "location": "/plugins/jspsych-fullscreen/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      fullscreen_mode  boolean  true  A value of  true  causes the experiment to enter fullscreen mode. A value of  false  causes the browser to exit fullscreen mode.    message  string  <p>The experiment will switch to full screen mode when you press the button below</p>  The HTML content to display above the button to enter fullscreen mode.    button_label  string  'Continue'  The text that appears on the button to enter fullscreen mode.    delay_after  numeric  1000  The length of time to delay after entering fullscreen mode before ending the trial. This can be useful because entering fullscreen is jarring and most browsers display some kind of message that the browser has entered fullscreen mode.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-fullscreen/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      success  boolean  true if the browser supports fullscreen mode (i.e., is not Safari)",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-fullscreen/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-fullscreen/#entering-and-exiting-fullscreen",
            "text": "var   timeline   =   [];  timeline . push ({ \n   type :   'fullscreen' , \n   fullscreen_mode :   true  });  timeline . push ({ \n   type :   'html-keyboard-response' , \n   stimulus :   'This trial will be in fullscreen mode.'  });  // exit fullscreen mode  timeline . push ({ \n   type :   'fullscreen' , \n   fullscreen_mode :   false  });  timeline . push ({ \n   type :   'html-keyboard-response' , \n   stimulus :   'This trial will NOT be in fullscreen mode.'  });  jsPsych . init ({ \n   timeline :   timeline  });",
            "title": "Entering and exiting fullscreen"
        },
        {
            "location": "/plugins/jspsych-html-button-response/",
            "text": "jspsych-html-button-response\n\u00b6\n\n\nThis plugin displays HTML content and records responses generated with a button click.The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended\nautomatically if the subject has failed to respond within a fixed length of time. The button itself can be customized using\nHTML formatting.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified.\nOther parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nHTML string\n\n\nundefined\n\n\nThe HTML content to be displayed.\n\n\n\n\n\n\nchoices\n\n\narray of strings\n\n\n[]\n\n\nLabels for the buttons. Each different string in the array will generate a different button.\n\n\n\n\n\n\nbutton_html\n\n\nHTML string\n\n\n'<button class=\"jspsych-btn\">%choice%</button>'\n\n\nA template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string \n%choice%\n will be changed to the corresponding element of the \nchoices\n array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the \nchoices\n array and this array must have the same length. The HTML from position 0 in the \nbutton_html\n array will be used to create the button for element 0 in the \nchoices\n array, and so on.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely.\n\n\n\n\n\n\nstimulus_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to \nhidden\n after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends.\n\n\n\n\n\n\nmargin_vertical\n\n\nstring\n\n\n'0px'\n\n\nVertical margin of the button(s).\n\n\n\n\n\n\nmargin_horizontal\n\n\nstring\n\n\n'8px'\n\n\nHorizontal margin of the button(s).\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntrial_duration\n parameter). If false, then the trial will continue until the value for \ntiming_response\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\nbutton_pressed\n\n\nnumeric\n\n\nIndicates which button the subject pressed. The first button in the \nchoices\n array is 0, the second is 1, and so on.\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nThe HTML content that was displayed on the screen.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nDisplaying question until subject gives a response\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'html-button-response'\n,\n\n    \nstimulus\n:\n \n'<p>Running</p>'\n,\n\n    \nchoices\n:\n \n[\n'Healthy'\n,\n \n'Unhealthy'\n],\n\n    \nprompt\n:\n \n\"<p>Is this activity healthy or unhealthy?</p>\"\n\n\n};",
            "title": "jspsych-html-button-response"
        },
        {
            "location": "/plugins/jspsych-html-button-response/#jspsych-html-button-response",
            "text": "This plugin displays HTML content and records responses generated with a button click.The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended\nautomatically if the subject has failed to respond within a fixed length of time. The button itself can be customized using\nHTML formatting.",
            "title": "jspsych-html-button-response"
        },
        {
            "location": "/plugins/jspsych-html-button-response/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified.\nOther parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  HTML string  undefined  The HTML content to be displayed.    choices  array of strings  []  Labels for the buttons. Each different string in the array will generate a different button.    button_html  HTML string  '<button class=\"jspsych-btn\">%choice%</button>'  A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string  %choice%  will be changed to the corresponding element of the  choices  array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the  choices  array and this array must have the same length. The HTML from position 0 in the  button_html  array will be used to create the button for element 0 in the  choices  array, and so on.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    trial_duration  numeric  null  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely.    stimulus_duration  numeric  null  How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to  hidden  after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends.    margin_vertical  string  '0px'  Vertical margin of the button(s).    margin_horizontal  string  '8px'  Horizontal margin of the button(s).    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  trial_duration  parameter). If false, then the trial will continue until the value for  timing_response  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-html-button-response/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    button_pressed  numeric  Indicates which button the subject pressed. The first button in the  choices  array is 0, the second is 1, and so on.    stimulus  string  The HTML content that was displayed on the screen.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-html-button-response/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-html-button-response/#displaying-question-until-subject-gives-a-response",
            "text": "var   trial   =   { \n     type :   'html-button-response' , \n     stimulus :   '<p>Running</p>' , \n     choices :   [ 'Healthy' ,   'Unhealthy' ], \n     prompt :   \"<p>Is this activity healthy or unhealthy?</p>\"  };",
            "title": "Displaying question until subject gives a response"
        },
        {
            "location": "/plugins/jspsych-html-keyboard-response/",
            "text": "jspsych-html-keyboard-response\n\u00b6\n\n\nThis plugin displays HTML content and records responses generated with the keyboard.The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nHTML string\n\n\nundefined\n\n\nThe string to be displayed.\n\n\n\n\n\n\nchoices\n\n\narray of keycodes\n\n\njsPsych.ALL_KEYS\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g., \n'a'\n, \n'q'\n). The default value of \njsPsych.ALL_KEYS\n means that all keys will be accepted as valid responses. Specifying \njsPsych.NO_KEYS\n will mean that no responses are allowed.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\nstimulus_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to \nhidden\n after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends.\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntrial_duration\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nThe HTML content that was displayed on the screen.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nDisplaying trial until subject gives a response\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'<p>Running</p>'\n,\n\n    \nchoices\n:\n \n[\n'e'\n,\n \n'i'\n],\n\n    \nprompt\n:\n \n\"<p>Is this activity healthy or unhealthy? Press 'e' for healthy and 'i' for unhealthy.</p>\"\n\n\n};\n\n\n\n\n\n\nShowing a 1 second fixation cross; no response allowed\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'html-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'<p style=\"font-size: 48px;\">+</p>'\n,\n\n    \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n    \ntrial_duration\n:\n \n1000\n,\n\n\n};",
            "title": "jspsych-html-keyboard-response"
        },
        {
            "location": "/plugins/jspsych-html-keyboard-response/#jspsych-html-keyboard-response",
            "text": "This plugin displays HTML content and records responses generated with the keyboard.The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.",
            "title": "jspsych-html-keyboard-response"
        },
        {
            "location": "/plugins/jspsych-html-keyboard-response/#parameters",
            "text": "Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  HTML string  undefined  The string to be displayed.    choices  array of keycodes  jsPsych.ALL_KEYS  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.,  'a' ,  'q' ). The default value of  jsPsych.ALL_KEYS  means that all keys will be accepted as valid responses. Specifying  jsPsych.NO_KEYS  will mean that no responses are allowed.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    stimulus_duration  numeric  null  How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to  hidden  after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends.    trial_duration  numeric  null  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  trial_duration  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-html-keyboard-response/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    stimulus  string  The HTML content that was displayed on the screen.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-html-keyboard-response/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-html-keyboard-response/#displaying-trial-until-subject-gives-a-response",
            "text": "var   trial   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   '<p>Running</p>' , \n     choices :   [ 'e' ,   'i' ], \n     prompt :   \"<p>Is this activity healthy or unhealthy? Press 'e' for healthy and 'i' for unhealthy.</p>\"  };",
            "title": "Displaying trial until subject gives a response"
        },
        {
            "location": "/plugins/jspsych-html-keyboard-response/#showing-a-1-second-fixation-cross-no-response-allowed",
            "text": "var   trial   =   { \n     type :   'html-keyboard-response' , \n     stimulus :   '<p style=\"font-size: 48px;\">+</p>' , \n     choices :   jsPsych . NO_KEYS , \n     trial_duration :   1000 ,  };",
            "title": "Showing a 1 second fixation cross; no response allowed"
        },
        {
            "location": "/plugins/jspsych-html-slider-response/",
            "text": "jspsych-html-slider-response\n\u00b6\n\n\nThis plugin displays HTML content. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nHTML string\n\n\nundefined\n\n\nThe string to be displayed\n\n\n\n\n\n\nlabels\n\n\narray of strings\n\n\n[]\n\n\nLabels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width.\n\n\n\n\n\n\nbutton_label\n\n\nstring\n\n\n'Continue'\n\n\nLabel of the button to end the trial.\n\n\n\n\n\n\nmin\n\n\ninteger\n\n\n0\n\n\nSets the minimum value of the slider\n\n\n\n\n\n\nmax\n\n\ninteger\n\n\n100\n\n\nSets the maximum value of the slider\n\n\n\n\n\n\nstart\n\n\ninteger\n\n\n50\n\n\nSets the starting value of the slider\n\n\n\n\n\n\nstep\n\n\ninteger\n\n\n1\n\n\nSets the step of the slider. This is the smallest amount by which the slider can change.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\nstimulus_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to \nhidden\n after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends.\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntrial_duration\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nresponse\n\n\nnumeric\n\n\nThe numeric value of the slider.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nThe HTML content that was displayed on the screen.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nDisplaying content until subject responds\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'html-slider-response'\n,\n\n    \nstimulus\n:\n \n'<p>Running</p>'\n,\n\n    \nlabels\n:\n \n[\n'healthy'\n,\n \n'unhealthy'\n],\n\n    \nprompt\n:\n \n\"<p>How healthy/unhealthy is this activity?</p>\"\n\n\n};",
            "title": "jspsych-html-slider-response"
        },
        {
            "location": "/plugins/jspsych-html-slider-response/#jspsych-html-slider-response",
            "text": "This plugin displays HTML content. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.",
            "title": "jspsych-html-slider-response"
        },
        {
            "location": "/plugins/jspsych-html-slider-response/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  HTML string  undefined  The string to be displayed    labels  array of strings  []  Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width.    button_label  string  'Continue'  Label of the button to end the trial.    min  integer  0  Sets the minimum value of the slider    max  integer  100  Sets the maximum value of the slider    start  integer  50  Sets the starting value of the slider    step  integer  1  Sets the step of the slider. This is the smallest amount by which the slider can change.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    stimulus_duration  numeric  null  How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to  hidden  after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends.    trial_duration  numeric  null  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  trial_duration  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-html-slider-response/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      response  numeric  The numeric value of the slider.    rt  numeric  The time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    stimulus  string  The HTML content that was displayed on the screen.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-html-slider-response/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-html-slider-response/#displaying-content-until-subject-responds",
            "text": "var   trial   =   { \n     type :   'html-slider-response' , \n     stimulus :   '<p>Running</p>' , \n     labels :   [ 'healthy' ,   'unhealthy' ], \n     prompt :   \"<p>How healthy/unhealthy is this activity?</p>\"  };",
            "title": "Displaying content until subject responds"
        },
        {
            "location": "/plugins/jspsych-iat-html/",
            "text": "jspsych-iat-html plugin\n\u00b6\n\n\nThis plugin runs a single trial of the \nimplicit association test (IAT)\n, using HTML content as the stimulus.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nundefined\n\n\nThe HTML-format stimulus to display.\n\n\n\n\n\n\nhtml_when_wrong\n\n\nstring\n\n\n<span style=\"color: red; font-size: 80px\">X</span>\n\n\nThe content to display when a user presses the wrong key.\n\n\n\n\n\n\nbottom_instructions\n\n\nstring\n\n\n<p>If you press the wrong key, a red X will appear. Press any key to continue.</p>\n\n\nInstructions about making a wrong key press and whether another key press is needed to continue.\n\n\n\n\n\n\nforce_correct_key_press\n\n\nboolean\n\n\nfalse\n\n\nIf this is true and the user presses the wrong key then they have to press the other key to continue. An example would be two keys 'E' and 'I'. If the key associated with the stimulus is 'E' and key 'I' was pressed, then pressing 'E' is needed to continue the trial. When this is true, then parameter key_to_move_forward is not used.\n\n\n\n\n\n\ndisplay_feedback\n\n\nboolean\n\n\nfalse\n\n\nIf true, then \nhtml_when_wrong\n and \nwrong_image_name\n is required. If false, timing_response is needed and trial will continue automatically.\n\n\n\n\n\n\nleft_category_key\n\n\nstring\n\n\n'E'\n\n\nKey press that is associated with the left_category_label.\n\n\n\n\n\n\nright_category_key\n\n\nstring\n\n\n'I'\n\n\nKey press that is associated with the right_category_label.\n\n\n\n\n\n\nleft_category_label\n\n\nstring\n\n\n['left']\n\n\nAn array that contains the words/labels associated with a certain stimulus. The labels are aligned to the left side of the page.\n\n\n\n\n\n\nright_category_label\n\n\nstring\n\n\n['right']\n\n\nAn array that contains the words/labels associated with a certain stimulus. The labels are aligned to the right side of the page.\n\n\n\n\n\n\nstim_key_association\n\n\nstring\n\n\n'undefined'\n\n\nInputs are either 'left' or 'right'. It will associate the stimulus with the key presses on the left or right side of the page(left_category_key or right_category_key).\n\n\n\n\n\n\nkey_to_move_forward\n\n\narray of characters\n\n\n[jsPsych.ALL_KEYS]\n\n\nThis array contains the characters the subject is allowed to press to move on to the next trial if their key press was incorrect and feedback was displayed. Can also have 'other key' as an option which will only allow the user to select the right key to move forward.\n\n\n\n\n\n\ntiming_response\n\n\nnumeric\n\n\nnull\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntiming_response\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nEither the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\nboolean of whether the user's key press was correct for the given image or incorrect.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nvar\n \ntrial_block\n \n=\n \n{\n\n  \ntype\n:\n \n'iat-html'\n,\n\n  \nstimulus\n:\n \n'Golf'\n,\n\n  \nstim_key_association\n:\n \n'left'\n,\n\n  \nhtml_when_wrong\n:\n \n'<span style=\"color: red; font-size: 80px\">X</span>'\n,\n\n  \nbottom_instructions\n:\n \n'<p>If you press the wrong key, a red X will appear. Press the other key to continue</p>'\n,\n\n  \nforce_correct_key_press\n:\n \ntrue\n,\n\n  \ndisplay_feedback\n:\n \ntrue\n,\n\n  \ntiming_response\n:\n \n3000\n,\n \n//Only if display_feedback is false\n\n  \nleft_category_key\n:\n \n'E'\n,\n\n  \nright_category_key\n:\n \n'I'\n,\n\n  \nleft_category_label\n:\n \n[\n'OLD'\n],\n\n  \nright_category_label\n:\n \n[\n'YOUNG'\n],\n\n  \nresponse_ends_trial\n:\n \ntrue\n\n\n}\n\n\n\nvar\n \ntimeline\n \n=\n \n[];\n\n\ntimeline\n.\npush\n(\ntrial_block\n);\n\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \ntimeline\n,\n\n  \non_finish\n:\n \nfunction\n()\n \n{\n\n    \njsPsych\n.\ndata\n.\ndisplayData\n();\n\n  \n}\n\n\n});",
            "title": "jspsych-iat-html"
        },
        {
            "location": "/plugins/jspsych-iat-html/#jspsych-iat-html-plugin",
            "text": "This plugin runs a single trial of the  implicit association test (IAT) , using HTML content as the stimulus.",
            "title": "jspsych-iat-html plugin"
        },
        {
            "location": "/plugins/jspsych-iat-html/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  string  undefined  The HTML-format stimulus to display.    html_when_wrong  string  <span style=\"color: red; font-size: 80px\">X</span>  The content to display when a user presses the wrong key.    bottom_instructions  string  <p>If you press the wrong key, a red X will appear. Press any key to continue.</p>  Instructions about making a wrong key press and whether another key press is needed to continue.    force_correct_key_press  boolean  false  If this is true and the user presses the wrong key then they have to press the other key to continue. An example would be two keys 'E' and 'I'. If the key associated with the stimulus is 'E' and key 'I' was pressed, then pressing 'E' is needed to continue the trial. When this is true, then parameter key_to_move_forward is not used.    display_feedback  boolean  false  If true, then  html_when_wrong  and  wrong_image_name  is required. If false, timing_response is needed and trial will continue automatically.    left_category_key  string  'E'  Key press that is associated with the left_category_label.    right_category_key  string  'I'  Key press that is associated with the right_category_label.    left_category_label  string  ['left']  An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the left side of the page.    right_category_label  string  ['right']  An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the right side of the page.    stim_key_association  string  'undefined'  Inputs are either 'left' or 'right'. It will associate the stimulus with the key presses on the left or right side of the page(left_category_key or right_category_key).    key_to_move_forward  array of characters  [jsPsych.ALL_KEYS]  This array contains the characters the subject is allowed to press to move on to the next trial if their key press was incorrect and feedback was displayed. Can also have 'other key' as an option which will only allow the user to select the right key to move forward.    timing_response  numeric  null  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  timing_response  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-iat-html/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    correct  boolean  boolean of whether the user's key press was correct for the given image or incorrect.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-iat-html/#examples",
            "text": "var   trial_block   =   { \n   type :   'iat-html' , \n   stimulus :   'Golf' , \n   stim_key_association :   'left' , \n   html_when_wrong :   '<span style=\"color: red; font-size: 80px\">X</span>' , \n   bottom_instructions :   '<p>If you press the wrong key, a red X will appear. Press the other key to continue</p>' , \n   force_correct_key_press :   true , \n   display_feedback :   true , \n   timing_response :   3000 ,   //Only if display_feedback is false \n   left_category_key :   'E' , \n   right_category_key :   'I' , \n   left_category_label :   [ 'OLD' ], \n   right_category_label :   [ 'YOUNG' ], \n   response_ends_trial :   true  }  var   timeline   =   [];  timeline . push ( trial_block );  jsPsych . init ({ \n   timeline :   timeline , \n   on_finish :   function ()   { \n     jsPsych . data . displayData (); \n   }  });",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-iat-image/",
            "text": "jspsych-iat-image plugin\n\u00b6\n\n\nThis plugin runs a single trial of the \nimplicit association test (IAT)\n, using an image as the stimulus.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nundefined\n\n\nThe stimulus to display. The path to an image.\n\n\n\n\n\n\nhtm_when_wrong\n\n\nstring\n\n\n<span style=\"color: red; font-size: 80px\">X</span>\n\n\nThe image to display when a user presses the wrong key.\n\n\n\n\n\n\nbottom_instructions\n\n\nstring\n\n\n<p>If you press the wrong key, a red X will appear. Press any key to continue.</p>\n\n\nInstructions about making a wrong key press and whether another key press is needed to continue.\n\n\n\n\n\n\nforce_correct_key_press\n\n\nboolean\n\n\nfalse\n\n\nIf this is true and the user presses the wrong key then they have to press the other key to continue. An example would be two keys 'E' and 'I'. If the key associated with the stimulus is 'E' and key 'I' was pressed, then pressing 'E' is needed to continue the trial. When this is true, then parameter key_to_move_forward is not used.\n\n\n\n\n\n\ndisplay_feedback\n\n\nboolean\n\n\nfalse\n\n\nIf true, then image_when_wrong and wrong_image_name is required. If false, timing_response is needed and trial will continue automatically.\n\n\n\n\n\n\nleft_category_key\n\n\nstring\n\n\n'E'\n\n\nKey press that is associated with the left_category_label.\n\n\n\n\n\n\nright_category_key\n\n\nstring\n\n\n'I'\n\n\nKey press that is associated with the right_category_label.\n\n\n\n\n\n\nleft_category_label\n\n\nstring\n\n\n['left']\n\n\nAn array that contains the words/labels associated with a certain stimulus. The labels are aligned to the left side of the page.\n\n\n\n\n\n\nright_category_label\n\n\nstring\n\n\n['right']\n\n\nAn array that contains the words/labels associated with a certain stimulus. The labels are aligned to the right side of the page.\n\n\n\n\n\n\nstim_key_association\n\n\nstring\n\n\n'undefined'\n\n\nInputs are either 'left' or 'right'. It will associate the stimulus with the key presses on the left or right side of the page(left_category_key or right_category_key).\n\n\n\n\n\n\nkey_to_move_forward\n\n\narray of characters\n\n\n[jsPsych.ALL_KEYS]\n\n\nThis array contains the characters the subject is allowed to press to move on to the next trial if their key press was incorrect and feedback was displayed. Can also have 'other key' as an option which will only allow the user to select the right key to move forward.\n\n\n\n\n\n\ntiming_response\n\n\nnumeric\n\n\nnull\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntiming_response\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nEither the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\nboolean of whether the user's key press was correct for the given image or incorrect.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nvar\n \ntrial_block\n \n=\n \n{\n\n  \ntype\n:\n \n'iat-image'\n,\n\n  \nstimulus\n:\n \n'img/blue.png'\n,\n\n  \nstim_key_association\n:\n \n'left'\n,\n\n  \nhtml_when_wrong\n:\n \n'<span style=\"color: red; font-size: 80px\">X</span>'\n,\n\n  \nbottom_instructions\n:\n \n'<p>If you press the wrong key, a red X will appear. Press the other key to continue</p>'\n,\n\n  \nforce_correct_key_press\n:\n \ntrue\n,\n\n  \ndisplay_feedback\n:\n \ntrue\n,\n\n  \ntiming_response\n:\n \n3000\n,\n \n//Only if display_feedback is false\n\n  \nleft_category_key\n:\n \n'E'\n,\n\n  \nright_category_key\n:\n \n'I'\n,\n\n  \nleft_category_label\n:\n \n[\n'OLD'\n],\n\n  \nright_category_label\n:\n \n[\n'YOUNG'\n],\n\n  \nresponse_ends_trial\n:\n \ntrue\n\n\n}\n\n\n\nvar\n \ntimeline\n \n=\n \n[];\n\n\ntimeline\n.\npush\n(\ntrial_block\n);\n\n\n\njsPsych\n.\ninit\n({\n\n  \ntimeline\n:\n \ntimeline\n,\n\n  \non_finish\n:\n \nfunction\n()\n \n{\n\n    \njsPsych\n.\ndata\n.\ndisplayData\n();\n\n  \n}\n\n\n});",
            "title": "jspsych-iat-image"
        },
        {
            "location": "/plugins/jspsych-iat-image/#jspsych-iat-image-plugin",
            "text": "This plugin runs a single trial of the  implicit association test (IAT) , using an image as the stimulus.",
            "title": "jspsych-iat-image plugin"
        },
        {
            "location": "/plugins/jspsych-iat-image/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  string  undefined  The stimulus to display. The path to an image.    htm_when_wrong  string  <span style=\"color: red; font-size: 80px\">X</span>  The image to display when a user presses the wrong key.    bottom_instructions  string  <p>If you press the wrong key, a red X will appear. Press any key to continue.</p>  Instructions about making a wrong key press and whether another key press is needed to continue.    force_correct_key_press  boolean  false  If this is true and the user presses the wrong key then they have to press the other key to continue. An example would be two keys 'E' and 'I'. If the key associated with the stimulus is 'E' and key 'I' was pressed, then pressing 'E' is needed to continue the trial. When this is true, then parameter key_to_move_forward is not used.    display_feedback  boolean  false  If true, then image_when_wrong and wrong_image_name is required. If false, timing_response is needed and trial will continue automatically.    left_category_key  string  'E'  Key press that is associated with the left_category_label.    right_category_key  string  'I'  Key press that is associated with the right_category_label.    left_category_label  string  ['left']  An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the left side of the page.    right_category_label  string  ['right']  An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the right side of the page.    stim_key_association  string  'undefined'  Inputs are either 'left' or 'right'. It will associate the stimulus with the key presses on the left or right side of the page(left_category_key or right_category_key).    key_to_move_forward  array of characters  [jsPsych.ALL_KEYS]  This array contains the characters the subject is allowed to press to move on to the next trial if their key press was incorrect and feedback was displayed. Can also have 'other key' as an option which will only allow the user to select the right key to move forward.    timing_response  numeric  null  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  timing_response  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-iat-image/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    correct  boolean  boolean of whether the user's key press was correct for the given image or incorrect.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-iat-image/#examples",
            "text": "var   trial_block   =   { \n   type :   'iat-image' , \n   stimulus :   'img/blue.png' , \n   stim_key_association :   'left' , \n   html_when_wrong :   '<span style=\"color: red; font-size: 80px\">X</span>' , \n   bottom_instructions :   '<p>If you press the wrong key, a red X will appear. Press the other key to continue</p>' , \n   force_correct_key_press :   true , \n   display_feedback :   true , \n   timing_response :   3000 ,   //Only if display_feedback is false \n   left_category_key :   'E' , \n   right_category_key :   'I' , \n   left_category_label :   [ 'OLD' ], \n   right_category_label :   [ 'YOUNG' ], \n   response_ends_trial :   true  }  var   timeline   =   [];  timeline . push ( trial_block );  jsPsych . init ({ \n   timeline :   timeline , \n   on_finish :   function ()   { \n     jsPsych . data . displayData (); \n   }  });",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-image-button-response/",
            "text": "jspsych-html-button-response\n\u00b6\n\n\nThis plugin displays an image and records responses generated with a button click. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. The button itself can be customized using HTML formatting.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified.\nOther parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nundefined\n\n\nThe path of the image file to be displayed.\n\n\n\n\n\n\nchoices\n\n\narray of strings\n\n\n[]\n\n\nLabels for the buttons. Each different string in the array will generate a different button.\n\n\n\n\n\n\nbutton_html\n\n\nHTML string\n\n\n'<button class=\"jspsych-btn\">%choice%</button>'\n\n\nA template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string \n%choice%\n will be changed to the corresponding element of the \nchoices\n array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the \nchoices\n array and this array must have the same length. The HTML from position 0 in the \nbutton_html\n array will be used to create the button for element 0 in the \nchoices\n array, and so on.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\nstimulus_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response.\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely.\n\n\n\n\n\n\nmargin_vertical\n\n\nstring\n\n\n'0px'\n\n\nVertical margin of the button(s).\n\n\n\n\n\n\nmargin_horizontal\n\n\nstring\n\n\n'8px'\n\n\nHorizontal margin of the button(s).\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntrial_duration\n parameter). If false, then the trial will continue until the value for \ntiming_response\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\nbutton_pressed\n\n\nnumeric\n\n\nIndicates which button the subject pressed. The first button in the \nchoices\n array is 0, the second is 1, and so on.\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nThe path of the image that was displayed.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nDisplaying question until subject gives a response\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'image-button-response'\n,\n\n    \nstimulus\n:\n \n'img/happy_face_1.png'\n,\n\n    \nchoices\n:\n \n[\n'Happy'\n,\n \n'Sad'\n],\n\n    \nprompt\n:\n \n\"<p>Is this person happy or sad?</p>\"\n\n\n};",
            "title": "jspsych-image-button-response"
        },
        {
            "location": "/plugins/jspsych-image-button-response/#jspsych-html-button-response",
            "text": "This plugin displays an image and records responses generated with a button click. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. The button itself can be customized using HTML formatting.",
            "title": "jspsych-html-button-response"
        },
        {
            "location": "/plugins/jspsych-image-button-response/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified.\nOther parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  string  undefined  The path of the image file to be displayed.    choices  array of strings  []  Labels for the buttons. Each different string in the array will generate a different button.    button_html  HTML string  '<button class=\"jspsych-btn\">%choice%</button>'  A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string  %choice%  will be changed to the corresponding element of the  choices  array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the  choices  array and this array must have the same length. The HTML from position 0 in the  button_html  array will be used to create the button for element 0 in the  choices  array, and so on.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    stimulus_duration  numeric  null  How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response.    trial_duration  numeric  null  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely.    margin_vertical  string  '0px'  Vertical margin of the button(s).    margin_horizontal  string  '8px'  Horizontal margin of the button(s).    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  trial_duration  parameter). If false, then the trial will continue until the value for  timing_response  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-image-button-response/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    button_pressed  numeric  Indicates which button the subject pressed. The first button in the  choices  array is 0, the second is 1, and so on.    stimulus  string  The path of the image that was displayed.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-image-button-response/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-image-button-response/#displaying-question-until-subject-gives-a-response",
            "text": "var   trial   =   { \n     type :   'image-button-response' , \n     stimulus :   'img/happy_face_1.png' , \n     choices :   [ 'Happy' ,   'Sad' ], \n     prompt :   \"<p>Is this person happy or sad?</p>\"  };",
            "title": "Displaying question until subject gives a response"
        },
        {
            "location": "/plugins/jspsych-image-keyboard-response/",
            "text": "jspsych-image-keyboard-response\n\u00b6\n\n\nThis plugin displays and image and records responses generated with the keyboard.The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nundefined\n\n\nThe path of the image file to be displayed.\n\n\n\n\n\n\nchoices\n\n\narray of keycodes\n\n\njsPsych.ALL_KEYS\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g., \n'a'\n, \n'q'\n). The default value of \njsPsych.ALL_KEYS\n means that all keys will be accepted as valid responses. Specifying \njsPsych.NO_KEYS\n will mean that no responses are allowed.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\nstimulus_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response.\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntrial_duration\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nThe path of the image that was displayed.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nDisplaying trial until subject gives a response\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'image-keyboard-response'\n,\n\n    \nstimulus\n:\n \n'img/happy_face_1.png'\n,\n\n    \nchoices\n:\n \n[\n'e'\n,\n \n'i'\n],\n\n    \nprompt\n:\n \n\"<p>Is this person happy or sad? Press 'e' for happy and 'i' for sad.</p>\"\n,\n\n  \nresponse_ends_trial\n:\n \nfalse\n\n\n};\n\n\n\n\n\n\nDisplaying image for a fixed duration; no response allowed\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'image-button-response'\n,\n\n    \nstimulus\n:\n \n'img/happy_face_1.png'\n,\n\n    \nchoices\n:\n \njsPsych\n.\nNO_KEYS\n,\n\n    \nprompt\n:\n \n\"<p>Study this face for 5 seconds.</p>\"\n,\n\n    \ntrial_duration\n:\n \n5000\n\n\n};",
            "title": "jspsych-image-keyboard-response"
        },
        {
            "location": "/plugins/jspsych-image-keyboard-response/#jspsych-image-keyboard-response",
            "text": "This plugin displays and image and records responses generated with the keyboard.The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.",
            "title": "jspsych-image-keyboard-response"
        },
        {
            "location": "/plugins/jspsych-image-keyboard-response/#parameters",
            "text": "Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  string  undefined  The path of the image file to be displayed.    choices  array of keycodes  jsPsych.ALL_KEYS  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.,  'a' ,  'q' ). The default value of  jsPsych.ALL_KEYS  means that all keys will be accepted as valid responses. Specifying  jsPsych.NO_KEYS  will mean that no responses are allowed.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    stimulus_duration  numeric  null  How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response.    trial_duration  numeric  null  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  trial_duration  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-image-keyboard-response/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    stimulus  string  The path of the image that was displayed.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-image-keyboard-response/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-image-keyboard-response/#displaying-trial-until-subject-gives-a-response",
            "text": "var   trial   =   { \n     type :   'image-keyboard-response' , \n     stimulus :   'img/happy_face_1.png' , \n     choices :   [ 'e' ,   'i' ], \n     prompt :   \"<p>Is this person happy or sad? Press 'e' for happy and 'i' for sad.</p>\" , \n   response_ends_trial :   false  };",
            "title": "Displaying trial until subject gives a response"
        },
        {
            "location": "/plugins/jspsych-image-keyboard-response/#displaying-image-for-a-fixed-duration-no-response-allowed",
            "text": "var   trial   =   { \n     type :   'image-button-response' , \n     stimulus :   'img/happy_face_1.png' , \n     choices :   jsPsych . NO_KEYS , \n     prompt :   \"<p>Study this face for 5 seconds.</p>\" , \n     trial_duration :   5000  };",
            "title": "Displaying image for a fixed duration; no response allowed"
        },
        {
            "location": "/plugins/jspsych-image-slider-response/",
            "text": "jspsych-image-slider-response\n\u00b6\n\n\nThis plugin displays an image.The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nundefined\n\n\nThe path to the image file to be displayed.\n\n\n\n\n\n\nlabels\n\n\narray of strings\n\n\n[]\n\n\nLabels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width.\n\n\n\n\n\n\nbutton_label\n\n\nstring\n\n\n'Continue'\n\n\nLabel of the button to advance/submit\n\n\n\n\n\n\nmin\n\n\ninteger\n\n\n0\n\n\nSets the minimum value of the slider\n\n\n\n\n\n\nmax\n\n\ninteger\n\n\n100\n\n\nSets the maximum value of the slider\n\n\n\n\n\n\nstart\n\n\ninteger\n\n\n50\n\n\nSets the starting value of the slider\n\n\n\n\n\n\nstep\n\n\ninteger\n\n\n1\n\n\nSets the step of the slider\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\nstimulus_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response.\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntrial_duration\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nresponse\n\n\nnumeric\n\n\nThe numeric value of the slider.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nThe path of the image that was displayed.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nDisplaying trial until subject gives a response\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'image-slider-response'\n,\n\n    \nstimulus\n:\n \n'img/happy_face_1.png'\n,\n\n    \nlabels\n:\n \n[\n'happy'\n,\n \n'sad'\n],\n\n    \nprompt\n:\n \n\"<p>How happy/sad is this person?</p>\"\n,\n\n  \nresponse_ends_trial\n:\n \nfalse\n\n\n};",
            "title": "jspsych-image-slider-response"
        },
        {
            "location": "/plugins/jspsych-image-slider-response/#jspsych-image-slider-response",
            "text": "This plugin displays an image.The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.",
            "title": "jspsych-image-slider-response"
        },
        {
            "location": "/plugins/jspsych-image-slider-response/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  string  undefined  The path to the image file to be displayed.    labels  array of strings  []  Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width.    button_label  string  'Continue'  Label of the button to advance/submit    min  integer  0  Sets the minimum value of the slider    max  integer  100  Sets the maximum value of the slider    start  integer  50  Sets the starting value of the slider    step  integer  1  Sets the step of the slider    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).    stimulus_duration  numeric  null  How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response.    trial_duration  numeric  null  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  trial_duration  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-image-slider-response/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      response  numeric  The numeric value of the slider.    rt  numeric  The time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    stimulus  string  The path of the image that was displayed.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-image-slider-response/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-image-slider-response/#displaying-trial-until-subject-gives-a-response",
            "text": "var   trial   =   { \n     type :   'image-slider-response' , \n     stimulus :   'img/happy_face_1.png' , \n     labels :   [ 'happy' ,   'sad' ], \n     prompt :   \"<p>How happy/sad is this person?</p>\" , \n   response_ends_trial :   false  };",
            "title": "Displaying trial until subject gives a response"
        },
        {
            "location": "/plugins/jspsych-instructions/",
            "text": "jspsych-instructions plugin\n\u00b6\n\n\nThis plugin is for showing instructions to the subject. It allows subjects to navigate through multiple pages of instructions at their own pace, recording how long the subject spends on each page. Navigation can be done using the mouse or keyboard. Subjects can be allowed to navigate forwards and backwards through pages, if desired.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npages\n\n\narray\n\n\nundefined\n\n\nEach element of the array is the content for a single page. Each page should be an HTML-formatted string.\n\n\n\n\n\n\nkey_forward\n\n\nkey code\n\n\n'rightarrow'\n\n\nThis is the key that the subject can press in order to advance to the next page. Keys can be specified as their \nnumeric key code\n or as characters (e.g., \n'a'\n, \n'q'\n).\n\n\n\n\n\n\nkey_backward\n\n\nkey code\n\n\n'leftarrow'\n\n\nThis is the key that the subject can press to return to the previous page.\n\n\n\n\n\n\nallow_backward\n\n\nboolean\n\n\ntrue\n\n\nIf true, the subject can return to previous pages of the instructions. If false, they may only advace to the next page.\n\n\n\n\n\n\nallow_keys\n\n\nboolean\n\n\ntrue\n\n\nIf true, the subject can use keyboard keys to navigate the pages. If false, they may not.\n\n\n\n\n\n\nshow_clickable_nav\n\n\nboolean\n\n\nfalse\n\n\nIf true, then a \nPrevious\n and \nNext\n button will be displayed beneath the instructions. Subjects can click the buttons to navigate.\n\n\n\n\n\n\nbutton_label_previous\n\n\nstring\n\n\n'Previous'\n\n\nThe text that appears on the button to go backwards.\n\n\n\n\n\n\nbutton_label_next\n\n\nstring\n\n\n'Next'\n\n\nThe text that appears on the button to go forwards.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nview_history\n\n\nJSON string\n\n\nA JSON string containing the order of pages the subject viewed (including when the subject returned to previous pages) and the time spent viewing each page.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to view all of the pages.\n\n\n\n\n\n\n\n\nExample\n\u00b6\n\n\nShowing simple text instructions\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'instructions'\n,\n\n    \npages\n:\n \n[\n\n        \n'Welcome to the experiment. Click next to begin.'\n,\n\n        \n'This is the second page of instructions.'\n,\n\n        \n'This is the final page.'\n\n    \n],\n\n    \nshow_clickable_nav\n:\n \ntrue\n\n\n}\n\n\n\n\n\n\nIncluding images\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'instructions'\n,\n\n    \npages\n:\n \n[\n\n        \n'Welcome to the experiment. Click next to begin.'\n,\n\n        \n'Here is a picture of what you will do: <img src=\"instruction_image.jpg\"></img>'\n\n    \n],\n\n    \nshow_clickable_nav\n:\n \ntrue\n\n\n}",
            "title": "jspsych-instructions"
        },
        {
            "location": "/plugins/jspsych-instructions/#jspsych-instructions-plugin",
            "text": "This plugin is for showing instructions to the subject. It allows subjects to navigate through multiple pages of instructions at their own pace, recording how long the subject spends on each page. Navigation can be done using the mouse or keyboard. Subjects can be allowed to navigate forwards and backwards through pages, if desired.",
            "title": "jspsych-instructions plugin"
        },
        {
            "location": "/plugins/jspsych-instructions/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      pages  array  undefined  Each element of the array is the content for a single page. Each page should be an HTML-formatted string.    key_forward  key code  'rightarrow'  This is the key that the subject can press in order to advance to the next page. Keys can be specified as their  numeric key code  or as characters (e.g.,  'a' ,  'q' ).    key_backward  key code  'leftarrow'  This is the key that the subject can press to return to the previous page.    allow_backward  boolean  true  If true, the subject can return to previous pages of the instructions. If false, they may only advace to the next page.    allow_keys  boolean  true  If true, the subject can use keyboard keys to navigate the pages. If false, they may not.    show_clickable_nav  boolean  false  If true, then a  Previous  and  Next  button will be displayed beneath the instructions. Subjects can click the buttons to navigate.    button_label_previous  string  'Previous'  The text that appears on the button to go backwards.    button_label_next  string  'Next'  The text that appears on the button to go forwards.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-instructions/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      view_history  JSON string  A JSON string containing the order of pages the subject viewed (including when the subject returned to previous pages) and the time spent viewing each page.    rt  numeric  The response time in milliseconds for the subject to view all of the pages.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-instructions/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/plugins/jspsych-instructions/#showing-simple-text-instructions",
            "text": "var   trial   =   { \n     type :   'instructions' , \n     pages :   [ \n         'Welcome to the experiment. Click next to begin.' , \n         'This is the second page of instructions.' , \n         'This is the final page.' \n     ], \n     show_clickable_nav :   true  }",
            "title": "Showing simple text instructions"
        },
        {
            "location": "/plugins/jspsych-instructions/#including-images",
            "text": "var   trial   =   { \n     type :   'instructions' , \n     pages :   [ \n         'Welcome to the experiment. Click next to begin.' , \n         'Here is a picture of what you will do: <img src=\"instruction_image.jpg\"></img>' \n     ], \n     show_clickable_nav :   true  }",
            "title": "Including images"
        },
        {
            "location": "/plugins/jspsych-reconstruction/",
            "text": "jspsych-reconstruction plugin\n\u00b6\n\n\nThis plugin allows a subject to interact with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time.\n\n\nThe stimulus must be defined through a function that returns an HTML-formatted string. The function should take a single value, which is the parameter that can be modified by the subject. The value can only range from 0 to 1. See the example at the bottom of the page for a sample function.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstim_function\n\n\nfunction\n\n\nundefined\n\n\nA function with a single parameter that returns an HTML-formatted string representing the stimulus.\n\n\n\n\n\n\nstarting_value\n\n\nnumeric\n\n\n0.5\n\n\nThe starting value of the stimulus parameter.\n\n\n\n\n\n\nstep_size\n\n\nnumeric\n\n\n0.05\n\n\nThe change in the stimulus parameter caused by pressing one of the modification keys.\n\n\n\n\n\n\nkey_increase\n\n\nkey code\n\n\n'h'\n\n\nThe key to press for increasing the parameter value.\n\n\n\n\n\n\nkey_decrease\n\n\nkey code\n\n\n'g'\n\n\nThe key to press for decreasing the parameter value.\n\n\n\n\n\n\nbutton_label\n\n\nstring\n\n\n'Continue'\n\n\nThe text that appears on the button to finish the trial.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstart_value\n\n\nnumeric\n\n\nThe starting value of the stimulus parameter.\n\n\n\n\n\n\nfinal_value\n\n\nnumeric\n\n\nThe final value of the stimulus parameter.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe length of time, in milliseconds, that the trial lasted.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nMake a block larger and smaller\n\u00b6\n\n\nvar\n \nsample_function\n \n=\n \nfunction\n(\nparam\n){\n\n    \nvar\n \nsize\n \n=\n \n50\n \n+\n \nMath\n.\nfloor\n(\nparam\n*\n250\n);\n\n    \nvar\n \nhtml\n \n=\n \n'<div style=\"display: block; margin: auto; height: 300px;\">'\n+\n\n    \n'<div style=\"display: block; margin: auto; background-color: #000000; '\n+\n\n    \n'width: '\n+\nsize\n+\n'px; height: '\n+\nsize\n+\n'px;\"></div></div>'\n;\n\n    \nreturn\n \nhtml\n;\n\n\n}\n\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'reconstruction'\n,\n\n    \nstim_function\n:\n \nsample_function\n,\n\n    \nstarting_value\n:\n \n0.25\n\n\n}",
            "title": "jspsych-reconstruction"
        },
        {
            "location": "/plugins/jspsych-reconstruction/#jspsych-reconstruction-plugin",
            "text": "This plugin allows a subject to interact with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time.  The stimulus must be defined through a function that returns an HTML-formatted string. The function should take a single value, which is the parameter that can be modified by the subject. The value can only range from 0 to 1. See the example at the bottom of the page for a sample function.",
            "title": "jspsych-reconstruction plugin"
        },
        {
            "location": "/plugins/jspsych-reconstruction/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stim_function  function  undefined  A function with a single parameter that returns an HTML-formatted string representing the stimulus.    starting_value  numeric  0.5  The starting value of the stimulus parameter.    step_size  numeric  0.05  The change in the stimulus parameter caused by pressing one of the modification keys.    key_increase  key code  'h'  The key to press for increasing the parameter value.    key_decrease  key code  'g'  The key to press for decreasing the parameter value.    button_label  string  'Continue'  The text that appears on the button to finish the trial.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-reconstruction/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      start_value  numeric  The starting value of the stimulus parameter.    final_value  numeric  The final value of the stimulus parameter.    rt  numeric  The length of time, in milliseconds, that the trial lasted.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-reconstruction/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-reconstruction/#make-a-block-larger-and-smaller",
            "text": "var   sample_function   =   function ( param ){ \n     var   size   =   50   +   Math . floor ( param * 250 ); \n     var   html   =   '<div style=\"display: block; margin: auto; height: 300px;\">' + \n     '<div style=\"display: block; margin: auto; background-color: #000000; ' + \n     'width: ' + size + 'px; height: ' + size + 'px;\"></div></div>' ; \n     return   html ;  }  var   trial   =   { \n     type :   'reconstruction' , \n     stim_function :   sample_function , \n     starting_value :   0.25  }",
            "title": "Make a block larger and smaller"
        },
        {
            "location": "/plugins/jspsych-resize/",
            "text": "jspsych-resize\n\u00b6\n\n\nThis plugin displays a resizable div container that allows the user to drag until the container is the same size as the item being measured. Once the user measures the item as close as possible, clicking the button sets a scaling factor for the div containing jsPsych content. This causes the stimuli that follow to have a known size, independent of monitor resolution.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitem_height\n\n\nnumeric\n\n\n1\n\n\nThe height of the item to be measured. Any units can be used as long as you are consistent with using the same units for all parameters.\n\n\n\n\n\n\nitem_width\n\n\nnumeric\n\n\n1\n\n\nThe width of the item to be measured.\n\n\n\n\n\n\npixels_per_unit\n\n\nnumeric\n\n\n100\n\n\nAfter the scaling factor is applied, this many pixels will equal one unit of measurement.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n''\n\n\nHTML content to display below the resizable box, and above the button.\n\n\n\n\n\n\nbutton_label\n\n\nstring\n\n\n'Continue'\n\n\nLabel to display on the button to complete calibration.\n\n\n\n\n\n\nstarting_size\n\n\nnumeric\n\n\n100\n\n\nThe initial size of the box, in pixels, along the largest dimension. The aspect ratio will be set automatically to match the item width and height.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nMeasuring a credit card and resizing the display to have 150 pixels equal an inch.\n\u00b6\n\n\nvar\n \ninputs\n \n=\n \n{\n\n  \ntype\n:\n \n'resize'\n,\n\n  \nitem_width\n:\n \n3\n \n+\n \n3\n/\n8\n,\n\n  \nitem_height\n:\n \n2\n \n+\n \n1\n/\n8\n,\n\n  \nprompt\n:\n \n\"<p>Click and drag the lower right corner of the box until the box is the same size as a credit card held up to the screen.</p>\"\n,\n\n  \npixels_per_unit\n:\n \n150\n\n\n};",
            "title": "jspsych-resize"
        },
        {
            "location": "/plugins/jspsych-resize/#jspsych-resize",
            "text": "This plugin displays a resizable div container that allows the user to drag until the container is the same size as the item being measured. Once the user measures the item as close as possible, clicking the button sets a scaling factor for the div containing jsPsych content. This causes the stimuli that follow to have a known size, independent of monitor resolution.",
            "title": "jspsych-resize"
        },
        {
            "location": "/plugins/jspsych-resize/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      item_height  numeric  1  The height of the item to be measured. Any units can be used as long as you are consistent with using the same units for all parameters.    item_width  numeric  1  The width of the item to be measured.    pixels_per_unit  numeric  100  After the scaling factor is applied, this many pixels will equal one unit of measurement.    prompt  string  ''  HTML content to display below the resizable box, and above the button.    button_label  string  'Continue'  Label to display on the button to complete calibration.    starting_size  numeric  100  The initial size of the box, in pixels, along the largest dimension. The aspect ratio will be set automatically to match the item width and height.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-resize/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-resize/#measuring-a-credit-card-and-resizing-the-display-to-have-150-pixels-equal-an-inch",
            "text": "var   inputs   =   { \n   type :   'resize' , \n   item_width :   3   +   3 / 8 , \n   item_height :   2   +   1 / 8 , \n   prompt :   \"<p>Click and drag the lower right corner of the box until the box is the same size as a credit card held up to the screen.</p>\" , \n   pixels_per_unit :   150  };",
            "title": "Measuring a credit card and resizing the display to have 150 pixels equal an inch."
        },
        {
            "location": "/plugins/jspsych-same-different-html/",
            "text": "jspsych-same-different-html plugin\n\u00b6\n\n\nThe same-different-html plugin displays two stimuli sequentially. Stimuli are HTML objects. The subject responds using the keyboard, and indicates whether the stimuli were the same or different. Same does not necessarily mean identical; a category judgment could be made, for example.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nA pair of stimuli, represented as an array with two entries, one for each stimulus. A stimulus is a string containing valid HTML markup. Stimuli will be shown in the order that they are defined in the array.\n\n\n\n\n\n\nanswer\n\n\nstring\n\n\nundefined\n\n\nEither \n'same'\n or \n'different'\n.\n\n\n\n\n\n\nsame_key\n\n\nnumeric or string\n\n\n'Q'\n\n\nThe key that subjects should press to indicate that the two stimuli are the same.\n\n\n\n\n\n\ndifferent_key\n\n\nnumeric or string\n\n\n'P'\n\n\nThe key that subjects should press to indicate that the two stimuli are different.\n\n\n\n\n\n\ntiming_first_stim\n\n\nnumeric\n\n\n1000\n\n\nHow long to show the first stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject presses any key.\n\n\n\n\n\n\ntiming_gap\n\n\nnumeric\n\n\n500\n\n\nHow long to show a blank screen in between the two stimuli.\n\n\n\n\n\n\ntiming_second_stim\n\n\nnumeric\n\n\n1000\n\n\nHow long to show the second stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject responds.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nAn JSON-encoded array of length 2 containing either the path to the image file or the string containing the HTML formatted content that the subject saw for each trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\ntrue\n if the subject's response matched the \nanswer\n for this trial.\n\n\n\n\n\n\nanswer\n\n\nstring\n\n\nThe correct answer to the trial, either \n'same'\n or \n'different'\n.\n\n\n\n\n\n\n\n\nAdditionally, if \ntiming_first_stim\n is  null, then the following data is also collected:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nrt_stim1\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to continue after the first stimulus. The time is measured from when the first stimulus appears on the screen until the subject's response.\n\n\n\n\n\n\nkey_press_stim1\n\n\nnumeric\n\n\nIndicates which key the subject pressed to continue. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nBasic example\n\u00b6\n\n\n  \nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'same-different'\n,\n\n    \nstimuli\n:\n \n[\n'<p>Climbing</p>'\n,\n \n'<p>Walking</p>'\n],\n\n    \nprompt\n:\n \n\"<p>Press S if the texts imply the same amount of physical exertion. Press D if the texts imply different amount of physical exertion.</p>\"\n,\n\n    \nsame_key\n:\n \n'S'\n,\n\n    \ndifferent_key\n:\n \n'D'\n,\n\n    \nanswer\n:\n \n'different'\n\n  \n}",
            "title": "jspsych-same-different-html"
        },
        {
            "location": "/plugins/jspsych-same-different-html/#jspsych-same-different-html-plugin",
            "text": "The same-different-html plugin displays two stimuli sequentially. Stimuli are HTML objects. The subject responds using the keyboard, and indicates whether the stimuli were the same or different. Same does not necessarily mean identical; a category judgment could be made, for example.",
            "title": "jspsych-same-different-html plugin"
        },
        {
            "location": "/plugins/jspsych-same-different-html/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  A pair of stimuli, represented as an array with two entries, one for each stimulus. A stimulus is a string containing valid HTML markup. Stimuli will be shown in the order that they are defined in the array.    answer  string  undefined  Either  'same'  or  'different' .    same_key  numeric or string  'Q'  The key that subjects should press to indicate that the two stimuli are the same.    different_key  numeric or string  'P'  The key that subjects should press to indicate that the two stimuli are different.    timing_first_stim  numeric  1000  How long to show the first stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject presses any key.    timing_gap  numeric  500  How long to show a blank screen in between the two stimuli.    timing_second_stim  numeric  1000  How long to show the second stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject responds.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-same-different-html/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  An JSON-encoded array of length 2 containing either the path to the image file or the string containing the HTML formatted content that the subject saw for each trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response.    correct  boolean  true  if the subject's response matched the  answer  for this trial.    answer  string  The correct answer to the trial, either  'same'  or  'different' .     Additionally, if  timing_first_stim  is  null, then the following data is also collected:     Name  Type  Value      rt_stim1  numeric  The response time in milliseconds for the subject to continue after the first stimulus. The time is measured from when the first stimulus appears on the screen until the subject's response.    key_press_stim1  numeric  Indicates which key the subject pressed to continue. The value is the  numeric key code  corresponding to the subject's response.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-same-different-html/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-same-different-html/#basic-example",
            "text": "var   trial   =   { \n     type :   'same-different' , \n     stimuli :   [ '<p>Climbing</p>' ,   '<p>Walking</p>' ], \n     prompt :   \"<p>Press S if the texts imply the same amount of physical exertion. Press D if the texts imply different amount of physical exertion.</p>\" , \n     same_key :   'S' , \n     different_key :   'D' , \n     answer :   'different' \n   }",
            "title": "Basic example"
        },
        {
            "location": "/plugins/jspsych-same-different-image/",
            "text": "jspsych-same-different plugin\n\u00b6\n\n\nThe same-different plugin displays two stimuli sequentially. Stimuli are image objects. The subject responds using the keyboard, and indicates whether the stimuli were the same or different. Same does not necessarily mean identical; a category judgment could be made, for example.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nA pair of stimuli, represented as an array with two entries, one for each stimulus. The stimulus is a path to an image file. Stimuli will be shown in the order that they are defined in the array.\n\n\n\n\n\n\nanswer\n\n\nstring\n\n\nundefined\n\n\nEither \n'same'\n or \n'different'\n.\n\n\n\n\n\n\nsame_key\n\n\nnumeric or string\n\n\n'Q'\n\n\nThe key that subjects should press to indicate that the two stimuli are the same.\n\n\n\n\n\n\ndifferent_key\n\n\nnumeric or string\n\n\n'P'\n\n\nThe key that subjects should press to indicate that the two stimuli are different.\n\n\n\n\n\n\ntiming_first_stim\n\n\nnumeric\n\n\n1000\n\n\nHow long to show the first stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject presses any key.\n\n\n\n\n\n\ntiming_gap\n\n\nnumeric\n\n\n500\n\n\nHow long to show a blank screen in between the two stimuli.\n\n\n\n\n\n\ntiming_second_stim\n\n\nnumeric\n\n\n1000\n\n\nHow long to show the second stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject responds.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nAn JSON-encoded array of length 2 containing either the path to the image file or the string containing the HTML formatted content that the subject saw for each trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\ntrue\n if the subject's response matched the \nanswer\n for this trial.\n\n\n\n\n\n\nanswer\n\n\nstring\n\n\nThe correct answer to the trial, either \n'same'\n or \n'different'\n.\n\n\n\n\n\n\n\n\nAdditionally, if \ntiming_first_stim\n is  null, then the following data is also collected:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nrt_stim1\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to continue after the first stimulus. The time is measured from when the first stimulus appears on the screen until the subject's response.\n\n\n\n\n\n\nkey_press_stim1\n\n\nnumeric\n\n\nIndicates which key the subject pressed to continue. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nPresenting two different emotional expressions\n\u00b6\n\n\nvar\n \nblock\n \n=\n \n{\n\n  \ntype\n:\n \n'same-different'\n,\n\n  \nstimuli\n:\n \n[\n'img/happy_face_1.jpg'\n,\n \n'img/sad_face_3.jpg'\n],\n\n  \nprompt\n:\n \n\"<p>Press S if the faces had the same emotional expression. Press D if the faces had different emotional expressions.</p>\"\n,\n\n  \nsame_key\n:\n \n'S'\n,\n\n  \ndifferent_key\n:\n \n'D'\n,\n\n  \nanswer\n:\n \n'different'\n\n\n}\n\n\n\n\n\n\nPresenting the same emotional expression\n\u00b6\n\n\nvar\n \nblock\n \n=\n \n{\n\n  \ntype\n:\n \n'same-different'\n,\n\n  \nstimuli\n:\n \n[\n'img/happy_face_1.jpg'\n,\n \n'img/happy_face_3.jpg'\n],\n\n  \nprompt\n:\n \n\"<p>Press S if the faces had the same emotional expression. Press D if the faces had different emotional expressions.</p>\"\n,\n\n  \nsame_key\n:\n \n'S'\n,\n\n  \ndifferent_key\n:\n \n'D'\n,\n\n  \nanswer\n:\n \n'same'\n\n\n}",
            "title": "jspsych-same-different-image"
        },
        {
            "location": "/plugins/jspsych-same-different-image/#jspsych-same-different-plugin",
            "text": "The same-different plugin displays two stimuli sequentially. Stimuli are image objects. The subject responds using the keyboard, and indicates whether the stimuli were the same or different. Same does not necessarily mean identical; a category judgment could be made, for example.",
            "title": "jspsych-same-different plugin"
        },
        {
            "location": "/plugins/jspsych-same-different-image/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  A pair of stimuli, represented as an array with two entries, one for each stimulus. The stimulus is a path to an image file. Stimuli will be shown in the order that they are defined in the array.    answer  string  undefined  Either  'same'  or  'different' .    same_key  numeric or string  'Q'  The key that subjects should press to indicate that the two stimuli are the same.    different_key  numeric or string  'P'  The key that subjects should press to indicate that the two stimuli are different.    timing_first_stim  numeric  1000  How long to show the first stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject presses any key.    timing_gap  numeric  500  How long to show a blank screen in between the two stimuli.    timing_second_stim  numeric  1000  How long to show the second stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject responds.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-same-different-image/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  An JSON-encoded array of length 2 containing either the path to the image file or the string containing the HTML formatted content that the subject saw for each trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response.    correct  boolean  true  if the subject's response matched the  answer  for this trial.    answer  string  The correct answer to the trial, either  'same'  or  'different' .     Additionally, if  timing_first_stim  is  null, then the following data is also collected:     Name  Type  Value      rt_stim1  numeric  The response time in milliseconds for the subject to continue after the first stimulus. The time is measured from when the first stimulus appears on the screen until the subject's response.    key_press_stim1  numeric  Indicates which key the subject pressed to continue. The value is the  numeric key code  corresponding to the subject's response.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-same-different-image/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-same-different-image/#presenting-two-different-emotional-expressions",
            "text": "var   block   =   { \n   type :   'same-different' , \n   stimuli :   [ 'img/happy_face_1.jpg' ,   'img/sad_face_3.jpg' ], \n   prompt :   \"<p>Press S if the faces had the same emotional expression. Press D if the faces had different emotional expressions.</p>\" , \n   same_key :   'S' , \n   different_key :   'D' , \n   answer :   'different'  }",
            "title": "Presenting two different emotional expressions"
        },
        {
            "location": "/plugins/jspsych-same-different-image/#presenting-the-same-emotional-expression",
            "text": "var   block   =   { \n   type :   'same-different' , \n   stimuli :   [ 'img/happy_face_1.jpg' ,   'img/happy_face_3.jpg' ], \n   prompt :   \"<p>Press S if the faces had the same emotional expression. Press D if the faces had different emotional expressions.</p>\" , \n   same_key :   'S' , \n   different_key :   'D' , \n   answer :   'same'  }",
            "title": "Presenting the same emotional expression"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time/",
            "text": "jspsych-serial-reaction-time plugin\n\u00b6\n\n\nThe serial reaction time plugin implements a generalized version of the SRT task \n(Nissen & Bullemer, 1987)\n. Squares are displayed in a grid-based system on the screen, and one square changes color. The participant presses a key that corresponds to the darkened key. Feedback is optionally displayed, showing the participant which square the key they pressed matches.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget\n\n\narray\n\n\nundefined\n\n\nThe location of the target. The array should be the \n[row, column]\n of the target.\n\n\n\n\n\n\ngrid\n\n\narray\n\n\n[[1,1,1,1]]\n\n\nThis array represents the grid of boxes shown on the screen. Each inner array represents a single row. The entries in the inner arrays represent the columns. If an entry is \n1\n then a square will be drawn at that location on the grid. If an entry is \n0\n then the corresponding location on the grid will be empty. Thus, by mixing \n1\ns and \n0\ns it is possible to create many different grid-based arrangements.\n\n\n\n\n\n\nchoices\n\n\narray\n\n\n[['3','5','7','9']]\n\n\nThe dimensions of this array must match the dimensions of \ngrid\n. Each entry in this array is the key that should be pressed for that corresponding location in the grid. Entries can be left blank if there is no key associated with that location of the grid.\n\n\n\n\n\n\ngrid_square_size\n\n\nnumeric\n\n\n100\n\n\nThe width and height in pixels of each square in the grid.\n\n\n\n\n\n\ntarget_color\n\n\nhex color code\n\n\n#999\n\n\nThe color of the target square.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, the trial ends after a key press. Feedback is displayed if \nshow_response_feedback\n is true.\n\n\n\n\n\n\npre_target_duration\n\n\nnumeric\n\n\n0\n\n\nThe number of milliseconds to display the grid \nbefore\n the target changes color.\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nThe maximum length of time of the trial, not including feedback.\n\n\n\n\n\n\nshow_response_feedback\n\n\nboolean\n\n\nfalse\n\n\nIf true, show feedback indicating where the user responded and whether it was correct.\n\n\n\n\n\n\nfeedback_duration\n\n\nnumeric\n\n\n200\n\n\nThe length of time in milliseconds to show the feedback.\n\n\n\n\n\n\nfade_duration\n\n\nnumeric\n\n\nnull\n\n\nIf a positive number, the target will progressively change color at the start of the trial, with the transition lasting this many milliseconds.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which keys to press).\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ngrid\n\n\nJSON\n\n\nA JSON-encoded representation of the grid.\n\n\n\n\n\n\ntarget\n\n\nJSON\n\n\nA JSON-encoded representation of the target on the grid.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\ntrue\n if the subject's response matched the target.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nBasic example with four squares in a single row\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'serial-reaction-time'\n,\n\n  \ngrid\n:\n \n[[\n1\n,\n1\n,\n1\n,\n1\n]],\n\n  \ntarget\n:\n \n[\n0\n,\n1\n]\n\n\n}\n\n\n\n\n\n\n2x2 grid, Showing feedback for 500ms\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'serial-reaction-time'\n,\n\n  \ngrid\n:\n \n[[\n1\n,\n1\n],[\n1\n,\n1\n]],\n\n  \nchoices\n:\n \n[[\n'r'\n,\n't'\n],[\n'f'\n,\n'g'\n]],\n\n  \ntarget\n:\n \n[\n1\n,\n0\n],\n\n  \nshow_response_feedback\n:\n \ntrue\n,\n\n  \nfeedback_duration\n:\n \n500\n\n\n}",
            "title": "jspsych-serial-reaction-time"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time/#jspsych-serial-reaction-time-plugin",
            "text": "The serial reaction time plugin implements a generalized version of the SRT task  (Nissen & Bullemer, 1987) . Squares are displayed in a grid-based system on the screen, and one square changes color. The participant presses a key that corresponds to the darkened key. Feedback is optionally displayed, showing the participant which square the key they pressed matches.",
            "title": "jspsych-serial-reaction-time plugin"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      target  array  undefined  The location of the target. The array should be the  [row, column]  of the target.    grid  array  [[1,1,1,1]]  This array represents the grid of boxes shown on the screen. Each inner array represents a single row. The entries in the inner arrays represent the columns. If an entry is  1  then a square will be drawn at that location on the grid. If an entry is  0  then the corresponding location on the grid will be empty. Thus, by mixing  1 s and  0 s it is possible to create many different grid-based arrangements.    choices  array  [['3','5','7','9']]  The dimensions of this array must match the dimensions of  grid . Each entry in this array is the key that should be pressed for that corresponding location in the grid. Entries can be left blank if there is no key associated with that location of the grid.    grid_square_size  numeric  100  The width and height in pixels of each square in the grid.    target_color  hex color code  #999  The color of the target square.    response_ends_trial  boolean  true  If true, the trial ends after a key press. Feedback is displayed if  show_response_feedback  is true.    pre_target_duration  numeric  0  The number of milliseconds to display the grid  before  the target changes color.    trial_duration  numeric  null  The maximum length of time of the trial, not including feedback.    show_response_feedback  boolean  false  If true, show feedback indicating where the user responded and whether it was correct.    feedback_duration  numeric  200  The length of time in milliseconds to show the feedback.    fade_duration  numeric  null  If a positive number, the target will progressively change color at the start of the trial, with the transition lasting this many milliseconds.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which keys to press).",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      grid  JSON  A JSON-encoded representation of the grid.    target  JSON  A JSON-encoded representation of the target on the grid.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response.    correct  boolean  true  if the subject's response matched the target.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time/#basic-example-with-four-squares-in-a-single-row",
            "text": "var   trial   =   { \n   type :   'serial-reaction-time' , \n   grid :   [[ 1 , 1 , 1 , 1 ]], \n   target :   [ 0 , 1 ]  }",
            "title": "Basic example with four squares in a single row"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time/#2x2-grid-showing-feedback-for-500ms",
            "text": "var   trial   =   { \n   type :   'serial-reaction-time' , \n   grid :   [[ 1 , 1 ],[ 1 , 1 ]], \n   choices :   [[ 'r' , 't' ],[ 'f' , 'g' ]], \n   target :   [ 1 , 0 ], \n   show_response_feedback :   true , \n   feedback_duration :   500  }",
            "title": "2x2 grid, Showing feedback for 500ms"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time-mouse/",
            "text": "jspsych-serial-reaction-time-mouse plugin\n\u00b6\n\n\nThe serial reaction time mouse plugin implements a generalized version of the SRT task \n(Nissen & Bullmer, 1987)\n. Squares are displayed in a grid-based system on the screen, and one square changes color. The participant must click on the square that changes color.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget\n\n\narray\n\n\nundefined\n\n\nThe location of the target. The array should be the \n[row, column]\n of the target.\n\n\n\n\n\n\ngrid\n\n\narray\n\n\n[[1,1,1,1]]\n\n\nThis array represents the grid of boxes shown on the screen. Each inner array represents a single row. The entries in the inner arrays represent the columns. If an entry is \n1\n then a square will be drawn at that location on the grid. If an entry is \n0\n then the corresponding location on the grid will be empty. Thus, by mixing \n1\ns and \n0\ns it is possible to create many different grid-based arrangements.\n\n\n\n\n\n\ngrid_square_size\n\n\nnumeric\n\n\n100\n\n\nThe width and height in pixels of each square in the grid.\n\n\n\n\n\n\ntarget_color\n\n\nhex color code\n\n\n#999\n\n\nThe color of the target square.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, the trial ends after a key press. Feedback is displayed if \nshow_response_feedback\n is true.\n\n\n\n\n\n\npre_target_duration\n\n\nnumeric\n\n\n0\n\n\nThe number of milliseconds to display the grid \nbefore\n the target changes color.\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nThe maximum length of time of the trial, not including feedback.\n\n\n\n\n\n\nfade_duration\n\n\nnumeric\n\n\nnull\n\n\nIf a positive number, the target will progressively change color at the start of the trial, with the transition lasting this many milliseconds.\n\n\n\n\n\n\nallow_nontarget_responses\n\n\nboolean\n\n\nfalse\n\n\nIf true, the user can make nontarget response.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nnull\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which keys to press).\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ngrid\n\n\nJSON\n\n\nA JSON-encoded representation of the grid.\n\n\n\n\n\n\ntarget\n\n\nJSON\n\n\nA JSON-encoded representation of the target on the grid.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nBasic example with four squares in a single row\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'serial-reaction-time-mouse'\n,\n\n  \ngrid\n:\n \n[[\n1\n,\n1\n,\n1\n,\n1\n]],\n\n  \ntarget\n:\n \n[\n0\n,\n1\n]\n\n\n}\n\n\n\n\n\n\n2x2 grid with extra space in the middle\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'serial-reaction-time'\n,\n\n  \ngrid\n:\n \n[[\n1\n,\n0\n,\n1\n],[\n0\n,\n0\n,\n0\n],[\n1\n,\n0\n,\n1\n]],\n\n  \ntarget\n:\n \n[\n0\n,\n2\n]\n\n\n}",
            "title": "jspsych-serial-reaction-time-mouse"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time-mouse/#jspsych-serial-reaction-time-mouse-plugin",
            "text": "The serial reaction time mouse plugin implements a generalized version of the SRT task  (Nissen & Bullmer, 1987) . Squares are displayed in a grid-based system on the screen, and one square changes color. The participant must click on the square that changes color.",
            "title": "jspsych-serial-reaction-time-mouse plugin"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time-mouse/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      target  array  undefined  The location of the target. The array should be the  [row, column]  of the target.    grid  array  [[1,1,1,1]]  This array represents the grid of boxes shown on the screen. Each inner array represents a single row. The entries in the inner arrays represent the columns. If an entry is  1  then a square will be drawn at that location on the grid. If an entry is  0  then the corresponding location on the grid will be empty. Thus, by mixing  1 s and  0 s it is possible to create many different grid-based arrangements.    grid_square_size  numeric  100  The width and height in pixels of each square in the grid.    target_color  hex color code  #999  The color of the target square.    response_ends_trial  boolean  true  If true, the trial ends after a key press. Feedback is displayed if  show_response_feedback  is true.    pre_target_duration  numeric  0  The number of milliseconds to display the grid  before  the target changes color.    trial_duration  numeric  null  The maximum length of time of the trial, not including feedback.    fade_duration  numeric  null  If a positive number, the target will progressively change color at the start of the trial, with the transition lasting this many milliseconds.    allow_nontarget_responses  boolean  false  If true, the user can make nontarget response.    prompt  string  null  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which keys to press).",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time-mouse/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      grid  JSON  A JSON-encoded representation of the grid.    target  JSON  A JSON-encoded representation of the target on the grid.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time-mouse/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time-mouse/#basic-example-with-four-squares-in-a-single-row",
            "text": "var   trial   =   { \n   type :   'serial-reaction-time-mouse' , \n   grid :   [[ 1 , 1 , 1 , 1 ]], \n   target :   [ 0 , 1 ]  }",
            "title": "Basic example with four squares in a single row"
        },
        {
            "location": "/plugins/jspsych-serial-reaction-time-mouse/#2x2-grid-with-extra-space-in-the-middle",
            "text": "var   trial   =   { \n   type :   'serial-reaction-time' , \n   grid :   [[ 1 , 0 , 1 ],[ 0 , 0 , 0 ],[ 1 , 0 , 1 ]], \n   target :   [ 0 , 2 ]  }",
            "title": "2x2 grid with extra space in the middle"
        },
        {
            "location": "/plugins/jspsych-survey-likert/",
            "text": "jspsych-survey-likert plugin\n\u00b6\n\n\nThe survey-likert plugin displays a set of questions with Likert scale responses. The subject responds by selecting a radio button.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquestions\n\n\narray\n\n\nundefined\n\n\nAn array of objects, each object represents a question that appears on the screen. Each object contains a prompt, labels and required parameter that will be applied to the question. See examples below for further clarification.\nprompt\n: Type string, default value is \nundefined\n. The strings are the question that will be associated with a slider. \nlabels\n: Type array, default value is \nundefined\n. Each array element is an array of strings. The innermost arrays contain a set of labels to display for an individual question. If you want to use blank responses and only label the end points or some subset of the options, just insert a blank string for the unlabeled responses.\nrequired\n: Type boolean, default value is false. Makes answering questions required.\n\n\n\n\n\n\npreamble\n\n\nstring\n\n\nempty string\n\n\nHTML formatted string to display at the top of the page above all the questions.\n\n\n\n\n\n\nbutton_label\n\n\nstring\n\n\n'Continue'\n\n\nLabel of the button.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nresponses\n\n\nJSON string\n\n\nA string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in \nQ0\n, the second in \nQ1\n, and so on. The responses are recorded as integers, representing the position of the slider on the scale.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nBasic example with multiple questions on a page.\n\u00b6\n\n\n// defining two different response scales that can be used.\n\n\nvar\n \nscale_1\n \n=\n \n[\n\"Strongly Disagree\"\n,\n \n\"Disagree\"\n,\n \n\"Neutral\"\n,\n \n\"Agree\"\n,\n \n\"Strongly Agree\"\n];\n\n\n\nvar\n \nlikert_page\n \n=\n \n{\n\n    \ntype\n:\n \n'survey-likert'\n,\n\n    \nquestions\n:\n \n[{\nprompt\n:\n \n\"I like vegetables.\"\n,\n \nlabels\n:\n \nscale_1\n],\n\n\n};",
            "title": "jspsych-survey-likert"
        },
        {
            "location": "/plugins/jspsych-survey-likert/#jspsych-survey-likert-plugin",
            "text": "The survey-likert plugin displays a set of questions with Likert scale responses. The subject responds by selecting a radio button.",
            "title": "jspsych-survey-likert plugin"
        },
        {
            "location": "/plugins/jspsych-survey-likert/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      questions  array  undefined  An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, labels and required parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value is  undefined . The strings are the question that will be associated with a slider.  labels : Type array, default value is  undefined . Each array element is an array of strings. The innermost arrays contain a set of labels to display for an individual question. If you want to use blank responses and only label the end points or some subset of the options, just insert a blank string for the unlabeled responses. required : Type boolean, default value is false. Makes answering questions required.    preamble  string  empty string  HTML formatted string to display at the top of the page above all the questions.    button_label  string  'Continue'  Label of the button.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-survey-likert/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      responses  JSON string  A string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in  Q0 , the second in  Q1 , and so on. The responses are recorded as integers, representing the position of the slider on the scale.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-survey-likert/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-survey-likert/#basic-example-with-multiple-questions-on-a-page",
            "text": "// defining two different response scales that can be used.  var   scale_1   =   [ \"Strongly Disagree\" ,   \"Disagree\" ,   \"Neutral\" ,   \"Agree\" ,   \"Strongly Agree\" ];  var   likert_page   =   { \n     type :   'survey-likert' , \n     questions :   [{ prompt :   \"I like vegetables.\" ,   labels :   scale_1 ],  };",
            "title": "Basic example with multiple questions on a page."
        },
        {
            "location": "/plugins/jspsych-survey-multi-choice/",
            "text": "jspsych-survey-multi-choice plugin\n\u00b6\n\n\nThe survey-multi-choice plugin displays a set of questions with multiple choice response fields. The subject selects a single answer.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquestions\n\n\narray\n\n\nundefined\n\n\nAn array of objects, each object represents a question that appears on the screen. Each object contains a prompt, options, required, and horizontal parameter that will be applied to the question. See examples below for further clarification.\nprompt\n: Type string, default value is \nundefined\n. The string is prompt/question that will be associated with a group of options (radio buttons). All questions will get presented on the same page (trial).\noptions\n: Type array, defualt value is \nundefined\n. An array of strings. The array contains a set of options to display for an individual question.\nrequired\n: Type boolean, default value is null. The boolean value indicates if a question is required('true') or not ('false'), using the HTML5 \nrequired\n attribute. If this parameter is undefined, the question will be optional. Note: The HTML5 \nrequired\n attribute is \nnot currently supported by the Safari browser\n.\nhorizontal\n:Type boolean, default value is false. If true, then the question is centered and the options are displayed horizontally.\n\n\n\n\n\n\npreamble\n\n\nstring\n\n\nempty string\n\n\nHTML formatted string to display at the top of the page above all the questions.\n\n\n\n\n\n\nbutton_label\n\n\nstring\n\n\n'Continue'\n\n\nLabel of the button.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nresponses\n\n\nJSON string\n\n\nA string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in \nQ0\n, the second in \nQ1\n, and so on. The responses are recorded as the name of the option label.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nBasic example with multiple questions on a page.\n\u00b6\n\n\n    \n// defining groups of questions that will go together.\n\n    \nvar\n \npage_1_questions\n \n=\n \n[\n\"I like vegetables.\"\n,\n \n\"I like fruit.\"\n];\n\n\n    \n// definiting two different response scales that can be used.\n\n    \nvar\n \npage_1_options\n \n=\n \n[\n\"Strongly Disagree\"\n,\n \n\"Disagree\"\n,\n \n\"Neutral\"\n,\n \n\"Agree\"\n,\n \n\"Strongly Agree\"\n];\n\n    \nvar\n \npage_2_options\n \n=\n \n[\n\"Strongly Disagree\"\n,\n \n\"Disagree\"\n,\n \n\"Somewhat Disagree\"\n,\n \n\"Neural\"\n,\n \n\"Somewhat Agree\"\n,\n \n\"Agree\"\n,\n \n\"Strongly Agree\"\n];\n\n\n    \nvar\n \nmulti_choice_block\n \n=\n \n{\n\n      \ntype\n:\n \n'survey-multi-choice'\n,\n\n      \nquestions\n:\n \n[{\nprompt\n:\n \n\"I like vegetables\"\n,\n \noptions\n:\n \npage_1_options\n,\n \nrequired\n:\ntrue\n,},\n \n{\nprompt\n:\n \n\"I like fruit\"\n,\n \noptions\n:\n \npage_2_options\n,\n \nrequired\n:\n \nfalse\n}],\n\n    \n};\n\n\n    \nvar\n \nmulti_choice_block_horizontal\n \n=\n \n{\n\n      \ntype\n:\n \n'survey-multi-choice'\n,\n\n      \nquestions\n:\n \n[{\nprompt\n:\n \n\"I like vegetables\"\n,\n \noptions\n:\n \npage_1_options\n,\n \nrequired\n:\n \ntrue\n,\n \nhorizontal\n:\n \ntrue\n,},\n \n{\nprompt\n:\n \n\"I like fruit\"\n,\n \noptions\n:\n \npage_2_options\n,\n \nrequired\n:\n \nfalse\n,\n \nhorizontal\n:\n \nfalse\n}],\n\n    \n};\n\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \n[\nmulti_choice_block\n,\n \nmulti_choice_block_horizontal\n],\n\n      \non_finish\n:\n \nfunction\n()\n \n{\n\n        \njsPsych\n.\ndata\n.\ndisplayData\n();\n\n      \n}\n\n    \n});",
            "title": "jspsych-survey-multi-choice"
        },
        {
            "location": "/plugins/jspsych-survey-multi-choice/#jspsych-survey-multi-choice-plugin",
            "text": "The survey-multi-choice plugin displays a set of questions with multiple choice response fields. The subject selects a single answer.",
            "title": "jspsych-survey-multi-choice plugin"
        },
        {
            "location": "/plugins/jspsych-survey-multi-choice/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      questions  array  undefined  An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, options, required, and horizontal parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value is  undefined . The string is prompt/question that will be associated with a group of options (radio buttons). All questions will get presented on the same page (trial). options : Type array, defualt value is  undefined . An array of strings. The array contains a set of options to display for an individual question. required : Type boolean, default value is null. The boolean value indicates if a question is required('true') or not ('false'), using the HTML5  required  attribute. If this parameter is undefined, the question will be optional. Note: The HTML5  required  attribute is  not currently supported by the Safari browser . horizontal :Type boolean, default value is false. If true, then the question is centered and the options are displayed horizontally.    preamble  string  empty string  HTML formatted string to display at the top of the page above all the questions.    button_label  string  'Continue'  Label of the button.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-survey-multi-choice/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      responses  JSON string  A string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in  Q0 , the second in  Q1 , and so on. The responses are recorded as the name of the option label.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-survey-multi-choice/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-survey-multi-choice/#basic-example-with-multiple-questions-on-a-page",
            "text": "// defining groups of questions that will go together. \n     var   page_1_questions   =   [ \"I like vegetables.\" ,   \"I like fruit.\" ]; \n\n     // definiting two different response scales that can be used. \n     var   page_1_options   =   [ \"Strongly Disagree\" ,   \"Disagree\" ,   \"Neutral\" ,   \"Agree\" ,   \"Strongly Agree\" ]; \n     var   page_2_options   =   [ \"Strongly Disagree\" ,   \"Disagree\" ,   \"Somewhat Disagree\" ,   \"Neural\" ,   \"Somewhat Agree\" ,   \"Agree\" ,   \"Strongly Agree\" ]; \n\n     var   multi_choice_block   =   { \n       type :   'survey-multi-choice' , \n       questions :   [{ prompt :   \"I like vegetables\" ,   options :   page_1_options ,   required : true ,},   { prompt :   \"I like fruit\" ,   options :   page_2_options ,   required :   false }], \n     }; \n\n     var   multi_choice_block_horizontal   =   { \n       type :   'survey-multi-choice' , \n       questions :   [{ prompt :   \"I like vegetables\" ,   options :   page_1_options ,   required :   true ,   horizontal :   true ,},   { prompt :   \"I like fruit\" ,   options :   page_2_options ,   required :   false ,   horizontal :   false }], \n     }; \n\n     jsPsych . init ({ \n       timeline :   [ multi_choice_block ,   multi_choice_block_horizontal ], \n       on_finish :   function ()   { \n         jsPsych . data . displayData (); \n       } \n     });",
            "title": "Basic example with multiple questions on a page."
        },
        {
            "location": "/plugins/jspsych-survey-multi-select/",
            "text": "jspsych-survey-multi-select plugin\n\u00b6\n\n\nThe survey-multi-select plugin displays a set of questions with multiple select response fields. The subject could select multiple answers.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquestions\n\n\narray\n\n\nundefined\n\n\nAn array of objects, each object represents a question that appears on the screen. Each object contains a prompt, options and horizontal parameter that will be applied to the question. See examples below for further clarification.\nprompt\n: Type string, default value of \nundefined\n. The string is the prompt/question that will be associated with a group of options (check boxes). All questions will get presented on the same page (trial).\noptions\n: Type array, default value of \nundefined\n. The array contains a set of options to display for an individual question.\nhorizontal\n: Type boolean, default value of false. If true, the questions are centered and options are displayed horizontally.\n\n\n\n\n\n\nrequired\n\n\nboolean\n\n\ntrue\n\n\nIf true, then at least one option must be selected.\n\n\n\n\n\n\npreamble\n\n\nstring\n\n\nempty string\n\n\nHTML formatted string to display at the top of the page above all the questions.\n\n\n\n\n\n\nbutton_label\n\n\nstring\n\n\n'Continue'\n\n\nLabel of the button.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nresponses\n\n\nJSON string\n\n\nAn array containing all selected choices in JSON format for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in \nQ0\n, the second in \nQ1\n, and so on. The responses are recorded as the name of the option label.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nBasic example with multiple questions on a page.\n\u00b6\n\n\n    \n// definiting two different response scales that can be used.\n\n    \nvar\n \npage_1_options\n \n=\n \n[\n\"Strongly Disagree\"\n,\n \n\"Disagree\"\n,\n \n\"Neutral\"\n,\n \n\"Agree\"\n,\n \n\"Strongly Agree\"\n];\n\n    \nvar\n \npage_2_options\n \n=\n \n[\n\"Strongly Disagree\"\n,\n \n\"Disagree\"\n,\n \n\"Somewhat Disagree\"\n,\n \n\"Neural\"\n,\n \n\"Somewhat Agree\"\n,\n \n\"Agree\"\n,\n \n\"Strongly Agree\"\n];\n\n\n    \nvar\n \nmulti_select_block\n \n=\n \n{\n\n        \ntype\n:\n \n'survey-multi-select'\n,\n\n        \nquestions\n:\n \n[{\nprompt\n:\n \n\"I like vegetables\"\n,\n \noptions\n:\n \npage_1_options\n},\n \n{\nprompt\n:\n \n\"I like fruit\"\n,\n \noptions\n:\n \npage_2_options\n}]\n\n    \n};\n\n\n    \nvar\n \nmulti_select_block_horizontal\n \n=\n \n{\n\n        \ntype\n:\n \n'survey-multi-select'\n,\n\n        \nquestions\n:\n \n[{\nprompt\n:\n \n\"I like vegetables\"\n,\n \noptions\n:\n \npage_1_options\n,\n \nhorizontal\n:\n \ntrue\n},\n \n{\nprompt\n:\n \n\"I like fruit\"\n,\n \noptions\n:\n \npage_2_options\n,\n \nhoriztonal\n:\n \nfalse\n}]\n\n    \n};\n\n\n    \njsPsych\n.\ninit\n({\n\n      \ntimeline\n:\n \n[\nmulti_select_block\n,\n \nmulti_select_block_horizontal\n],\n\n      \non_finish\n:\n \nfunction\n()\n \n{\n\n        \njsPsych\n.\ndata\n.\ndisplayData\n();\n\n      \n}\n\n    \n});",
            "title": "jspsych-survey-multi-select"
        },
        {
            "location": "/plugins/jspsych-survey-multi-select/#jspsych-survey-multi-select-plugin",
            "text": "The survey-multi-select plugin displays a set of questions with multiple select response fields. The subject could select multiple answers.",
            "title": "jspsych-survey-multi-select plugin"
        },
        {
            "location": "/plugins/jspsych-survey-multi-select/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      questions  array  undefined  An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, options and horizontal parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value of  undefined . The string is the prompt/question that will be associated with a group of options (check boxes). All questions will get presented on the same page (trial). options : Type array, default value of  undefined . The array contains a set of options to display for an individual question. horizontal : Type boolean, default value of false. If true, the questions are centered and options are displayed horizontally.    required  boolean  true  If true, then at least one option must be selected.    preamble  string  empty string  HTML formatted string to display at the top of the page above all the questions.    button_label  string  'Continue'  Label of the button.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-survey-multi-select/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      responses  JSON string  An array containing all selected choices in JSON format for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in  Q0 , the second in  Q1 , and so on. The responses are recorded as the name of the option label.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-survey-multi-select/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-survey-multi-select/#basic-example-with-multiple-questions-on-a-page",
            "text": "// definiting two different response scales that can be used. \n     var   page_1_options   =   [ \"Strongly Disagree\" ,   \"Disagree\" ,   \"Neutral\" ,   \"Agree\" ,   \"Strongly Agree\" ]; \n     var   page_2_options   =   [ \"Strongly Disagree\" ,   \"Disagree\" ,   \"Somewhat Disagree\" ,   \"Neural\" ,   \"Somewhat Agree\" ,   \"Agree\" ,   \"Strongly Agree\" ]; \n\n     var   multi_select_block   =   { \n         type :   'survey-multi-select' , \n         questions :   [{ prompt :   \"I like vegetables\" ,   options :   page_1_options },   { prompt :   \"I like fruit\" ,   options :   page_2_options }] \n     }; \n\n     var   multi_select_block_horizontal   =   { \n         type :   'survey-multi-select' , \n         questions :   [{ prompt :   \"I like vegetables\" ,   options :   page_1_options ,   horizontal :   true },   { prompt :   \"I like fruit\" ,   options :   page_2_options ,   horiztonal :   false }] \n     }; \n\n     jsPsych . init ({ \n       timeline :   [ multi_select_block ,   multi_select_block_horizontal ], \n       on_finish :   function ()   { \n         jsPsych . data . displayData (); \n       } \n     });",
            "title": "Basic example with multiple questions on a page."
        },
        {
            "location": "/plugins/jspsych-survey-text/",
            "text": "jspsych-survey-text plugin\n\u00b6\n\n\nThe survey-text plugin displays a set of questions with free response text fields. The subject types in answers.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquestions\n\n\narray\n\n\nundefined\n\n\nAn array of objects, each object represents a question that appears on the screen. Each object contains a prompt, value, rows, and columns parameter that will be applied to the question. See examples below for further clarification.\nprompt\n: Type string, default value of \nundefined\n. The string is the prompt for the subject to respond to. Each question gets its own response field.\nvalue\n: Type array, default value of \n[\"\"]\n. The string will be used to populate the response field with editable answers.\nrows\n: Type array, default value of 1. The number of rows for the response text box. \ncolumns\n: Type array, default value of 40. The number of columns for the response text box.\n\n\n\n\n\n\npreamble\n\n\nstring\n\n\nempty string\n\n\nHTML formatted string to display at the top of the page above all the questions.\n\n\n\n\n\n\nbutton_label\n\n\nstring\n\n\n'Continue'\n\n\nThe text that appears on the button to finish the trial.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nresponses\n\n\nJSON string\n\n\nA string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in \nQ0\n, the second in \nQ1\n, and so on. Each response is a string containing whatever the subject typed into the associated text box.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nBasic example\n\u00b6\n\n\n// defining groups of questions that will go together.\n\n\nvar\n \nsurvey_trial\n \n=\n \n{\n\n  \ntype\n:\n \n'survey-text'\n,\n\n  \nquestions\n:\n \n[{\nprompt\n:\n \n\"How old are you?\"\n},\n \n{\nprompt\n:\n \n\"Where were you born?\"\n}],\n\n\n};\n\n\n\n\n\n\nCustom number of rows and columns\n\u00b6\n\n\nvar\n \nsurvey_trial\n \n=\n \n{\n\n  \ntype\n:\n \n'survey-text'\n,\n\n  \nquestions\n:\n \n[{\nprompt\n:\n \n\"How old are you?\"\n,\n \nrows\n:\n \n5\n,\n \ncolumns\n:\n \n40\n},\n \n{\nprompt\n:\n \n\"Where were you born?\"\n,\n \nrows\n:\n \n3\n,\n \ncolumns\n:\n \n50\n}],\n\n\n};",
            "title": "jspsych-survey-text"
        },
        {
            "location": "/plugins/jspsych-survey-text/#jspsych-survey-text-plugin",
            "text": "The survey-text plugin displays a set of questions with free response text fields. The subject types in answers.",
            "title": "jspsych-survey-text plugin"
        },
        {
            "location": "/plugins/jspsych-survey-text/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      questions  array  undefined  An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, value, rows, and columns parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value of  undefined . The string is the prompt for the subject to respond to. Each question gets its own response field. value : Type array, default value of  [\"\"] . The string will be used to populate the response field with editable answers. rows : Type array, default value of 1. The number of rows for the response text box.  columns : Type array, default value of 40. The number of columns for the response text box.    preamble  string  empty string  HTML formatted string to display at the top of the page above all the questions.    button_label  string  'Continue'  The text that appears on the button to finish the trial.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-survey-text/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      responses  JSON string  A string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in  Q0 , the second in  Q1 , and so on. Each response is a string containing whatever the subject typed into the associated text box.    rt  numeric  The response time in milliseconds for the subject to make a response.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-survey-text/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-survey-text/#basic-example",
            "text": "// defining groups of questions that will go together.  var   survey_trial   =   { \n   type :   'survey-text' , \n   questions :   [{ prompt :   \"How old are you?\" },   { prompt :   \"Where were you born?\" }],  };",
            "title": "Basic example"
        },
        {
            "location": "/plugins/jspsych-survey-text/#custom-number-of-rows-and-columns",
            "text": "var   survey_trial   =   { \n   type :   'survey-text' , \n   questions :   [{ prompt :   \"How old are you?\" ,   rows :   5 ,   columns :   40 },   { prompt :   \"Where were you born?\" ,   rows :   3 ,   columns :   50 }],  };",
            "title": "Custom number of rows and columns"
        },
        {
            "location": "/plugins/jspsych-video/",
            "text": "jspsych-video plugin\n\u00b6\n\n\nThis plugin is for showing a video. No responses are recorded. The trial concludes when the video finishes.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsources\n\n\narray\n\n\nundefined\n\n\nAn array of file paths to the video. You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm) to maximize the \ncross-browser compatibility\n. Usually .mp4 is a safe option. The player will use the first source file in the array that is compatible with the browser, so specify the files in order of preference.\n\n\n\n\n\n\nwidth\n\n\nnumeric\n\n\nwidth of the video file\n\n\nThe width of the video display in pixels.\n\n\n\n\n\n\nheight\n\n\nnumeric\n\n\nheigh of the video file\n\n\nThe height of the video display in pixels.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\nempty string\n\n\nA message (any valid HTML) to display beneath the video element.\n\n\n\n\n\n\nautoplay\n\n\nboolean\n\n\ntrue\n\n\nIf true, the video will begin playing as soon as it has loaded.\n\n\n\n\n\n\ncontrols\n\n\nboolean\n\n\nfalse\n\n\nIf true, controls for the video player will be available to the subject. They will be able to pause the video or move the playback to any point in the video.\n\n\n\n\n\n\nstart\n\n\nnumeric\n\n\nnull\n\n\nIf given a value, the video will start at this time point in seconds.\n\n\n\n\n\n\nstop\n\n\nnumeric\n\n\nnull\n\n\nIf given a value, the video will stop at this time point in seconds.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nJSON encoding of the \nsources\n array.\n\n\n\n\n\n\n\n\nExample\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'video'\n,\n\n    \nsources\n:\n \n[\n'video/sample_video.mp4'\n]\n\n\n}",
            "title": "jspsych-video"
        },
        {
            "location": "/plugins/jspsych-video/#jspsych-video-plugin",
            "text": "This plugin is for showing a video. No responses are recorded. The trial concludes when the video finishes.",
            "title": "jspsych-video plugin"
        },
        {
            "location": "/plugins/jspsych-video/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      sources  array  undefined  An array of file paths to the video. You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm) to maximize the  cross-browser compatibility . Usually .mp4 is a safe option. The player will use the first source file in the array that is compatible with the browser, so specify the files in order of preference.    width  numeric  width of the video file  The width of the video display in pixels.    height  numeric  heigh of the video file  The height of the video display in pixels.    prompt  string  empty string  A message (any valid HTML) to display beneath the video element.    autoplay  boolean  true  If true, the video will begin playing as soon as it has loaded.    controls  boolean  false  If true, controls for the video player will be available to the subject. They will be able to pause the video or move the playback to any point in the video.    start  numeric  null  If given a value, the video will start at this time point in seconds.    stop  numeric  null  If given a value, the video will stop at this time point in seconds.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-video/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  JSON encoding of the  sources  array.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-video/#example",
            "text": "var   trial   =   { \n     type :   'video' , \n     sources :   [ 'video/sample_video.mp4' ]  }",
            "title": "Example"
        },
        {
            "location": "/plugins/jspsych-visual-search-circle/",
            "text": "jspsych-visual-search-circle plugin\n\u00b6\n\n\nThis plugin presents a customizable visual-search task modelled after \nWang, Cavanagh, & Green (1994)\n. The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point. Here is an example using normal and backward Ns:\n\n\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget_present\n\n\nboolean\n\n\nundefined\n\n\nIs the target present?\n\n\n\n\n\n\nset_size\n\n\nnumeric\n\n\nundefined\n\n\nHow many items should be displayed?\n\n\n\n\n\n\ntarget\n\n\nstring\n\n\nundefined\n\n\nPath to image file that is the search target.\n\n\n\n\n\n\nfoil\n\n\nstring or array\n\n\nundefined\n\n\nPath to image file that is the foil/distractor. Can specify an array of distractors if the distractors are all different images.\n\n\n\n\n\n\nfixation_image\n\n\nstring\n\n\nundefined\n\n\nPath to image file that is a fixation target.\n\n\n\n\n\n\ntarget_size\n\n\narray\n\n\n[50, 50]\n\n\nTwo element array indicating the height and width of the search array element images.\n\n\n\n\n\n\nfixation_size\n\n\narray\n\n\n[16, 16]\n\n\nTwo element array indicating the height and width of the fixation image.\n\n\n\n\n\n\ncircle_diameter\n\n\nnumeric\n\n\n250\n\n\nThe diameter of the search array circle in pixels.\n\n\n\n\n\n\ntarget_present_key\n\n\nnumeric\n\n\n74\n\n\nThe key to press if the target is present in the search array.\n\n\n\n\n\n\ntarget_absent_key\n\n\nnumeric\n\n\n70\n\n\nThe key to press if the target is not present in the search array.\n\n\n\n\n\n\ntrial_duration\n\n\nnumeric\n\n\nnull\n\n\nThe maximum amount of time the subject is allowed to search before the trial will continue. A value of null will allow the subject to search indefinitely.\n\n\n\n\n\n\nfixation_duration\n\n\nnumeric\n\n\n1000\n\n\nHow long to show the fixation image for before the search array (in milliseconds).\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\nTrue if the subject gave the correct response.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\nset_size\n\n\nnumeric\n\n\nThe number of items in the search array\n\n\n\n\n\n\ntarget_present\n\n\nboolean\n\n\nTrue if the target is present in the search array\n\n\n\n\n\n\nlocations\n\n\nJSON string\n\n\nJSON-encoded array where each element of the array is the pixel value of the center of an image in the search array. If the target is present, then the first element will represent the location of the target.\n\n\n\n\n\n\n\n\nExample\n\u00b6\n\n\nSearch for the backward N\n\u00b6\n\n\nvar\n \ntrial_1\n \n=\n \n{\n\n  \ntype\n:\n \n'visual-search-circle'\n,\n\n  \ntarget\n:\n \n'img/backwardN.gif'\n,\n\n  \nfoil\n:\n \n'img/normalN.gif'\n,\n\n  \nfixation_image\n:\n \n'img/fixation.gif'\n,\n\n  \ntarget_present\n:\n \ntrue\n,\n\n  \nset_size\n:\n \n4\n\n\n}",
            "title": "jspsych-visual-search-circle"
        },
        {
            "location": "/plugins/jspsych-visual-search-circle/#jspsych-visual-search-circle-plugin",
            "text": "This plugin presents a customizable visual-search task modelled after  Wang, Cavanagh, & Green (1994) . The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point. Here is an example using normal and backward Ns:",
            "title": "jspsych-visual-search-circle plugin"
        },
        {
            "location": "/plugins/jspsych-visual-search-circle/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      target_present  boolean  undefined  Is the target present?    set_size  numeric  undefined  How many items should be displayed?    target  string  undefined  Path to image file that is the search target.    foil  string or array  undefined  Path to image file that is the foil/distractor. Can specify an array of distractors if the distractors are all different images.    fixation_image  string  undefined  Path to image file that is a fixation target.    target_size  array  [50, 50]  Two element array indicating the height and width of the search array element images.    fixation_size  array  [16, 16]  Two element array indicating the height and width of the fixation image.    circle_diameter  numeric  250  The diameter of the search array circle in pixels.    target_present_key  numeric  74  The key to press if the target is present in the search array.    target_absent_key  numeric  70  The key to press if the target is not present in the search array.    trial_duration  numeric  null  The maximum amount of time the subject is allowed to search before the trial will continue. A value of null will allow the subject to search indefinitely.    fixation_duration  numeric  1000  How long to show the fixation image for before the search array (in milliseconds).",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-visual-search-circle/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      correct  boolean  True if the subject gave the correct response.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    set_size  numeric  The number of items in the search array    target_present  boolean  True if the target is present in the search array    locations  JSON string  JSON-encoded array where each element of the array is the pixel value of the center of an image in the search array. If the target is present, then the first element will represent the location of the target.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-visual-search-circle/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/plugins/jspsych-visual-search-circle/#search-for-the-backward-n",
            "text": "var   trial_1   =   { \n   type :   'visual-search-circle' , \n   target :   'img/backwardN.gif' , \n   foil :   'img/normalN.gif' , \n   fixation_image :   'img/fixation.gif' , \n   target_present :   true , \n   set_size :   4  }",
            "title": "Search for the backward N"
        },
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/",
            "text": "jspsych-vsl-animate-occlusion plugin\n\u00b6\n\n\nThe VSL (visual statistical learning) animate occlusion plugin displays an animated sequence of shapes that disappear behind an occluding rectangle while they change from one shape to another. This plugin can be used to replicate the experiments described in:\n\n\nFiser, J., & Aslin, R. N. (2002). Statistical learning of higher-order temporal structure from visual shape sequences. \nJournal of Experimental Psychology: Learning, Memory, and Cognition, 28\n(3), 458.\n\n\nDependency\n\u00b6\n\n\nThis plugin requires the Snap.svg library, available at \nhttp://www.snapsvg.io\n. You must include the library in the \n<head>\n section of your experiment page.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nEach element of the array is a stimulus. A stimulus is a path to an image file. The order of stimuli in the array determines the order of the animation sequence.\n\n\n\n\n\n\ncanvas_size\n\n\narray\n\n\n[400, 400]\n\n\nArray specifying the width and height of the area that the animation will display in. Stimuli will move to the edges of this area, so increasing the width without increasing the \ntiming_cycle\n parameter will speed up the images.\n\n\n\n\n\n\nimage_size\n\n\narray\n\n\n[100, 100]\n\n\nArray specifying the width and height of the images to show. The occluding rectangle will have a width equal to the width of image_size.\n\n\n\n\n\n\ninitial_direction\n\n\nstring\n\n\n\"left\"\n\n\nWhich direction the stimulus should move first (subsequent directions will alternate). Choices are \"left\" or \"right\".\n\n\n\n\n\n\nocclude_center\n\n\nboolean\n\n\ntrue\n\n\nIf true, display a rectangle in the center of the screen that is just wide enough to occlude the image completely as it passes behind.\n\n\n\n\n\n\nchoices\n\n\narray of keycodes\n\n\njsPsych.ALL_KEYS\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g., \n'a'\n, \n'q'\n). The default value of \njsPsych.ALL_KEYS\n means that all keys will be accepted as valid responses. Specifying \njsPsych.NO_KEYS\n will mean that no responses are allowed.\n\n\n\n\n\n\ncycle_duration\n\n\nnumeric\n\n\n1000\n\n\nHow long it takes for a stimulus in the sequence to make a complete cycle (move to the edge and back to the center) in milliseconds.\n\n\n\n\n\n\npre_movement_duration\n\n\nnumeric\n\n\n500\n\n\nHow long to wait before the stimuli starts moving from behind the center rectangle.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nJSON string\n\n\nA JSON encoded array where each element of the array is a stimulus from the sequence, in the order that they were shown.\n\n\n\n\n\n\nresponses\n\n\nJSON string\n\n\nA JSON encoded array containing all response information. The encoded object is an array containing one element for each valid response. Each response item has three properties: \nkey\n the key code of the response key, \nstimulus\n the index of the stimulus that was displayed when the response was made, and \nrt\n the response time measured since the start of the sequence.\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nDisplaying a simple sequence.\n\u00b6\n\n\nvar\n \ntrial\n \n=\n \n{\n\n  \ntype\n:\n \n'vsl-animate-occlusion'\n,\n\n  \nstimuli\n:\n \n[\n\n    \n\"img/1.gif\"\n,\n\n    \n\"img/2.gif\"\n,\n\n    \n\"img/3.gif\"\n,\n\n    \n\"img/4.gif\"\n,\n\n    \n\"img/5.gif\"\n,\n\n    \n\"img/6.gif\"\n,\n\n    \n\"img/7.gif\"\n,\n\n    \n\"img/8.gif\"\n,\n\n    \n\"img/9.gif\"\n,\n\n    \n\"img/10.gif\"\n\n  \n]\n\n\n}",
            "title": "jspsych-vsl-animate-occlusion"
        },
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/#jspsych-vsl-animate-occlusion-plugin",
            "text": "The VSL (visual statistical learning) animate occlusion plugin displays an animated sequence of shapes that disappear behind an occluding rectangle while they change from one shape to another. This plugin can be used to replicate the experiments described in:  Fiser, J., & Aslin, R. N. (2002). Statistical learning of higher-order temporal structure from visual shape sequences.  Journal of Experimental Psychology: Learning, Memory, and Cognition, 28 (3), 458.",
            "title": "jspsych-vsl-animate-occlusion plugin"
        },
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/#dependency",
            "text": "This plugin requires the Snap.svg library, available at  http://www.snapsvg.io . You must include the library in the  <head>  section of your experiment page.",
            "title": "Dependency"
        },
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  Each element of the array is a stimulus. A stimulus is a path to an image file. The order of stimuli in the array determines the order of the animation sequence.    canvas_size  array  [400, 400]  Array specifying the width and height of the area that the animation will display in. Stimuli will move to the edges of this area, so increasing the width without increasing the  timing_cycle  parameter will speed up the images.    image_size  array  [100, 100]  Array specifying the width and height of the images to show. The occluding rectangle will have a width equal to the width of image_size.    initial_direction  string  \"left\"  Which direction the stimulus should move first (subsequent directions will alternate). Choices are \"left\" or \"right\".    occlude_center  boolean  true  If true, display a rectangle in the center of the screen that is just wide enough to occlude the image completely as it passes behind.    choices  array of keycodes  jsPsych.ALL_KEYS  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.,  'a' ,  'q' ). The default value of  jsPsych.ALL_KEYS  means that all keys will be accepted as valid responses. Specifying  jsPsych.NO_KEYS  will mean that no responses are allowed.    cycle_duration  numeric  1000  How long it takes for a stimulus in the sequence to make a complete cycle (move to the edge and back to the center) in milliseconds.    pre_movement_duration  numeric  500  How long to wait before the stimuli starts moving from behind the center rectangle.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  JSON string  A JSON encoded array where each element of the array is a stimulus from the sequence, in the order that they were shown.    responses  JSON string  A JSON encoded array containing all response information. The encoded object is an array containing one element for each valid response. Each response item has three properties:  key  the key code of the response key,  stimulus  the index of the stimulus that was displayed when the response was made, and  rt  the response time measured since the start of the sequence.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/#displaying-a-simple-sequence",
            "text": "var   trial   =   { \n   type :   'vsl-animate-occlusion' , \n   stimuli :   [ \n     \"img/1.gif\" , \n     \"img/2.gif\" , \n     \"img/3.gif\" , \n     \"img/4.gif\" , \n     \"img/5.gif\" , \n     \"img/6.gif\" , \n     \"img/7.gif\" , \n     \"img/8.gif\" , \n     \"img/9.gif\" , \n     \"img/10.gif\" \n   ]  }",
            "title": "Displaying a simple sequence."
        },
        {
            "location": "/plugins/jspsych-vsl-grid-scene/",
            "text": "jspsych-vsl-grid-scene plugin\n\u00b6\n\n\nThe VSL (visual statistical learning) grid scene plugin displays images arranged in a grid. This plugin can be used to replicate the experiments described in:\n\n\nFiser, J., & Aslin, R. N. (2001). Unsupervised statistical learning of higher-order spatial structures from visual scenes. \nPsychological Science, 12\n(6), 499-504.\n\n\nParameters\n\u00b6\n\n\nParameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nAn array that defines a grid. Grids should be declared as two dimensional arrays in \n[row][col]\n order, with paths to image files in the locations where images are displayed, and 0 in blank spaces. See example below.\n\n\n\n\n\n\nimage_size\n\n\narray\n\n\n[100, 100]\n\n\nArray specifying the width and height of the images to show. Grid cells will also be this size, with 10% padding.\n\n\n\n\n\n\ntiming_duration\n\n\nnumeric\n\n\n2000\n\n\nHow long to show the stimulus for in milliseconds.\n\n\n\n\n\n\n\n\nData Generated\n\u00b6\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nJSON string\n\n\nJSON encoded array of the stimulus shown on the trial.\n\n\n\n\n\n\n\n\nStimulus Creation Method\n\u00b6\n\n\nThe plugin also includes a public method for generating the grid scene stimuli that the plugin uses. You can use this method to create HTML strings that produce the stimuli, and then incorporate the stimuli in other plugins. To use this method, include the plugin script on the page and then call the method like this:\n\n\nvar\n \npattern\n \n=\n \n[\n\n  \n[\n\"img/1.gif\"\n,\n \n\"img/2.gif\"\n,\n \n0\n],\n\n  \n[\n \n0\n,\n \n\"img/3.gif\"\n,\n \n0\n],\n\n  \n[\n\"img/5.gif\"\n,\n \n\"img/4.gif\"\n,\n \n0\n]\n\n\n];\n\n\n\nvar\n \nimage_size\n \n=\n \n100\n;\n \n// pixels\n\n\n\nvar\n \ngrid_stimulus\n \n=\n \njsPsych\n.\nplugins\n[\n'vsl-grid-scene'\n].\ngenerate_stimulus\n(\npattern\n,\n \nimage_size\n);\n\n\n\n// grid_stimulus will now contain a string (NOT an HTML DOM object) that you can\n\n\n// pass into other plugins that accept HTML stimuli as input, such as jspsych-html-keyboard-response.\n\n\n\n\n\n\nExample\n\u00b6\n\n\nBasic example\n\u00b6\n\n\nvar\n \nscene\n \n=\n \n[\n\n  \n[\n\"img/1.gif\"\n,\n \n\"img/2.gif\"\n,\n \n0\n],\n\n  \n[\n \n0\n,\n \n\"img/3.gif\"\n,\n \n0\n],\n\n  \n[\n\"img/5.gif\"\n,\n \n\"img/4.gif\"\n,\n \n0\n]\n\n\n]\n\n\n\nvar\n \ntrial\n \n=\n \n{\n\n    \ntype\n:\n \n'vsl-grid-scene'\n,\n\n    \nstimuli\n:\n \nscene\n\n\n};",
            "title": "jspsych-vsl-grid-scene"
        },
        {
            "location": "/plugins/jspsych-vsl-grid-scene/#jspsych-vsl-grid-scene-plugin",
            "text": "The VSL (visual statistical learning) grid scene plugin displays images arranged in a grid. This plugin can be used to replicate the experiments described in:  Fiser, J., & Aslin, R. N. (2001). Unsupervised statistical learning of higher-order spatial structures from visual scenes.  Psychological Science, 12 (6), 499-504.",
            "title": "jspsych-vsl-grid-scene plugin"
        },
        {
            "location": "/plugins/jspsych-vsl-grid-scene/#parameters",
            "text": "Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  An array that defines a grid. Grids should be declared as two dimensional arrays in  [row][col]  order, with paths to image files in the locations where images are displayed, and 0 in blank spaces. See example below.    image_size  array  [100, 100]  Array specifying the width and height of the images to show. Grid cells will also be this size, with 10% padding.    timing_duration  numeric  2000  How long to show the stimulus for in milliseconds.",
            "title": "Parameters"
        },
        {
            "location": "/plugins/jspsych-vsl-grid-scene/#data-generated",
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  JSON string  JSON encoded array of the stimulus shown on the trial.",
            "title": "Data Generated"
        },
        {
            "location": "/plugins/jspsych-vsl-grid-scene/#stimulus-creation-method",
            "text": "The plugin also includes a public method for generating the grid scene stimuli that the plugin uses. You can use this method to create HTML strings that produce the stimuli, and then incorporate the stimuli in other plugins. To use this method, include the plugin script on the page and then call the method like this:  var   pattern   =   [ \n   [ \"img/1.gif\" ,   \"img/2.gif\" ,   0 ], \n   [   0 ,   \"img/3.gif\" ,   0 ], \n   [ \"img/5.gif\" ,   \"img/4.gif\" ,   0 ]  ];  var   image_size   =   100 ;   // pixels  var   grid_stimulus   =   jsPsych . plugins [ 'vsl-grid-scene' ]. generate_stimulus ( pattern ,   image_size );  // grid_stimulus will now contain a string (NOT an HTML DOM object) that you can  // pass into other plugins that accept HTML stimuli as input, such as jspsych-html-keyboard-response.",
            "title": "Stimulus Creation Method"
        },
        {
            "location": "/plugins/jspsych-vsl-grid-scene/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/plugins/jspsych-vsl-grid-scene/#basic-example",
            "text": "var   scene   =   [ \n   [ \"img/1.gif\" ,   \"img/2.gif\" ,   0 ], \n   [   0 ,   \"img/3.gif\" ,   0 ], \n   [ \"img/5.gif\" ,   \"img/4.gif\" ,   0 ]  ]  var   trial   =   { \n     type :   'vsl-grid-scene' , \n     stimuli :   scene  };",
            "title": "Basic example"
        },
        {
            "location": "/about/about/",
            "text": "About jsPsych\n\u00b6\n\n\njsPsych was created by \nJosh de Leeuw\n. There have been \nmany other contributors\n to the library; thanks to all of them!\n\n\nCitation\n\u00b6\n\n\nIf you use jsPsych for academic work please cite the following paper.\n\n\nde Leeuw, J. R. (2015). jsPsych: A JavaScript library for creating behavioral experiments in a web browser. \nBehavior Research Methods\n, \n47\n(1), 1-12. doi:10.3758/s13428-014-0458-y.\n\n\nResponse times\n\u00b6\n\n\nWondering if jsPsych can be used for research that depends on accurate response time measurement? For most purposes, the answer is yes. Response time measurements in jsPsych (and JavaScript in general) are comparable to those taken in standard lab software like Psychophysics Toolbox and E-Prime. Response times measured in JavaScript tend to be a little bit longer (10-40ms), but have similar variance. See the following references for extensive work on this topic.\n\n\n\n\nde Leeuw, J. R., & Motz, B. A. (2016). Psychophysics in a Web browser? Comparing response times collected with JavaScript and Psychophysics Toolbox in a visual search task. \nBehavior Research Methods\n, \n48\n(1), 1-12.\n\n\nHilbig, B. E. (2016). Reaction time effects in lab- versus web-based research: Experimental evidence. \nBehavior Research Methods\n, \n48\n(4), 1718-1724.\n\n\nPinet, S., Zielinski, C., Math\u00f4t, S. et al. (in press). Measuring sequences of keystrokes with jsPsych: Reliability of response times and interkeystroke intervals.  \nBehavior Research Methods\n.\n\n\nReimers, S., & Stewart, N. (2015). Presentation and response time accuracy in Adobe Flash and HTML5/JavaScript Web experiments. \nBehavior Research Methods\n, \n47\n(2), 309-327.",
            "title": "About jsPsych"
        },
        {
            "location": "/about/about/#about-jspsych",
            "text": "jsPsych was created by  Josh de Leeuw . There have been  many other contributors  to the library; thanks to all of them!",
            "title": "About jsPsych"
        },
        {
            "location": "/about/about/#citation",
            "text": "If you use jsPsych for academic work please cite the following paper.  de Leeuw, J. R. (2015). jsPsych: A JavaScript library for creating behavioral experiments in a web browser.  Behavior Research Methods ,  47 (1), 1-12. doi:10.3758/s13428-014-0458-y.",
            "title": "Citation"
        },
        {
            "location": "/about/about/#response-times",
            "text": "Wondering if jsPsych can be used for research that depends on accurate response time measurement? For most purposes, the answer is yes. Response time measurements in jsPsych (and JavaScript in general) are comparable to those taken in standard lab software like Psychophysics Toolbox and E-Prime. Response times measured in JavaScript tend to be a little bit longer (10-40ms), but have similar variance. See the following references for extensive work on this topic.   de Leeuw, J. R., & Motz, B. A. (2016). Psychophysics in a Web browser? Comparing response times collected with JavaScript and Psychophysics Toolbox in a visual search task.  Behavior Research Methods ,  48 (1), 1-12.  Hilbig, B. E. (2016). Reaction time effects in lab- versus web-based research: Experimental evidence.  Behavior Research Methods ,  48 (4), 1718-1724.  Pinet, S., Zielinski, C., Math\u00f4t, S. et al. (in press). Measuring sequences of keystrokes with jsPsych: Reliability of response times and interkeystroke intervals.   Behavior Research Methods .  Reimers, S., & Stewart, N. (2015). Presentation and response time accuracy in Adobe Flash and HTML5/JavaScript Web experiments.  Behavior Research Methods ,  47 (2), 309-327.",
            "title": "Response times"
        },
        {
            "location": "/about/support/",
            "text": "Support\n\u00b6\n\n\nFor questions about jsPsych the preferred method of support is the \njsPsych Google group\n. Questions are most likely to be answered when they include a reproducible example of the problem. If you can make your code available online and link to the experiment, that will make the question easier to answer.\n\n\nIf you have identified a problem with jsPsych, such as a bug in the code or an error in the documentation, please \nopen a new issue\n on the GitHub site.\n\n\nInquiries for paid consultation to develop experiments using jsPsych or to create new custom jsPsych features can be sent to \njosh.deleeuw@gmail.com\n.",
            "title": "Getting Help"
        },
        {
            "location": "/about/support/#support",
            "text": "For questions about jsPsych the preferred method of support is the  jsPsych Google group . Questions are most likely to be answered when they include a reproducible example of the problem. If you can make your code available online and link to the experiment, that will make the question easier to answer.  If you have identified a problem with jsPsych, such as a bug in the code or an error in the documentation, please  open a new issue  on the GitHub site.  Inquiries for paid consultation to develop experiments using jsPsych or to create new custom jsPsych features can be sent to  josh.deleeuw@gmail.com .",
            "title": "Support"
        },
        {
            "location": "/about/contributing/",
            "text": "Contributing to jsPsych\n\u00b6\n\n\nContributions to jsPsych are welcome! All of the code is managed through the GitHub repository.\n\n\nSteps for modifying the code\n\u00b6\n\n\nDiscuss the proposed change\n\u00b6\n\n\nIf you have a specific modification in mind, open a \nnew issue via GitHub\n. Describe the proposed change and what problem it solves. If you are interested in adding a new plugin to the library, it helps if you post an example of the plugin in use and describe the different use cases of the plugin.\n\n\nIf the modification you are interested in working on is not quite at the point where you have a specific modification to the code base in mind, then it might be helpful to discuss the issue first on the \njsPsych Google group\n.\n\n\nFork the library and modify the code\n\u00b6\n\n\nTo make changes to the code, you should fork the jsPsych library via GitHub. Changes should be targeted at the \nmaster\n branch.\n\n\nSubmit a pull request\n\u00b6\n\n\nOnce your modification is complete, submit a pull request to merge your changes into the main repository. Pull requests will be reviewed by the project owner.\n\n\nWriting new plugins\n\u00b6\n\n\nNew plugins are welcome additions to the library. Plugins can be distributed independently of the main library or added to the GitHub repository via a pull request and the process described above. If you want to add your plugin to the main library then there are a few guidelines to follow.\n\n\nMake the plugin as general as possible\n\u00b6\n\n\nPlugins are most useful when they are flexible. Avoid fixing the value of parameters that could be variables. This is especially important for any text that displays on the screen in order to facilitate use in multiple languages.\n\n\nUse the jsPsych.pluginAPI module when appropriate\n\u00b6\n\n\nThe pluginAPI module contains functions relevant to plugin development. Avoid duplicating the functions defined within the library in your plugin. If you have a suggestion for improving pluginAPI methods, then go ahead and submit a pull request to modify it directly.\n\n\nDocument your plugin\n\u00b6\n\n\nWhen submitting a pull request to add your plugin, make sure to include a documentation page in the same style as the other docs pages. Documentation files exist in the \ndocs\n directory.\n\n\nInclude an example file\n\u00b6\n\n\nWrite a short example file to include in the \nexamples\n directory. This should demonstrate the basic use cases of the plugin as clearly as possible.\n\n\nInclude a testing file\n\u00b6\n\n\nAutomated code testing for jsPsych is implemented with \nJest\n. To run the tests, install Node and npm. Run \nnpm install\n in the root jsPsych directory. Then run \nnpm test\n. Plugins should have a testing file that validates the behavior of all the plugin parameters. See the \n/tests/plugins\n directory for examples.",
            "title": "Contributing to jsPsych"
        },
        {
            "location": "/about/contributing/#contributing-to-jspsych",
            "text": "Contributions to jsPsych are welcome! All of the code is managed through the GitHub repository.",
            "title": "Contributing to jsPsych"
        },
        {
            "location": "/about/contributing/#steps-for-modifying-the-code",
            "text": "",
            "title": "Steps for modifying the code"
        },
        {
            "location": "/about/contributing/#discuss-the-proposed-change",
            "text": "If you have a specific modification in mind, open a  new issue via GitHub . Describe the proposed change and what problem it solves. If you are interested in adding a new plugin to the library, it helps if you post an example of the plugin in use and describe the different use cases of the plugin.  If the modification you are interested in working on is not quite at the point where you have a specific modification to the code base in mind, then it might be helpful to discuss the issue first on the  jsPsych Google group .",
            "title": "Discuss the proposed change"
        },
        {
            "location": "/about/contributing/#fork-the-library-and-modify-the-code",
            "text": "To make changes to the code, you should fork the jsPsych library via GitHub. Changes should be targeted at the  master  branch.",
            "title": "Fork the library and modify the code"
        },
        {
            "location": "/about/contributing/#submit-a-pull-request",
            "text": "Once your modification is complete, submit a pull request to merge your changes into the main repository. Pull requests will be reviewed by the project owner.",
            "title": "Submit a pull request"
        },
        {
            "location": "/about/contributing/#writing-new-plugins",
            "text": "New plugins are welcome additions to the library. Plugins can be distributed independently of the main library or added to the GitHub repository via a pull request and the process described above. If you want to add your plugin to the main library then there are a few guidelines to follow.",
            "title": "Writing new plugins"
        },
        {
            "location": "/about/contributing/#make-the-plugin-as-general-as-possible",
            "text": "Plugins are most useful when they are flexible. Avoid fixing the value of parameters that could be variables. This is especially important for any text that displays on the screen in order to facilitate use in multiple languages.",
            "title": "Make the plugin as general as possible"
        },
        {
            "location": "/about/contributing/#use-the-jspsychpluginapi-module-when-appropriate",
            "text": "The pluginAPI module contains functions relevant to plugin development. Avoid duplicating the functions defined within the library in your plugin. If you have a suggestion for improving pluginAPI methods, then go ahead and submit a pull request to modify it directly.",
            "title": "Use the jsPsych.pluginAPI module when appropriate"
        },
        {
            "location": "/about/contributing/#document-your-plugin",
            "text": "When submitting a pull request to add your plugin, make sure to include a documentation page in the same style as the other docs pages. Documentation files exist in the  docs  directory.",
            "title": "Document your plugin"
        },
        {
            "location": "/about/contributing/#include-an-example-file",
            "text": "Write a short example file to include in the  examples  directory. This should demonstrate the basic use cases of the plugin as clearly as possible.",
            "title": "Include an example file"
        },
        {
            "location": "/about/contributing/#include-a-testing-file",
            "text": "Automated code testing for jsPsych is implemented with  Jest . To run the tests, install Node and npm. Run  npm install  in the root jsPsych directory. Then run  npm test . Plugins should have a testing file that validates the behavior of all the plugin parameters. See the  /tests/plugins  directory for examples.",
            "title": "Include a testing file"
        },
        {
            "location": "/about/license/",
            "text": "License\n\u00b6\n\n\njsPsych is licensed under the MIT license.\n\n\n\n\nThe MIT License (MIT)\n\n\nCopyright (c) 2018 Joshua R. de Leeuw\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        },
        {
            "location": "/about/license/#license",
            "text": "jsPsych is licensed under the MIT license.   The MIT License (MIT)  Copyright (c) 2018 Joshua R. de Leeuw  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        }
    ]
}